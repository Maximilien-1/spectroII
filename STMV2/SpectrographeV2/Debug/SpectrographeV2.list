
SpectrographeV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005938  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080059f8  080059f8  000069f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aa8  08005aa8  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005aa8  08005aa8  00006aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ab0  08005ab0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ab0  08005ab0  00006ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ab4  08005ab4  00006ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005ab8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004720  20000068  08005b20  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004788  08005b20  00007788  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e204  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e0  00000000  00000000  00015294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  00017778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ca  00000000  00000000  00018430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001689d  00000000  00000000  00018dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010798  00000000  00000000  0002f697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c1d  00000000  00000000  0003fe2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6a4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b0  00000000  00000000  000c6a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c9d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080059e0 	.word	0x080059e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080059e0 	.word	0x080059e0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ae:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <MX_DMA_Init+0x38>)
 80004b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004b2:	4b0b      	ldr	r3, [pc, #44]	@ (80004e0 <MX_DMA_Init+0x38>)
 80004b4:	2101      	movs	r1, #1
 80004b6:	430a      	orrs	r2, r1
 80004b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80004ba:	4b09      	ldr	r3, [pc, #36]	@ (80004e0 <MX_DMA_Init+0x38>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004be:	2201      	movs	r2, #1
 80004c0:	4013      	ands	r3, r2
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2100      	movs	r1, #0
 80004ca:	200a      	movs	r0, #10
 80004cc:	f001 f88a 	bl	80015e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80004d0:	200a      	movs	r0, #10
 80004d2:	f001 f89c 	bl	800160e <HAL_NVIC_EnableIRQ>

}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b002      	add	sp, #8
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	40021000 	.word	0x40021000

080004e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b08b      	sub	sp, #44	@ 0x2c
 80004e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	2414      	movs	r4, #20
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	0018      	movs	r0, r3
 80004f0:	2314      	movs	r3, #20
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f004 ff9f 	bl	8005438 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	4b43      	ldr	r3, [pc, #268]	@ (8000608 <MX_GPIO_Init+0x124>)
 80004fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004fe:	4b42      	ldr	r3, [pc, #264]	@ (8000608 <MX_GPIO_Init+0x124>)
 8000500:	2104      	movs	r1, #4
 8000502:	430a      	orrs	r2, r1
 8000504:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000506:	4b40      	ldr	r3, [pc, #256]	@ (8000608 <MX_GPIO_Init+0x124>)
 8000508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800050a:	2204      	movs	r2, #4
 800050c:	4013      	ands	r3, r2
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000512:	4b3d      	ldr	r3, [pc, #244]	@ (8000608 <MX_GPIO_Init+0x124>)
 8000514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000516:	4b3c      	ldr	r3, [pc, #240]	@ (8000608 <MX_GPIO_Init+0x124>)
 8000518:	2180      	movs	r1, #128	@ 0x80
 800051a:	430a      	orrs	r2, r1
 800051c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800051e:	4b3a      	ldr	r3, [pc, #232]	@ (8000608 <MX_GPIO_Init+0x124>)
 8000520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000522:	2280      	movs	r2, #128	@ 0x80
 8000524:	4013      	ands	r3, r2
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b37      	ldr	r3, [pc, #220]	@ (8000608 <MX_GPIO_Init+0x124>)
 800052c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800052e:	4b36      	ldr	r3, [pc, #216]	@ (8000608 <MX_GPIO_Init+0x124>)
 8000530:	2101      	movs	r1, #1
 8000532:	430a      	orrs	r2, r1
 8000534:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000536:	4b34      	ldr	r3, [pc, #208]	@ (8000608 <MX_GPIO_Init+0x124>)
 8000538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800053a:	2201      	movs	r2, #1
 800053c:	4013      	ands	r3, r2
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	4b31      	ldr	r3, [pc, #196]	@ (8000608 <MX_GPIO_Init+0x124>)
 8000544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000546:	4b30      	ldr	r3, [pc, #192]	@ (8000608 <MX_GPIO_Init+0x124>)
 8000548:	2102      	movs	r1, #2
 800054a:	430a      	orrs	r2, r1
 800054c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800054e:	4b2e      	ldr	r3, [pc, #184]	@ (8000608 <MX_GPIO_Init+0x124>)
 8000550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000552:	2202      	movs	r2, #2
 8000554:	4013      	ands	r3, r2
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800055a:	23a0      	movs	r3, #160	@ 0xa0
 800055c:	05db      	lsls	r3, r3, #23
 800055e:	2200      	movs	r2, #0
 8000560:	2120      	movs	r1, #32
 8000562:	0018      	movs	r0, r3
 8000564:	f001 fc0d 	bl	8001d82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SMY_A_Pin|SMY_nA_Pin|SMY_B_Pin|SMY_nB_Pin
 8000568:	4928      	ldr	r1, [pc, #160]	@ (800060c <MX_GPIO_Init+0x128>)
 800056a:	4b29      	ldr	r3, [pc, #164]	@ (8000610 <MX_GPIO_Init+0x12c>)
 800056c:	2200      	movs	r2, #0
 800056e:	0018      	movs	r0, r3
 8000570:	f001 fc07 	bl	8001d82 <HAL_GPIO_WritePin>
                          |S10077_START_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2280      	movs	r2, #128	@ 0x80
 8000578:	0192      	lsls	r2, r2, #6
 800057a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800057c:	193b      	adds	r3, r7, r4
 800057e:	2284      	movs	r2, #132	@ 0x84
 8000580:	0392      	lsls	r2, r2, #14
 8000582:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800058a:	193b      	adds	r3, r7, r4
 800058c:	4a21      	ldr	r2, [pc, #132]	@ (8000614 <MX_GPIO_Init+0x130>)
 800058e:	0019      	movs	r1, r3
 8000590:	0010      	movs	r0, r2
 8000592:	f001 fa5b 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : S10077_ENDSCAN_Pin */
  GPIO_InitStruct.Pin = S10077_ENDSCAN_Pin;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	2202      	movs	r2, #2
 800059a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(S10077_ENDSCAN_GPIO_Port, &GPIO_InitStruct);
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000614 <MX_GPIO_Init+0x130>)
 80005ac:	0019      	movs	r1, r3
 80005ae:	0010      	movs	r0, r2
 80005b0:	f001 fa4c 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	2220      	movs	r2, #32
 80005b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	2201      	movs	r2, #1
 80005be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005cc:	193a      	adds	r2, r7, r4
 80005ce:	23a0      	movs	r3, #160	@ 0xa0
 80005d0:	05db      	lsls	r3, r3, #23
 80005d2:	0011      	movs	r1, r2
 80005d4:	0018      	movs	r0, r3
 80005d6:	f001 fa39 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SMY_A_Pin SMY_nA_Pin SMY_B_Pin SMY_nB_Pin
                           S10077_START_Pin */
  GPIO_InitStruct.Pin = SMY_A_Pin|SMY_nA_Pin|SMY_B_Pin|SMY_nB_Pin
 80005da:	0021      	movs	r1, r4
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	4a0b      	ldr	r2, [pc, #44]	@ (800060c <MX_GPIO_Init+0x128>)
 80005e0:	601a      	str	r2, [r3, #0]
                          |S10077_START_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2201      	movs	r2, #1
 80005e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <MX_GPIO_Init+0x12c>)
 80005f8:	0019      	movs	r1, r3
 80005fa:	0010      	movs	r0, r2
 80005fc:	f001 fa26 	bl	8001a4c <HAL_GPIO_Init>

}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b00b      	add	sp, #44	@ 0x2c
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	0000f040 	.word	0x0000f040
 8000610:	50000400 	.word	0x50000400
 8000614:	50000800 	.word	0x50000800

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
HAL_GPIO_WritePin(SMY_nA_GPIO_Port, SMY_A_Pin, GPIO_PIN_RESET);
 800061c:	2380      	movs	r3, #128	@ 0x80
 800061e:	015b      	lsls	r3, r3, #5
 8000620:	4821      	ldr	r0, [pc, #132]	@ (80006a8 <main+0x90>)
 8000622:	2200      	movs	r2, #0
 8000624:	0019      	movs	r1, r3
 8000626:	f001 fbac 	bl	8001d82 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(SMY_A_GPIO_Port, SMY_nA_Pin, GPIO_PIN_RESET);
 800062a:	2380      	movs	r3, #128	@ 0x80
 800062c:	019b      	lsls	r3, r3, #6
 800062e:	481e      	ldr	r0, [pc, #120]	@ (80006a8 <main+0x90>)
 8000630:	2200      	movs	r2, #0
 8000632:	0019      	movs	r1, r3
 8000634:	f001 fba5 	bl	8001d82 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(SMY_B_GPIO_Port, SMY_B_Pin, GPIO_PIN_RESET);
 8000638:	2380      	movs	r3, #128	@ 0x80
 800063a:	01db      	lsls	r3, r3, #7
 800063c:	481a      	ldr	r0, [pc, #104]	@ (80006a8 <main+0x90>)
 800063e:	2200      	movs	r2, #0
 8000640:	0019      	movs	r1, r3
 8000642:	f001 fb9e 	bl	8001d82 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(SMY_nB_GPIO_Port, SMY_nB_Pin, GPIO_PIN_RESET);
 8000646:	2380      	movs	r3, #128	@ 0x80
 8000648:	021b      	lsls	r3, r3, #8
 800064a:	4817      	ldr	r0, [pc, #92]	@ (80006a8 <main+0x90>)
 800064c:	2200      	movs	r2, #0
 800064e:	0019      	movs	r1, r3
 8000650:	f001 fb97 	bl	8001d82 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fe86 	bl	8001364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f830 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f7ff ff42 	bl	80004e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000660:	f7ff ff22 	bl	80004a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000664:	f000 fde0 	bl	8001228 <MX_USART2_UART_Init>

  MX_TIM3_Init();
 8000668:	f000 fc30 	bl	8000ecc <MX_TIM3_Init>
  MX_TIM2_Init();
 800066c:	f000 fbb2 	bl	8000dd4 <MX_TIM2_Init>
  MX_TIM21_Init();
 8000670:	f000 fcb4 	bl	8000fdc <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000674:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <main+0x94>)
 8000676:	0018      	movs	r0, r3
 8000678:	f002 fb76 	bl	8002d68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <main+0x98>)
 800067e:	0018      	movs	r0, r3
 8000680:	f002 fb72 	bl	8002d68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim21);
 8000684:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <main+0x9c>)
 8000686:	0018      	movs	r0, r3
 8000688:	f002 fb6e 	bl	8002d68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800068c:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <main+0x94>)
 800068e:	2100      	movs	r1, #0
 8000690:	0018      	movs	r0, r3
 8000692:	f002 fc03 	bl	8002e9c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TEMOINLED(100);
 8000696:	2064      	movs	r0, #100	@ 0x64
 8000698:	f000 f88c 	bl	80007b4 <TEMOINLED>
	  S10077_StartConversion(15000);
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <main+0xa0>)
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 f992 	bl	80009c8 <S10077_StartConversion>
  {
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	e7f6      	b.n	8000696 <main+0x7e>
 80006a8:	50000400 	.word	0x50000400
 80006ac:	200044e8 	.word	0x200044e8
 80006b0:	200044a8 	.word	0x200044a8
 80006b4:	20004528 	.word	0x20004528
 80006b8:	00003a98 	.word	0x00003a98

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b09f      	sub	sp, #124	@ 0x7c
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	2440      	movs	r4, #64	@ 0x40
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	0018      	movs	r0, r3
 80006c8:	2338      	movs	r3, #56	@ 0x38
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f004 feb3 	bl	8005438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d2:	232c      	movs	r3, #44	@ 0x2c
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	0018      	movs	r0, r3
 80006d8:	2314      	movs	r3, #20
 80006da:	001a      	movs	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	f004 feab 	bl	8005438 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	0018      	movs	r0, r3
 80006e6:	2328      	movs	r3, #40	@ 0x28
 80006e8:	001a      	movs	r2, r3
 80006ea:	2100      	movs	r1, #0
 80006ec:	f004 fea4 	bl	8005438 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <SystemClock_Config+0xc8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a24      	ldr	r2, [pc, #144]	@ (8000788 <SystemClock_Config+0xcc>)
 80006f6:	401a      	ands	r2, r3
 80006f8:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <SystemClock_Config+0xc8>)
 80006fa:	2180      	movs	r1, #128	@ 0x80
 80006fc:	0109      	lsls	r1, r1, #4
 80006fe:	430a      	orrs	r2, r1
 8000700:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000702:	0021      	movs	r1, r4
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2202      	movs	r2, #2
 8000708:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2201      	movs	r2, #1
 800070e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2210      	movs	r2, #16
 8000714:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	187b      	adds	r3, r7, r1
 800071e:	0018      	movs	r0, r3
 8000720:	f001 fb4c 	bl	8001dbc <HAL_RCC_OscConfig>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000728:	f000 f850 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	212c      	movs	r1, #44	@ 0x2c
 800072e:	187b      	adds	r3, r7, r1
 8000730:	220f      	movs	r2, #15
 8000732:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2201      	movs	r2, #1
 8000738:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2100      	movs	r1, #0
 8000750:	0018      	movs	r0, r3
 8000752:	f001 ff07 	bl	8002564 <HAL_RCC_ClockConfig>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800075a:	f000 f837 	bl	80007cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2202      	movs	r2, #2
 8000762:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	0018      	movs	r0, r3
 800076e:	f002 f91d 	bl	80029ac <HAL_RCCEx_PeriphCLKConfig>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000776:	f000 f829 	bl	80007cc <Error_Handler>
  }
}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b01f      	add	sp, #124	@ 0x7c
 8000780:	bd90      	pop	{r4, r7, pc}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	40007000 	.word	0x40007000
 8000788:	ffffe7ff 	.word	0xffffe7ff

0800078c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
/* Custom implementation of fputc here */
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000794:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <__io_putchar+0x20>)
 8000796:	1d39      	adds	r1, r7, #4
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <__io_putchar+0x24>)
 800079a:	2201      	movs	r2, #1
 800079c:	f003 fed4 	bl	8004548 <HAL_UART_Transmit>
return ch;
 80007a0:	687b      	ldr	r3, [r7, #4]
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	0000ffff 	.word	0x0000ffff
 80007b0:	200045b0 	.word	0x200045b0

080007b4 <TEMOINLED>:

void TEMOINLED(int x_blinktime){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	HAL_Delay(x_blinktime);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fe40 	bl	8001444 <HAL_Delay>

}
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b002      	add	sp, #8
 80007ca:	bd80      	pop	{r7, pc}

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	46c0      	nop			@ (mov r8, r8)
 80007d6:	e7fd      	b.n	80007d4 <Error_Handler+0x8>

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <HAL_MspInit+0x24>)
 80007de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <HAL_MspInit+0x24>)
 80007e2:	2101      	movs	r1, #1
 80007e4:	430a      	orrs	r2, r1
 80007e6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	4b04      	ldr	r3, [pc, #16]	@ (80007fc <HAL_MspInit+0x24>)
 80007ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007ec:	4b03      	ldr	r3, [pc, #12]	@ (80007fc <HAL_MspInit+0x24>)
 80007ee:	2180      	movs	r1, #128	@ 0x80
 80007f0:	0549      	lsls	r1, r1, #21
 80007f2:	430a      	orrs	r2, r1
 80007f4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	e7fd      	b.n	8000804 <NMI_Handler+0x4>

08000808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080c:	46c0      	nop			@ (mov r8, r8)
 800080e:	e7fd      	b.n	800080c <HardFault_Handler+0x4>

08000810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000814:	46c0      	nop			@ (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 fdf0 	bl	800140c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	46c0      	nop			@ (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8000838:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800083a:	0018      	movs	r0, r3
 800083c:	f001 f829 	bl	8001892 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */
   HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);
 8000840:	4b04      	ldr	r3, [pc, #16]	@ (8000854 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000842:	2104      	movs	r1, #4
 8000844:	0018      	movs	r0, r3
 8000846:	f002 fda1 	bl	800338c <HAL_TIM_IC_Stop_DMA>

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20004568 	.word	0x20004568
 8000854:	200044a8 	.word	0x200044a8

08000858 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 800085c:	4b03      	ldr	r3, [pc, #12]	@ (800086c <TIM21_IRQHandler+0x14>)
 800085e:	0018      	movs	r0, r3
 8000860:	f002 fe34 	bl	80034cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */


  /* USER CODE END TIM21_IRQn 1 */
}
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	20004528 	.word	0x20004528

08000870 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM21) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a06      	ldr	r2, [pc, #24]	@ (8000898 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d106      	bne.n	8000890 <HAL_TIM_PeriodElapsedCallback+0x20>

    	l_CycleCount++;
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	4b04      	ldr	r3, [pc, #16]	@ (800089c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800088a:	601a      	str	r2, [r3, #0]
    	S10077_Conversion();
 800088c:	f000 f808 	bl	80008a0 <S10077_Conversion>



    }

}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b002      	add	sp, #8
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40010800 	.word	0x40010800
 800089c:	2000448c 	.word	0x2000448c

080008a0 <S10077_Conversion>:
void S10077_Conversion(){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0


	switch(l_S10077_CONVERSIONSTEP){
 80008a4:	4b3d      	ldr	r3, [pc, #244]	@ (800099c <S10077_Conversion+0xfc>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b05      	cmp	r3, #5
 80008aa:	d868      	bhi.n	800097e <S10077_Conversion+0xde>
 80008ac:	009a      	lsls	r2, r3, #2
 80008ae:	4b3c      	ldr	r3, [pc, #240]	@ (80009a0 <S10077_Conversion+0x100>)
 80008b0:	18d3      	adds	r3, r2, r3
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	469f      	mov	pc, r3

	case IDLE :

		HAL_GPIO_WritePin(S10077_START_GPIO_Port, S10077_START_Pin,GPIO_PIN_SET );
 80008b6:	4b3b      	ldr	r3, [pc, #236]	@ (80009a4 <S10077_Conversion+0x104>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	2140      	movs	r1, #64	@ 0x40
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 fa60 	bl	8001d82 <HAL_GPIO_WritePin>
		break;
 80008c2:	e067      	b.n	8000994 <S10077_Conversion+0xf4>


	case START_LOWSTEP :

		//attend que la duree a l'etat bas se termine
		if((l_CycleCount - l_ReferenceTimings) > 1){
 80008c4:	4b38      	ldr	r3, [pc, #224]	@ (80009a8 <S10077_Conversion+0x108>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b38      	ldr	r3, [pc, #224]	@ (80009ac <S10077_Conversion+0x10c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d957      	bls.n	8000982 <S10077_Conversion+0xe2>

			l_S10077_CONVERSIONSTEP = START_HIGHSTEP;
 80008d2:	4b32      	ldr	r3, [pc, #200]	@ (800099c <S10077_Conversion+0xfc>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(S10077_START_GPIO_Port, S10077_START_Pin,GPIO_PIN_SET );
 80008d8:	4b32      	ldr	r3, [pc, #200]	@ (80009a4 <S10077_Conversion+0x104>)
 80008da:	2201      	movs	r2, #1
 80008dc:	2140      	movs	r1, #64	@ 0x40
 80008de:	0018      	movs	r0, r3
 80008e0:	f001 fa4f 	bl	8001d82 <HAL_GPIO_WritePin>

		}
		break;
 80008e4:	e04d      	b.n	8000982 <S10077_Conversion+0xe2>

	case START_HIGHSTEP :

		if((l_CycleCount - l_ReferenceTimings) > l_IntegrationTime  ){
 80008e6:	4b30      	ldr	r3, [pc, #192]	@ (80009a8 <S10077_Conversion+0x108>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b30      	ldr	r3, [pc, #192]	@ (80009ac <S10077_Conversion+0x10c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	1ad2      	subs	r2, r2, r3
 80008f0:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <S10077_Conversion+0x110>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d946      	bls.n	8000986 <S10077_Conversion+0xe6>


			//printf("Debut de la conversion  %i \r\n",(l_CycleCount - l_ReferenceTimings));

			HAL_GPIO_WritePin(S10077_START_GPIO_Port, S10077_START_Pin,GPIO_PIN_RESET );
 80008f8:	4b2a      	ldr	r3, [pc, #168]	@ (80009a4 <S10077_Conversion+0x104>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	2140      	movs	r1, #64	@ 0x40
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 fa3f 	bl	8001d82 <HAL_GPIO_WritePin>

			l_S10077_CONVERSIONSTEP = CONVERTING;
 8000904:	4b25      	ldr	r3, [pc, #148]	@ (800099c <S10077_Conversion+0xfc>)
 8000906:	2203      	movs	r2, #3
 8000908:	701a      	strb	r2, [r3, #0]


			}
		break;
 800090a:	e03c      	b.n	8000986 <S10077_Conversion+0xe6>
	case CONVERTING :
		//printf("HighstepTime %i \r\n",debug2-debug1);

		if(HAL_GPIO_ReadPin(S10077_ENDSCAN_GPIO_Port, S10077_ENDSCAN_Pin)){
 800090c:	4b29      	ldr	r3, [pc, #164]	@ (80009b4 <S10077_Conversion+0x114>)
 800090e:	2102      	movs	r1, #2
 8000910:	0018      	movs	r0, r3
 8000912:	f001 fa19 	bl	8001d48 <HAL_GPIO_ReadPin>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d037      	beq.n	800098a <S10077_Conversion+0xea>


			HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);
 800091a:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <S10077_Conversion+0x118>)
 800091c:	2104      	movs	r1, #4
 800091e:	0018      	movs	r0, r3
 8000920:	f002 fd34 	bl	800338c <HAL_TIM_IC_Stop_DMA>
			HAL_TIM_IC_DeInit(&htim2);
 8000924:	4b24      	ldr	r3, [pc, #144]	@ (80009b8 <S10077_Conversion+0x118>)
 8000926:	0018      	movs	r0, r3
 8000928:	f002 fb8a 	bl	8003040 <HAL_TIM_IC_DeInit>


			l_ReferenceTimings = l_CycleCount;
 800092c:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <S10077_Conversion+0x108>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <S10077_Conversion+0x10c>)
 8000932:	601a      	str	r2, [r3, #0]
			l_SendingStep = 0;
 8000934:	4b21      	ldr	r3, [pc, #132]	@ (80009bc <S10077_Conversion+0x11c>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
			iBcl2 = 0;
 800093a:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <S10077_Conversion+0x120>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
			FlagEndExtraction = false;
 8000940:	4b20      	ldr	r3, [pc, #128]	@ (80009c4 <S10077_Conversion+0x124>)
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
			l_S10077_CONVERSIONSTEP = EXTRACTING;
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <S10077_Conversion+0xfc>)
 8000948:	2204      	movs	r2, #4
 800094a:	701a      	strb	r2, [r3, #0]
			ExtractAmplitude();
 800094c:	f000 f8fe 	bl	8000b4c <ExtractAmplitude>

		//printf("Fin de la conversion : %i \r\n",(l_CycleCount - l_ReferenceTimings));

		}

		break;
 8000950:	e01b      	b.n	800098a <S10077_Conversion+0xea>
	case EXTRACTING :

		if (FlagEndExtraction){
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <S10077_Conversion+0x124>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d019      	beq.n	800098e <S10077_Conversion+0xee>
		//	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
			l_S10077_CONVERSIONSTEP = SENDING;
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <S10077_Conversion+0xfc>)
 800095c:	2205      	movs	r2, #5
 800095e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(S10077_START_GPIO_Port, S10077_START_Pin,GPIO_PIN_SET );
 8000960:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <S10077_Conversion+0x104>)
 8000962:	2201      	movs	r2, #1
 8000964:	2140      	movs	r1, #64	@ 0x40
 8000966:	0018      	movs	r0, r3
 8000968:	f001 fa0b 	bl	8001d82 <HAL_GPIO_WritePin>

		}
		break;
 800096c:	e00f      	b.n	800098e <S10077_Conversion+0xee>
	case SENDING :

			if(FlagEndExtraction == true){
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <S10077_Conversion+0x124>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d00d      	beq.n	8000992 <S10077_Conversion+0xf2>




			l_S10077_CONVERSIONSTEP = IDLE;
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <S10077_Conversion+0xfc>)
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]

		//	printf("Back to waiting \r\n");

		}

		break;
 800097c:	e009      	b.n	8000992 <S10077_Conversion+0xf2>
	default :


		break;
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	e008      	b.n	8000994 <S10077_Conversion+0xf4>
		break;
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	e006      	b.n	8000994 <S10077_Conversion+0xf4>
		break;
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	e004      	b.n	8000994 <S10077_Conversion+0xf4>
		break;
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	e002      	b.n	8000994 <S10077_Conversion+0xf4>
		break;
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	e000      	b.n	8000994 <S10077_Conversion+0xf4>
		break;
 8000992:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	20004490 	.word	0x20004490
 80009a0:	08005a24 	.word	0x08005a24
 80009a4:	50000400 	.word	0x50000400
 80009a8:	2000448c 	.word	0x2000448c
 80009ac:	20004494 	.word	0x20004494
 80009b0:	20004498 	.word	0x20004498
 80009b4:	50000800 	.word	0x50000800
 80009b8:	200044a8 	.word	0x200044a8
 80009bc:	2000449c 	.word	0x2000449c
 80009c0:	200044a0 	.word	0x200044a0
 80009c4:	20000484 	.word	0x20000484

080009c8 <S10077_StartConversion>:

void S10077_StartConversion(uint32_t x_Intergrationtime){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

	//printf("heyehey3 \r\n");
	if(l_S10077_CONVERSIONSTEP == IDLE){
 80009d0:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <S10077_StartConversion+0xa0>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d143      	bne.n	8000a60 <S10077_StartConversion+0x98>
		//printf("heyehey2 \r\n");
		if(x_Intergrationtime > 12300 && x_Intergrationtime < 120000){
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a24      	ldr	r2, [pc, #144]	@ (8000a6c <S10077_StartConversion+0xa4>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d93b      	bls.n	8000a58 <S10077_StartConversion+0x90>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a23      	ldr	r2, [pc, #140]	@ (8000a70 <S10077_StartConversion+0xa8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d837      	bhi.n	8000a58 <S10077_StartConversion+0x90>
			//printf("heyehey1 \r\n");

			for (int i = 0; i < 1024; i++) {
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	e007      	b.n	80009fe <S10077_StartConversion+0x36>
			l_amplitudeSpecter[i]  =0 ;
 80009ee:	4a21      	ldr	r2, [pc, #132]	@ (8000a74 <S10077_StartConversion+0xac>)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	18d3      	adds	r3, r2, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 1024; i++) {
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3301      	adds	r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	2380      	movs	r3, #128	@ 0x80
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbf2      	blt.n	80009ee <S10077_StartConversion+0x26>
			}
			// printf("heyehey0 \r\n");
			//code debut de conversion


			l_nObservedPixel = 0;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <S10077_StartConversion+0xb0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	801a      	strh	r2, [r3, #0]
			l_nObservedBit = 0;
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <S10077_StartConversion+0xb4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
			l_ReferenceTimings = l_CycleCount;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <S10077_StartConversion+0xb8>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <S10077_StartConversion+0xbc>)
 8000a1a:	601a      	str	r2, [r3, #0]
			l_IntegrationTime = (x_Intergrationtime/50);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2132      	movs	r1, #50	@ 0x32
 8000a20:	0018      	movs	r0, r3
 8000a22:	f7ff fb71 	bl	8000108 <__udivsi3>
 8000a26:	0003      	movs	r3, r0
 8000a28:	001a      	movs	r2, r3
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <S10077_StartConversion+0xc0>)
 8000a2c:	601a      	str	r2, [r3, #0]
			HAL_TIM_IC_Init(&htim2);
 8000a2e:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <S10077_StartConversion+0xc4>)
 8000a30:	0018      	movs	r0, r3
 8000a32:	f002 fac5 	bl	8002fc0 <HAL_TIM_IC_Init>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2,(uint32_t *) l_BufferSpecter, BUFFERSIZE);
 8000a36:	2380      	movs	r3, #128	@ 0x80
 8000a38:	019b      	lsls	r3, r3, #6
 8000a3a:	4a15      	ldr	r2, [pc, #84]	@ (8000a90 <S10077_StartConversion+0xc8>)
 8000a3c:	4813      	ldr	r0, [pc, #76]	@ (8000a8c <S10077_StartConversion+0xc4>)
 8000a3e:	2104      	movs	r1, #4
 8000a40:	f002 fb4c 	bl	80030dc <HAL_TIM_IC_Start_DMA>
			l_S10077_CONVERSIONSTEP = START_LOWSTEP;
 8000a44:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <S10077_StartConversion+0xa0>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]
			// Démarrer le timer en mode Input Capture avec DMA


			HAL_GPIO_WritePin(S10077_START_GPIO_Port, S10077_START_Pin,GPIO_PIN_RESET );
 8000a4a:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <S10077_StartConversion+0xcc>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2140      	movs	r1, #64	@ 0x40
 8000a50:	0018      	movs	r0, r3
 8000a52:	f001 f996 	bl	8001d82 <HAL_GPIO_WritePin>
	else{

	//printf("erreur integration deja en cours \r\n");

	}
}
 8000a56:	e003      	b.n	8000a60 <S10077_StartConversion+0x98>
	printf("erreur : temps d'integration trop cours \r\n");
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <S10077_StartConversion+0xd0>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f004 fbf6 	bl	800524c <puts>
}
 8000a60:	46c0      	nop			@ (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b004      	add	sp, #16
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20004490 	.word	0x20004490
 8000a6c:	0000300c 	.word	0x0000300c
 8000a70:	0001d4bf 	.word	0x0001d4bf
 8000a74:	20000084 	.word	0x20000084
 8000a78:	20004488 	.word	0x20004488
 8000a7c:	2000448a 	.word	0x2000448a
 8000a80:	2000448c 	.word	0x2000448c
 8000a84:	20004494 	.word	0x20004494
 8000a88:	20004498 	.word	0x20004498
 8000a8c:	200044a8 	.word	0x200044a8
 8000a90:	20000488 	.word	0x20000488
 8000a94:	50000400 	.word	0x50000400
 8000a98:	080059f8 	.word	0x080059f8

08000a9c <SendPixelData>:


void SendPixelData(uint16_t pixelNumber, uint16_t amplitude)
{
 8000a9c:	b5b0      	push	{r4, r5, r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	1dbb      	adds	r3, r7, #6
 8000aa6:	801a      	strh	r2, [r3, #0]
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	1c0a      	adds	r2, r1, #0
 8000aac:	801a      	strh	r2, [r3, #0]
    uint8_t data[3];


    if (pixelNumber >= 1024) pixelNumber = 1024;  // Limiter à la résolution max
 8000aae:	1dbb      	adds	r3, r7, #6
 8000ab0:	881a      	ldrh	r2, [r3, #0]
 8000ab2:	2380      	movs	r3, #128	@ 0x80
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d303      	bcc.n	8000ac2 <SendPixelData+0x26>
 8000aba:	1dbb      	adds	r3, r7, #6
 8000abc:	2280      	movs	r2, #128	@ 0x80
 8000abe:	00d2      	lsls	r2, r2, #3
 8000ac0:	801a      	strh	r2, [r3, #0]
    if (amplitude >= 255) amplitude = 255;        // Limiter l'amplitude max
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ac8:	d902      	bls.n	8000ad0 <SendPixelData+0x34>
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	22ff      	movs	r2, #255	@ 0xff
 8000ace:	801a      	strh	r2, [r3, #0]

    // Fractionner le numéro du pixel (16 bits) en deux octets
    data[0] = (uint8_t)((pixelNumber >> 8) & 0xFF);  // Octet de poids fort
 8000ad0:	1dbb      	adds	r3, r7, #6
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	210c      	movs	r1, #12
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	701a      	strb	r2, [r3, #0]
    data[1] = (uint8_t)(pixelNumber & 0xFF);         // Octet de poids faible
 8000ae0:	1dbb      	adds	r3, r7, #6
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	705a      	strb	r2, [r3, #1]

    // Ajouter l'amplitude (8 bits)
    data[2] = amplitude;
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	709a      	strb	r2, [r3, #2]

    // Envoyer les 3 octets sur l'UART
    data[0] |= 1 << 5;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2220      	movs	r2, #32
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, data, 3, HAL_MAX_DELAY);
 8000b02:	250f      	movs	r5, #15
 8000b04:	197c      	adds	r4, r7, r5
 8000b06:	2301      	movs	r3, #1
 8000b08:	425b      	negs	r3, r3
 8000b0a:	1879      	adds	r1, r7, r1
 8000b0c:	480e      	ldr	r0, [pc, #56]	@ (8000b48 <SendPixelData+0xac>)
 8000b0e:	2203      	movs	r2, #3
 8000b10:	f003 fd1a 	bl	8004548 <HAL_UART_Transmit>
 8000b14:	0003      	movs	r3, r0
 8000b16:	7023      	strb	r3, [r4, #0]



       if (status ==  HAL_OK){
 8000b18:	197b      	adds	r3, r7, r5
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d107      	bne.n	8000b30 <SendPixelData+0x94>

       	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8000b20:	23a0      	movs	r3, #160	@ 0xa0
 8000b22:	05db      	lsls	r3, r3, #23
 8000b24:	2201      	movs	r2, #1
 8000b26:	2120      	movs	r1, #32
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f001 f92a 	bl	8001d82 <HAL_GPIO_WritePin>
       }
       else{
       	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
       }

}
 8000b2e:	e006      	b.n	8000b3e <SendPixelData+0xa2>
       	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8000b30:	23a0      	movs	r3, #160	@ 0xa0
 8000b32:	05db      	lsls	r3, r3, #23
 8000b34:	2200      	movs	r2, #0
 8000b36:	2120      	movs	r1, #32
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f001 f922 	bl	8001d82 <HAL_GPIO_WritePin>
}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b004      	add	sp, #16
 8000b44:	bdb0      	pop	{r4, r5, r7, pc}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	200045b0 	.word	0x200045b0

08000b4c <ExtractAmplitude>:

void ExtractAmplitude (void){
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b089      	sub	sp, #36	@ 0x24
 8000b50:	af00      	add	r7, sp, #0
	//Debut
	bool OctetRead[8] = {false};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	0018      	movs	r0, r3
 8000b56:	2308      	movs	r3, #8
 8000b58:	001a      	movs	r2, r3
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f004 fc6c 	bl	8005438 <memset>
	uint16_t PixelRead = 0;
 8000b60:	231e      	movs	r3, #30
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	2200      	movs	r2, #0
 8000b66:	801a      	strh	r2, [r3, #0]

	bool TrammeState = false;
 8000b68:	231d      	movs	r3, #29
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]

	 uint16_t BufferReadOrder = 0;
 8000b70:	231a      	movs	r3, #26
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	2200      	movs	r2, #0
 8000b76:	801a      	strh	r2, [r3, #0]



	while(PixelRead < 1024){
 8000b78:	e062      	b.n	8000c40 <ExtractAmplitude+0xf4>



		for (int BitRead = 0;BitRead <12; BitRead++){
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	e035      	b.n	8000bec <ExtractAmplitude+0xa0>


			if (l_BufferSpecter[BufferReadOrder] == (38 + PixelRead * 12 + BitRead )){ //45 : temps entre le premier front et l'activation du DMA.
 8000b80:	201a      	movs	r0, #26
 8000b82:	183b      	adds	r3, r7, r0
 8000b84:	881a      	ldrh	r2, [r3, #0]
 8000b86:	4b3f      	ldr	r3, [pc, #252]	@ (8000c84 <ExtractAmplitude+0x138>)
 8000b88:	0052      	lsls	r2, r2, #1
 8000b8a:	5ad3      	ldrh	r3, [r2, r3]
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	231e      	movs	r3, #30
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	881a      	ldrh	r2, [r3, #0]
 8000b94:	0013      	movs	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	189b      	adds	r3, r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	3326      	adds	r3, #38	@ 0x26
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	18d3      	adds	r3, r2, r3
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d114      	bne.n	8000bd2 <ExtractAmplitude+0x86>
				TrammeState = !TrammeState;
 8000ba8:	211d      	movs	r1, #29
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	1e5a      	subs	r2, r3, #1
 8000bb0:	4193      	sbcs	r3, r2
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4053      	eors	r3, r2
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	001a      	movs	r2, r3
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	781a      	ldrb	r2, [r3, #0]
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	400a      	ands	r2, r1
 8000bc6:	701a      	strb	r2, [r3, #0]

				BufferReadOrder++;
 8000bc8:	183b      	adds	r3, r7, r0
 8000bca:	881a      	ldrh	r2, [r3, #0]
 8000bcc:	183b      	adds	r3, r7, r0
 8000bce:	3201      	adds	r2, #1
 8000bd0:	801a      	strh	r2, [r3, #0]

				}
		if( BitRead < 8 ){
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	2b07      	cmp	r3, #7
 8000bd6:	dc06      	bgt.n	8000be6 <ExtractAmplitude+0x9a>
			OctetRead[BitRead] = TrammeState;
 8000bd8:	1d3a      	adds	r2, r7, #4
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	18d3      	adds	r3, r2, r3
 8000bde:	221d      	movs	r2, #29
 8000be0:	18ba      	adds	r2, r7, r2
 8000be2:	7812      	ldrb	r2, [r2, #0]
 8000be4:	701a      	strb	r2, [r3, #0]
		for (int BitRead = 0;BitRead <12; BitRead++){
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	2b0b      	cmp	r3, #11
 8000bf0:	ddc6      	ble.n	8000b80 <ExtractAmplitude+0x34>
			//printf("%i      %i \r\n",l_BufferSpecter[BufferReadOrder],(1 + PixelRead*12 + BitRead) );
			}
		}


		for (int i = 0;i <8; i++){
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	e01a      	b.n	8000c2e <ExtractAmplitude+0xe2>
		l_amplitudeSpecter[PixelRead] |= OctetRead[i] << (7-i);
 8000bf8:	241e      	movs	r4, #30
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	4a22      	ldr	r2, [pc, #136]	@ (8000c88 <ExtractAmplitude+0x13c>)
 8000c00:	5cd3      	ldrb	r3, [r2, r3]
 8000c02:	b25a      	sxtb	r2, r3
 8000c04:	1d39      	adds	r1, r7, #4
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	18cb      	adds	r3, r1, r3
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	2107      	movs	r1, #7
 8000c12:	1acb      	subs	r3, r1, r3
 8000c14:	4098      	lsls	r0, r3
 8000c16:	0003      	movs	r3, r0
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b25a      	sxtb	r2, r3
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	b2d1      	uxtb	r1, r2
 8000c24:	4a18      	ldr	r2, [pc, #96]	@ (8000c88 <ExtractAmplitude+0x13c>)
 8000c26:	54d1      	strb	r1, [r2, r3]
		for (int i = 0;i <8; i++){
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	2b07      	cmp	r3, #7
 8000c32:	dde1      	ble.n	8000bf8 <ExtractAmplitude+0xac>
		}
		PixelRead ++;
 8000c34:	211e      	movs	r1, #30
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	881a      	ldrh	r2, [r3, #0]
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	3201      	adds	r2, #1
 8000c3e:	801a      	strh	r2, [r3, #0]
	while(PixelRead < 1024){
 8000c40:	231e      	movs	r3, #30
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	881a      	ldrh	r2, [r3, #0]
 8000c46:	2380      	movs	r3, #128	@ 0x80
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d395      	bcc.n	8000b7a <ExtractAmplitude+0x2e>

}


//FIN
	for (int i = 0;i <=600; i++){
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	e00b      	b.n	8000c6c <ExtractAmplitude+0x120>
		if(i % 1== 0){
//  printf("Index %i Timing %i \r\n",i, 	l_BufferSpecter[i]);


			SendPixelData(i, 	l_amplitudeSpecter[i]);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	b298      	uxth	r0, r3
 8000c58:	4a0b      	ldr	r2, [pc, #44]	@ (8000c88 <ExtractAmplitude+0x13c>)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	18d3      	adds	r3, r2, r3
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	0019      	movs	r1, r3
 8000c62:	f7ff ff1b 	bl	8000a9c <SendPixelData>
	for (int i = 0;i <=600; i++){
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	2396      	movs	r3, #150	@ 0x96
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	429a      	cmp	r2, r3
 8000c74:	ddee      	ble.n	8000c54 <ExtractAmplitude+0x108>
		}

	}


	FlagEndExtraction = true;
 8000c76:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <ExtractAmplitude+0x140>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]

}
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b009      	add	sp, #36	@ 0x24
 8000c82:	bd90      	pop	{r4, r7, pc}
 8000c84:	20000488 	.word	0x20000488
 8000c88:	20000084 	.word	0x20000084
 8000c8c:	20000484 	.word	0x20000484

08000c90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e00a      	b.n	8000cb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ca2:	e000      	b.n	8000ca6 <_read+0x16>
 8000ca4:	bf00      	nop
 8000ca6:	0001      	movs	r1, r0
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60ba      	str	r2, [r7, #8]
 8000cae:	b2ca      	uxtb	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbf0      	blt.n	8000ca2 <_read+0x12>
  }

  return len;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b006      	add	sp, #24
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	e009      	b.n	8000cf0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	60ba      	str	r2, [r7, #8]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fd51 	bl	800078c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf1      	blt.n	8000cdc <_write+0x12>
  }
  return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b006      	add	sp, #24
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_close>:

int _close(int file)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	425b      	negs	r3, r3
}
 8000d0e:	0018      	movs	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2280      	movs	r2, #128	@ 0x80
 8000d24:	0192      	lsls	r2, r2, #6
 8000d26:	605a      	str	r2, [r3, #4]
  return 0;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <_isatty>:

int _isatty(int file)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b002      	add	sp, #8
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	0018      	movs	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b004      	add	sp, #16
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d64:	4a14      	ldr	r2, [pc, #80]	@ (8000db8 <_sbrk+0x5c>)
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <_sbrk+0x60>)
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d70:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <_sbrk+0x64>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	@ (8000dc4 <_sbrk+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7e:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	18d3      	adds	r3, r2, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d207      	bcs.n	8000d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d8c:	f004 fbaa 	bl	80054e4 <__errno>
 8000d90:	0003      	movs	r3, r0
 8000d92:	220c      	movs	r2, #12
 8000d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	425b      	negs	r3, r3
 8000d9a:	e009      	b.n	8000db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da2:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	18d2      	adds	r2, r2, r3
 8000daa:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <_sbrk+0x64>)
 8000dac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b006      	add	sp, #24
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20005000 	.word	0x20005000
 8000dbc:	00000400 	.word	0x00000400
 8000dc0:	200044a4 	.word	0x200044a4
 8000dc4:	20004788 	.word	0x20004788

08000dc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	46c0      	nop			@ (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim21;
DMA_HandleTypeDef hdma_tim2_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	@ 0x28
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dda:	2318      	movs	r3, #24
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	0018      	movs	r0, r3
 8000de0:	2310      	movs	r3, #16
 8000de2:	001a      	movs	r2, r3
 8000de4:	2100      	movs	r1, #0
 8000de6:	f004 fb27 	bl	8005438 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dea:	2310      	movs	r3, #16
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	0018      	movs	r0, r3
 8000df0:	2308      	movs	r3, #8
 8000df2:	001a      	movs	r2, r3
 8000df4:	2100      	movs	r1, #0
 8000df6:	f004 fb1f 	bl	8005438 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	2310      	movs	r3, #16
 8000e00:	001a      	movs	r2, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	f004 fb18 	bl	8005438 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e08:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec4 <MX_TIM2_Init+0xf0>)
 8000e0a:	2280      	movs	r2, #128	@ 0x80
 8000e0c:	05d2      	lsls	r2, r2, #23
 8000e0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000e10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <MX_TIM2_Init+0xf0>)
 8000e12:	220f      	movs	r2, #15
 8000e14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e16:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec4 <MX_TIM2_Init+0xf0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 14000;
 8000e1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ec4 <MX_TIM2_Init+0xf0>)
 8000e1e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ec8 <MX_TIM2_Init+0xf4>)
 8000e20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b28      	ldr	r3, [pc, #160]	@ (8000ec4 <MX_TIM2_Init+0xf0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b26      	ldr	r3, [pc, #152]	@ (8000ec4 <MX_TIM2_Init+0xf0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e2e:	4b25      	ldr	r3, [pc, #148]	@ (8000ec4 <MX_TIM2_Init+0xf0>)
 8000e30:	0018      	movs	r0, r3
 8000e32:	f001 ff59 	bl	8002ce8 <HAL_TIM_Base_Init>
 8000e36:	1e03      	subs	r3, r0, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e3a:	f7ff fcc7 	bl	80007cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3e:	2118      	movs	r1, #24
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2280      	movs	r2, #128	@ 0x80
 8000e44:	0152      	lsls	r2, r2, #5
 8000e46:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e48:	187a      	adds	r2, r7, r1
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <MX_TIM2_Init+0xf0>)
 8000e4c:	0011      	movs	r1, r2
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f002 fd8e 	bl	8003970 <HAL_TIM_ConfigClockSource>
 8000e54:	1e03      	subs	r3, r0, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000e58:	f7ff fcb8 	bl	80007cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <MX_TIM2_Init+0xf0>)
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f002 f8ae 	bl	8002fc0 <HAL_TIM_IC_Init>
 8000e64:	1e03      	subs	r3, r0, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e68:	f7ff fcb0 	bl	80007cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e7a:	187a      	adds	r2, r7, r1
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <MX_TIM2_Init+0xf0>)
 8000e7e:	0011      	movs	r1, r2
 8000e80:	0018      	movs	r0, r3
 8000e82:	f003 fa91 	bl	80043a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000e8a:	f7ff fc9f 	bl	80007cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000e8e:	003b      	movs	r3, r7
 8000e90:	220a      	movs	r2, #10
 8000e92:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e94:	003b      	movs	r3, r7
 8000e96:	2201      	movs	r2, #1
 8000e98:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e9a:	003b      	movs	r3, r7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000ea0:	003b      	movs	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ea6:	0039      	movs	r1, r7
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <MX_TIM2_Init+0xf0>)
 8000eaa:	2204      	movs	r2, #4
 8000eac:	0018      	movs	r0, r3
 8000eae:	f002 fbf5 	bl	800369c <HAL_TIM_IC_ConfigChannel>
 8000eb2:	1e03      	subs	r3, r0, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000eb6:	f7ff fc89 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b00a      	add	sp, #40	@ 0x28
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	200044a8 	.word	0x200044a8
 8000ec8:	000036b0 	.word	0x000036b0

08000ecc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	@ 0x28
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	2318      	movs	r3, #24
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	2310      	movs	r3, #16
 8000eda:	001a      	movs	r2, r3
 8000edc:	2100      	movs	r1, #0
 8000ede:	f004 faab 	bl	8005438 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee2:	2310      	movs	r3, #16
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	2308      	movs	r3, #8
 8000eea:	001a      	movs	r2, r3
 8000eec:	2100      	movs	r1, #0
 8000eee:	f004 faa3 	bl	8005438 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef2:	003b      	movs	r3, r7
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	001a      	movs	r2, r3
 8000efa:	2100      	movs	r1, #0
 8000efc:	f004 fa9c 	bl	8005438 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f00:	4b34      	ldr	r3, [pc, #208]	@ (8000fd4 <MX_TIM3_Init+0x108>)
 8000f02:	4a35      	ldr	r2, [pc, #212]	@ (8000fd8 <MX_TIM3_Init+0x10c>)
 8000f04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8000f06:	4b33      	ldr	r3, [pc, #204]	@ (8000fd4 <MX_TIM3_Init+0x108>)
 8000f08:	2203      	movs	r2, #3
 8000f0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0c:	4b31      	ldr	r3, [pc, #196]	@ (8000fd4 <MX_TIM3_Init+0x108>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3;
 8000f12:	4b30      	ldr	r3, [pc, #192]	@ (8000fd4 <MX_TIM3_Init+0x108>)
 8000f14:	2203      	movs	r2, #3
 8000f16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f18:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd4 <MX_TIM3_Init+0x108>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <MX_TIM3_Init+0x108>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f24:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd4 <MX_TIM3_Init+0x108>)
 8000f26:	0018      	movs	r0, r3
 8000f28:	f001 fede 	bl	8002ce8 <HAL_TIM_Base_Init>
 8000f2c:	1e03      	subs	r3, r0, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f30:	f7ff fc4c 	bl	80007cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f34:	2118      	movs	r1, #24
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2280      	movs	r2, #128	@ 0x80
 8000f3a:	0152      	lsls	r2, r2, #5
 8000f3c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f3e:	187a      	adds	r2, r7, r1
 8000f40:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <MX_TIM3_Init+0x108>)
 8000f42:	0011      	movs	r1, r2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f002 fd13 	bl	8003970 <HAL_TIM_ConfigClockSource>
 8000f4a:	1e03      	subs	r3, r0, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000f4e:	f7ff fc3d 	bl	80007cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f52:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <MX_TIM3_Init+0x108>)
 8000f54:	0018      	movs	r0, r3
 8000f56:	f001 ff59 	bl	8002e0c <HAL_TIM_PWM_Init>
 8000f5a:	1e03      	subs	r3, r0, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000f5e:	f7ff fc35 	bl	80007cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f62:	2110      	movs	r1, #16
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f70:	187a      	adds	r2, r7, r1
 8000f72:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <MX_TIM3_Init+0x108>)
 8000f74:	0011      	movs	r1, r2
 8000f76:	0018      	movs	r0, r3
 8000f78:	f003 fa16 	bl	80043a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f7c:	1e03      	subs	r3, r0, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000f80:	f7ff fc24 	bl	80007cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f84:	003b      	movs	r3, r7
 8000f86:	2260      	movs	r2, #96	@ 0x60
 8000f88:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2;
 8000f8a:	003b      	movs	r3, r7
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f90:	003b      	movs	r3, r7
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f96:	003b      	movs	r3, r7
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f9c:	0039      	movs	r1, r7
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <MX_TIM3_Init+0x108>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f002 fc1e 	bl	80037e4 <HAL_TIM_PWM_ConfigChannel>
 8000fa8:	1e03      	subs	r3, r0, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000fac:	f7ff fc0e 	bl	80007cc <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <MX_TIM3_Init+0x108>)
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f003 fa55 	bl	8004464 <HAL_TIMEx_RemapConfig>
 8000fba:	1e03      	subs	r3, r0, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8000fbe:	f7ff fc05 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fc2:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <MX_TIM3_Init+0x108>)
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f000 f8f3 	bl	80011b0 <HAL_TIM_MspPostInit>

}
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b00a      	add	sp, #40	@ 0x28
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	200044e8 	.word	0x200044e8
 8000fd8:	40000400 	.word	0x40000400

08000fdc <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	2310      	movs	r3, #16
 8000fea:	001a      	movs	r2, r3
 8000fec:	2100      	movs	r1, #0
 8000fee:	f004 fa23 	bl	8005438 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff2:	003b      	movs	r3, r7
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	001a      	movs	r2, r3
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	f004 fa1c 	bl	8005438 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8001000:	4b1e      	ldr	r3, [pc, #120]	@ (800107c <MX_TIM21_Init+0xa0>)
 8001002:	4a1f      	ldr	r2, [pc, #124]	@ (8001080 <MX_TIM21_Init+0xa4>)
 8001004:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 19;
 8001006:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <MX_TIM21_Init+0xa0>)
 8001008:	2213      	movs	r2, #19
 800100a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100c:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <MX_TIM21_Init+0xa0>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 39;
 8001012:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <MX_TIM21_Init+0xa0>)
 8001014:	2227      	movs	r2, #39	@ 0x27
 8001016:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001018:	4b18      	ldr	r3, [pc, #96]	@ (800107c <MX_TIM21_Init+0xa0>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <MX_TIM21_Init+0xa0>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001024:	4b15      	ldr	r3, [pc, #84]	@ (800107c <MX_TIM21_Init+0xa0>)
 8001026:	0018      	movs	r0, r3
 8001028:	f001 fe5e 	bl	8002ce8 <HAL_TIM_Base_Init>
 800102c:	1e03      	subs	r3, r0, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8001030:	f7ff fbcc 	bl	80007cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001034:	2108      	movs	r1, #8
 8001036:	187b      	adds	r3, r7, r1
 8001038:	2280      	movs	r2, #128	@ 0x80
 800103a:	0152      	lsls	r2, r2, #5
 800103c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800103e:	187a      	adds	r2, r7, r1
 8001040:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <MX_TIM21_Init+0xa0>)
 8001042:	0011      	movs	r1, r2
 8001044:	0018      	movs	r0, r3
 8001046:	f002 fc93 	bl	8003970 <HAL_TIM_ConfigClockSource>
 800104a:	1e03      	subs	r3, r0, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 800104e:	f7ff fbbd 	bl	80007cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001052:	003b      	movs	r3, r7
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001058:	003b      	movs	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 800105e:	003a      	movs	r2, r7
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <MX_TIM21_Init+0xa0>)
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f003 f99f 	bl	80043a8 <HAL_TIMEx_MasterConfigSynchronization>
 800106a:	1e03      	subs	r3, r0, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 800106e:	f7ff fbad 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b006      	add	sp, #24
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	20004528 	.word	0x20004528
 8001080:	40010800 	.word	0x40010800

08001084 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b089      	sub	sp, #36	@ 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	240c      	movs	r4, #12
 800108e:	193b      	adds	r3, r7, r4
 8001090:	0018      	movs	r0, r3
 8001092:	2314      	movs	r3, #20
 8001094:	001a      	movs	r2, r3
 8001096:	2100      	movs	r1, #0
 8001098:	f004 f9ce 	bl	8005438 <memset>
  if(tim_baseHandle->Instance==TIM2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2380      	movs	r3, #128	@ 0x80
 80010a2:	05db      	lsls	r3, r3, #23
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d155      	bne.n	8001154 <HAL_TIM_Base_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a8:	4b3c      	ldr	r3, [pc, #240]	@ (800119c <HAL_TIM_Base_MspInit+0x118>)
 80010aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010ac:	4b3b      	ldr	r3, [pc, #236]	@ (800119c <HAL_TIM_Base_MspInit+0x118>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	430a      	orrs	r2, r1
 80010b2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b39      	ldr	r3, [pc, #228]	@ (800119c <HAL_TIM_Base_MspInit+0x118>)
 80010b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010b8:	4b38      	ldr	r3, [pc, #224]	@ (800119c <HAL_TIM_Base_MspInit+0x118>)
 80010ba:	2101      	movs	r1, #1
 80010bc:	430a      	orrs	r2, r1
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010c0:	4b36      	ldr	r3, [pc, #216]	@ (800119c <HAL_TIM_Base_MspInit+0x118>)
 80010c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c4:	2201      	movs	r2, #1
 80010c6:	4013      	ands	r3, r2
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = S10077_DO_Pin;
 80010cc:	0021      	movs	r1, r4
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2202      	movs	r2, #2
 80010d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	2202      	movs	r2, #2
 80010d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80010e6:	187b      	adds	r3, r7, r1
 80010e8:	2202      	movs	r2, #2
 80010ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(S10077_DO_GPIO_Port, &GPIO_InitStruct);
 80010ec:	187a      	adds	r2, r7, r1
 80010ee:	23a0      	movs	r3, #160	@ 0xa0
 80010f0:	05db      	lsls	r3, r3, #23
 80010f2:	0011      	movs	r1, r2
 80010f4:	0018      	movs	r0, r3
 80010f6:	f000 fca9 	bl	8001a4c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel3;
 80010fa:	4b29      	ldr	r3, [pc, #164]	@ (80011a0 <HAL_TIM_Base_MspInit+0x11c>)
 80010fc:	4a29      	ldr	r2, [pc, #164]	@ (80011a4 <HAL_TIM_Base_MspInit+0x120>)
 80010fe:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_8;
 8001100:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <HAL_TIM_Base_MspInit+0x11c>)
 8001102:	2208      	movs	r2, #8
 8001104:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001106:	4b26      	ldr	r3, [pc, #152]	@ (80011a0 <HAL_TIM_Base_MspInit+0x11c>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800110c:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <HAL_TIM_Base_MspInit+0x11c>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001112:	4b23      	ldr	r3, [pc, #140]	@ (80011a0 <HAL_TIM_Base_MspInit+0x11c>)
 8001114:	2280      	movs	r2, #128	@ 0x80
 8001116:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001118:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <HAL_TIM_Base_MspInit+0x11c>)
 800111a:	2280      	movs	r2, #128	@ 0x80
 800111c:	0052      	lsls	r2, r2, #1
 800111e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001120:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <HAL_TIM_Base_MspInit+0x11c>)
 8001122:	2280      	movs	r2, #128	@ 0x80
 8001124:	00d2      	lsls	r2, r2, #3
 8001126:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 8001128:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <HAL_TIM_Base_MspInit+0x11c>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800112e:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <HAL_TIM_Base_MspInit+0x11c>)
 8001130:	22c0      	movs	r2, #192	@ 0xc0
 8001132:	0192      	lsls	r2, r2, #6
 8001134:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8001136:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <HAL_TIM_Base_MspInit+0x11c>)
 8001138:	0018      	movs	r0, r3
 800113a:	f000 fa85 	bl	8001648 <HAL_DMA_Init>
 800113e:	1e03      	subs	r3, r0, #0
 8001140:	d001      	beq.n	8001146 <HAL_TIM_Base_MspInit+0xc2>
    {
      Error_Handler();
 8001142:	f7ff fb43 	bl	80007cc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a15      	ldr	r2, [pc, #84]	@ (80011a0 <HAL_TIM_Base_MspInit+0x11c>)
 800114a:	625a      	str	r2, [r3, #36]	@ 0x24
 800114c:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <HAL_TIM_Base_MspInit+0x11c>)
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8001152:	e01e      	b.n	8001192 <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM3)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a13      	ldr	r2, [pc, #76]	@ (80011a8 <HAL_TIM_Base_MspInit+0x124>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d106      	bne.n	800116c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800115e:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <HAL_TIM_Base_MspInit+0x118>)
 8001160:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <HAL_TIM_Base_MspInit+0x118>)
 8001164:	2102      	movs	r1, #2
 8001166:	430a      	orrs	r2, r1
 8001168:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800116a:	e012      	b.n	8001192 <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM21)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0e      	ldr	r2, [pc, #56]	@ (80011ac <HAL_TIM_Base_MspInit+0x128>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d10d      	bne.n	8001192 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8001176:	4b09      	ldr	r3, [pc, #36]	@ (800119c <HAL_TIM_Base_MspInit+0x118>)
 8001178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800117a:	4b08      	ldr	r3, [pc, #32]	@ (800119c <HAL_TIM_Base_MspInit+0x118>)
 800117c:	2104      	movs	r1, #4
 800117e:	430a      	orrs	r2, r1
 8001180:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2014      	movs	r0, #20
 8001188:	f000 fa2c 	bl	80015e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 800118c:	2014      	movs	r0, #20
 800118e:	f000 fa3e 	bl	800160e <HAL_NVIC_EnableIRQ>
}
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	46bd      	mov	sp, r7
 8001196:	b009      	add	sp, #36	@ 0x24
 8001198:	bd90      	pop	{r4, r7, pc}
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	40021000 	.word	0x40021000
 80011a0:	20004568 	.word	0x20004568
 80011a4:	40020030 	.word	0x40020030
 80011a8:	40000400 	.word	0x40000400
 80011ac:	40010800 	.word	0x40010800

080011b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b089      	sub	sp, #36	@ 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	240c      	movs	r4, #12
 80011ba:	193b      	adds	r3, r7, r4
 80011bc:	0018      	movs	r0, r3
 80011be:	2314      	movs	r3, #20
 80011c0:	001a      	movs	r2, r3
 80011c2:	2100      	movs	r1, #0
 80011c4:	f004 f938 	bl	8005438 <memset>
  if(timHandle->Instance==TIM3)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a14      	ldr	r2, [pc, #80]	@ (8001220 <HAL_TIM_MspPostInit+0x70>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d122      	bne.n	8001218 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <HAL_TIM_MspPostInit+0x74>)
 80011d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011d6:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <HAL_TIM_MspPostInit+0x74>)
 80011d8:	2101      	movs	r1, #1
 80011da:	430a      	orrs	r2, r1
 80011dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <HAL_TIM_MspPostInit+0x74>)
 80011e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e2:	2201      	movs	r2, #1
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011ea:	0021      	movs	r1, r4
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2240      	movs	r2, #64	@ 0x40
 80011f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2202      	movs	r2, #2
 80011f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001204:	187b      	adds	r3, r7, r1
 8001206:	2202      	movs	r2, #2
 8001208:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	187a      	adds	r2, r7, r1
 800120c:	23a0      	movs	r3, #160	@ 0xa0
 800120e:	05db      	lsls	r3, r3, #23
 8001210:	0011      	movs	r1, r2
 8001212:	0018      	movs	r0, r3
 8001214:	f000 fc1a 	bl	8001a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001218:	46c0      	nop			@ (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b009      	add	sp, #36	@ 0x24
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	40000400 	.word	0x40000400
 8001224:	40021000 	.word	0x40021000

08001228 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800122c:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <MX_USART2_UART_Init+0x58>)
 800122e:	4a15      	ldr	r2, [pc, #84]	@ (8001284 <MX_USART2_UART_Init+0x5c>)
 8001230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <MX_USART2_UART_Init+0x58>)
 8001234:	22e1      	movs	r2, #225	@ 0xe1
 8001236:	0252      	lsls	r2, r2, #9
 8001238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <MX_USART2_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <MX_USART2_UART_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_USART2_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <MX_USART2_UART_Init+0x58>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <MX_USART2_UART_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_USART2_UART_Init+0x58>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800125e:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <MX_USART2_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_USART2_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126a:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <MX_USART2_UART_Init+0x58>)
 800126c:	0018      	movs	r0, r3
 800126e:	f003 f917 	bl	80044a0 <HAL_UART_Init>
 8001272:	1e03      	subs	r3, r0, #0
 8001274:	d001      	beq.n	800127a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001276:	f7ff faa9 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127a:	46c0      	nop			@ (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200045b0 	.word	0x200045b0
 8001284:	40004400 	.word	0x40004400

08001288 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	240c      	movs	r4, #12
 8001292:	193b      	adds	r3, r7, r4
 8001294:	0018      	movs	r0, r3
 8001296:	2314      	movs	r3, #20
 8001298:	001a      	movs	r2, r3
 800129a:	2100      	movs	r1, #0
 800129c:	f004 f8cc 	bl	8005438 <memset>
  if(uartHandle->Instance==USART2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a18      	ldr	r2, [pc, #96]	@ (8001308 <HAL_UART_MspInit+0x80>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d129      	bne.n	80012fe <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012aa:	4b18      	ldr	r3, [pc, #96]	@ (800130c <HAL_UART_MspInit+0x84>)
 80012ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012ae:	4b17      	ldr	r3, [pc, #92]	@ (800130c <HAL_UART_MspInit+0x84>)
 80012b0:	2180      	movs	r1, #128	@ 0x80
 80012b2:	0289      	lsls	r1, r1, #10
 80012b4:	430a      	orrs	r2, r1
 80012b6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <HAL_UART_MspInit+0x84>)
 80012ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012bc:	4b13      	ldr	r3, [pc, #76]	@ (800130c <HAL_UART_MspInit+0x84>)
 80012be:	2101      	movs	r1, #1
 80012c0:	430a      	orrs	r2, r1
 80012c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012c4:	4b11      	ldr	r3, [pc, #68]	@ (800130c <HAL_UART_MspInit+0x84>)
 80012c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c8:	2201      	movs	r2, #1
 80012ca:	4013      	ands	r3, r2
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012d0:	0021      	movs	r1, r4
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	220c      	movs	r2, #12
 80012d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2202      	movs	r2, #2
 80012dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	2203      	movs	r2, #3
 80012e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	2204      	movs	r2, #4
 80012ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	187a      	adds	r2, r7, r1
 80012f2:	23a0      	movs	r3, #160	@ 0xa0
 80012f4:	05db      	lsls	r3, r3, #23
 80012f6:	0011      	movs	r1, r2
 80012f8:	0018      	movs	r0, r3
 80012fa:	f000 fba7 	bl	8001a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012fe:	46c0      	nop			@ (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b009      	add	sp, #36	@ 0x24
 8001304:	bd90      	pop	{r4, r7, pc}
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	40004400 	.word	0x40004400
 800130c:	40021000 	.word	0x40021000

08001310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001310:	480d      	ldr	r0, [pc, #52]	@ (8001348 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001312:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001314:	f7ff fd58 	bl	8000dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001318:	480c      	ldr	r0, [pc, #48]	@ (800134c <LoopForever+0x6>)
  ldr r1, =_edata
 800131a:	490d      	ldr	r1, [pc, #52]	@ (8001350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800131c:	4a0d      	ldr	r2, [pc, #52]	@ (8001354 <LoopForever+0xe>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001320:	e002      	b.n	8001328 <LoopCopyDataInit>

08001322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001326:	3304      	adds	r3, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800132c:	d3f9      	bcc.n	8001322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132e:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001330:	4c0a      	ldr	r4, [pc, #40]	@ (800135c <LoopForever+0x16>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001334:	e001      	b.n	800133a <LoopFillZerobss>

08001336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001338:	3204      	adds	r2, #4

0800133a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800133c:	d3fb      	bcc.n	8001336 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800133e:	f004 f8d7 	bl	80054f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001342:	f7ff f969 	bl	8000618 <main>

08001346 <LoopForever>:

LoopForever:
    b LoopForever
 8001346:	e7fe      	b.n	8001346 <LoopForever>
   ldr   r0, =_estack
 8001348:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800134c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001350:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001354:	08005ab8 	.word	0x08005ab8
  ldr r2, =_sbss
 8001358:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800135c:	20004788 	.word	0x20004788

08001360 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001360:	e7fe      	b.n	8001360 <ADC1_COMP_IRQHandler>
	...

08001364 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001370:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <HAL_Init+0x3c>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <HAL_Init+0x3c>)
 8001376:	2140      	movs	r1, #64	@ 0x40
 8001378:	430a      	orrs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800137c:	2000      	movs	r0, #0
 800137e:	f000 f811 	bl	80013a4 <HAL_InitTick>
 8001382:	1e03      	subs	r3, r0, #0
 8001384:	d003      	beq.n	800138e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
 800138c:	e001      	b.n	8001392 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800138e:	f7ff fa23 	bl	80007d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
}
 8001396:	0018      	movs	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	40022000 	.word	0x40022000

080013a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ac:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <HAL_InitTick+0x5c>)
 80013ae:	681c      	ldr	r4, [r3, #0]
 80013b0:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <HAL_InitTick+0x60>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	0019      	movs	r1, r3
 80013b6:	23fa      	movs	r3, #250	@ 0xfa
 80013b8:	0098      	lsls	r0, r3, #2
 80013ba:	f7fe fea5 	bl	8000108 <__udivsi3>
 80013be:	0003      	movs	r3, r0
 80013c0:	0019      	movs	r1, r3
 80013c2:	0020      	movs	r0, r4
 80013c4:	f7fe fea0 	bl	8000108 <__udivsi3>
 80013c8:	0003      	movs	r3, r0
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 f92f 	bl	800162e <HAL_SYSTICK_Config>
 80013d0:	1e03      	subs	r3, r0, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e00f      	b.n	80013f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d80b      	bhi.n	80013f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	2301      	movs	r3, #1
 80013e2:	425b      	negs	r3, r3
 80013e4:	2200      	movs	r2, #0
 80013e6:	0018      	movs	r0, r3
 80013e8:	f000 f8fc 	bl	80015e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_InitTick+0x64>)
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e000      	b.n	80013f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b003      	add	sp, #12
 80013fe:	bd90      	pop	{r4, r7, pc}
 8001400:	20000000 	.word	0x20000000
 8001404:	20000008 	.word	0x20000008
 8001408:	20000004 	.word	0x20000004

0800140c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <HAL_IncTick+0x1c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	001a      	movs	r2, r3
 8001416:	4b05      	ldr	r3, [pc, #20]	@ (800142c <HAL_IncTick+0x20>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	18d2      	adds	r2, r2, r3
 800141c:	4b03      	ldr	r3, [pc, #12]	@ (800142c <HAL_IncTick+0x20>)
 800141e:	601a      	str	r2, [r3, #0]
}
 8001420:	46c0      	nop			@ (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	20000008 	.word	0x20000008
 800142c:	20004638 	.word	0x20004638

08001430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;
 8001434:	4b02      	ldr	r3, [pc, #8]	@ (8001440 <HAL_GetTick+0x10>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	0018      	movs	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			@ (mov r8, r8)
 8001440:	20004638 	.word	0x20004638

08001444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800144c:	f7ff fff0 	bl	8001430 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3301      	adds	r3, #1
 800145c:	d005      	beq.n	800146a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145e:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <HAL_Delay+0x44>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	001a      	movs	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	189b      	adds	r3, r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	f7ff ffe0 	bl	8001430 <HAL_GetTick>
 8001470:	0002      	movs	r2, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	429a      	cmp	r2, r3
 800147a:	d8f7      	bhi.n	800146c <HAL_Delay+0x28>
  {
  }
}
 800147c:	46c0      	nop			@ (mov r8, r8)
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b004      	add	sp, #16
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	20000008 	.word	0x20000008

0800148c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	0002      	movs	r2, r0
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001498:	1dfb      	adds	r3, r7, #7
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b7f      	cmp	r3, #127	@ 0x7f
 800149e:	d809      	bhi.n	80014b4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a0:	1dfb      	adds	r3, r7, #7
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	001a      	movs	r2, r3
 80014a6:	231f      	movs	r3, #31
 80014a8:	401a      	ands	r2, r3
 80014aa:	4b04      	ldr	r3, [pc, #16]	@ (80014bc <__NVIC_EnableIRQ+0x30>)
 80014ac:	2101      	movs	r1, #1
 80014ae:	4091      	lsls	r1, r2
 80014b0:	000a      	movs	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]
  }
}
 80014b4:	46c0      	nop			@ (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b002      	add	sp, #8
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	e000e100 	.word	0xe000e100

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	0002      	movs	r2, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80014d4:	d828      	bhi.n	8001528 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001594 <__NVIC_SetPriority+0xd4>)
 80014d8:	1dfb      	adds	r3, r7, #7
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	33c0      	adds	r3, #192	@ 0xc0
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	589b      	ldr	r3, [r3, r2]
 80014e6:	1dfa      	adds	r2, r7, #7
 80014e8:	7812      	ldrb	r2, [r2, #0]
 80014ea:	0011      	movs	r1, r2
 80014ec:	2203      	movs	r2, #3
 80014ee:	400a      	ands	r2, r1
 80014f0:	00d2      	lsls	r2, r2, #3
 80014f2:	21ff      	movs	r1, #255	@ 0xff
 80014f4:	4091      	lsls	r1, r2
 80014f6:	000a      	movs	r2, r1
 80014f8:	43d2      	mvns	r2, r2
 80014fa:	401a      	ands	r2, r3
 80014fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	019b      	lsls	r3, r3, #6
 8001502:	22ff      	movs	r2, #255	@ 0xff
 8001504:	401a      	ands	r2, r3
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	0018      	movs	r0, r3
 800150c:	2303      	movs	r3, #3
 800150e:	4003      	ands	r3, r0
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001514:	481f      	ldr	r0, [pc, #124]	@ (8001594 <__NVIC_SetPriority+0xd4>)
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b25b      	sxtb	r3, r3
 800151c:	089b      	lsrs	r3, r3, #2
 800151e:	430a      	orrs	r2, r1
 8001520:	33c0      	adds	r3, #192	@ 0xc0
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001526:	e031      	b.n	800158c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001528:	4a1b      	ldr	r2, [pc, #108]	@ (8001598 <__NVIC_SetPriority+0xd8>)
 800152a:	1dfb      	adds	r3, r7, #7
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	0019      	movs	r1, r3
 8001530:	230f      	movs	r3, #15
 8001532:	400b      	ands	r3, r1
 8001534:	3b08      	subs	r3, #8
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3306      	adds	r3, #6
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	18d3      	adds	r3, r2, r3
 800153e:	3304      	adds	r3, #4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	1dfa      	adds	r2, r7, #7
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	0011      	movs	r1, r2
 8001548:	2203      	movs	r2, #3
 800154a:	400a      	ands	r2, r1
 800154c:	00d2      	lsls	r2, r2, #3
 800154e:	21ff      	movs	r1, #255	@ 0xff
 8001550:	4091      	lsls	r1, r2
 8001552:	000a      	movs	r2, r1
 8001554:	43d2      	mvns	r2, r2
 8001556:	401a      	ands	r2, r3
 8001558:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	019b      	lsls	r3, r3, #6
 800155e:	22ff      	movs	r2, #255	@ 0xff
 8001560:	401a      	ands	r2, r3
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	0018      	movs	r0, r3
 8001568:	2303      	movs	r3, #3
 800156a:	4003      	ands	r3, r0
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001570:	4809      	ldr	r0, [pc, #36]	@ (8001598 <__NVIC_SetPriority+0xd8>)
 8001572:	1dfb      	adds	r3, r7, #7
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	001c      	movs	r4, r3
 8001578:	230f      	movs	r3, #15
 800157a:	4023      	ands	r3, r4
 800157c:	3b08      	subs	r3, #8
 800157e:	089b      	lsrs	r3, r3, #2
 8001580:	430a      	orrs	r2, r1
 8001582:	3306      	adds	r3, #6
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	18c3      	adds	r3, r0, r3
 8001588:	3304      	adds	r3, #4
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	46c0      	nop			@ (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	b003      	add	sp, #12
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	1e5a      	subs	r2, r3, #1
 80015a8:	2380      	movs	r3, #128	@ 0x80
 80015aa:	045b      	lsls	r3, r3, #17
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d301      	bcc.n	80015b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b0:	2301      	movs	r3, #1
 80015b2:	e010      	b.n	80015d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b4:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <SysTick_Config+0x44>)
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	3a01      	subs	r2, #1
 80015ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015bc:	2301      	movs	r3, #1
 80015be:	425b      	negs	r3, r3
 80015c0:	2103      	movs	r1, #3
 80015c2:	0018      	movs	r0, r3
 80015c4:	f7ff ff7c 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c8:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <SysTick_Config+0x44>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ce:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <SysTick_Config+0x44>)
 80015d0:	2207      	movs	r2, #7
 80015d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	e000e010 	.word	0xe000e010

080015e4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	210f      	movs	r1, #15
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	1c02      	adds	r2, r0, #0
 80015f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	0011      	movs	r1, r2
 8001600:	0018      	movs	r0, r3
 8001602:	f7ff ff5d 	bl	80014c0 <__NVIC_SetPriority>
}
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	b004      	add	sp, #16
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	0002      	movs	r2, r0
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800161a:	1dfb      	adds	r3, r7, #7
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b25b      	sxtb	r3, r3
 8001620:	0018      	movs	r0, r3
 8001622:	f7ff ff33 	bl	800148c <__NVIC_EnableIRQ>
}
 8001626:	46c0      	nop			@ (mov r8, r8)
 8001628:	46bd      	mov	sp, r7
 800162a:	b002      	add	sp, #8
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	0018      	movs	r0, r3
 800163a:	f7ff ffaf 	bl	800159c <SysTick_Config>
 800163e:	0003      	movs	r3, r0
}
 8001640:	0018      	movs	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	b002      	add	sp, #8
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e061      	b.n	800171e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a32      	ldr	r2, [pc, #200]	@ (8001728 <HAL_DMA_Init+0xe0>)
 8001660:	4694      	mov	ip, r2
 8001662:	4463      	add	r3, ip
 8001664:	2114      	movs	r1, #20
 8001666:	0018      	movs	r0, r3
 8001668:	f7fe fd4e 	bl	8000108 <__udivsi3>
 800166c:	0003      	movs	r3, r0
 800166e:	009a      	lsls	r2, r3, #2
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a2d      	ldr	r2, [pc, #180]	@ (800172c <HAL_DMA_Init+0xe4>)
 8001678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2225      	movs	r2, #37	@ 0x25
 800167e:	2102      	movs	r1, #2
 8001680:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4a28      	ldr	r2, [pc, #160]	@ (8001730 <HAL_DMA_Init+0xe8>)
 800168e:	4013      	ands	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800169a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	2380      	movs	r3, #128	@ 0x80
 80016ce:	01db      	lsls	r3, r3, #7
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d018      	beq.n	8001706 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <HAL_DMA_Init+0xec>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016dc:	211c      	movs	r1, #28
 80016de:	400b      	ands	r3, r1
 80016e0:	210f      	movs	r1, #15
 80016e2:	4099      	lsls	r1, r3
 80016e4:	000b      	movs	r3, r1
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_DMA_Init+0xec>)
 80016ea:	400a      	ands	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_DMA_Init+0xec>)
 80016f0:	6819      	ldr	r1, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	201c      	movs	r0, #28
 80016fc:	4003      	ands	r3, r0
 80016fe:	409a      	lsls	r2, r3
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <HAL_DMA_Init+0xec>)
 8001702:	430a      	orrs	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2225      	movs	r2, #37	@ 0x25
 8001710:	2101      	movs	r1, #1
 8001712:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2224      	movs	r2, #36	@ 0x24
 8001718:	2100      	movs	r1, #0
 800171a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	0018      	movs	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	b004      	add	sp, #16
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	bffdfff8 	.word	0xbffdfff8
 800172c:	40020000 	.word	0x40020000
 8001730:	ffff800f 	.word	0xffff800f
 8001734:	400200a8 	.word	0x400200a8

08001738 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001746:	2317      	movs	r3, #23
 8001748:	18fb      	adds	r3, r7, r3
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2224      	movs	r2, #36	@ 0x24
 8001752:	5c9b      	ldrb	r3, [r3, r2]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_DMA_Start_IT+0x24>
 8001758:	2302      	movs	r3, #2
 800175a:	e04f      	b.n	80017fc <HAL_DMA_Start_IT+0xc4>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2224      	movs	r2, #36	@ 0x24
 8001760:	2101      	movs	r1, #1
 8001762:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2225      	movs	r2, #37	@ 0x25
 8001768:	5c9b      	ldrb	r3, [r3, r2]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d13a      	bne.n	80017e6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2225      	movs	r2, #37	@ 0x25
 8001774:	2102      	movs	r1, #2
 8001776:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2101      	movs	r1, #1
 800178a:	438a      	bics	r2, r1
 800178c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	68b9      	ldr	r1, [r7, #8]
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 f92a 	bl	80019ee <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d008      	beq.n	80017b4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	210e      	movs	r1, #14
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e00f      	b.n	80017d4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2104      	movs	r1, #4
 80017c0:	438a      	bics	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	210a      	movs	r1, #10
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2101      	movs	r1, #1
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	e007      	b.n	80017f6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2224      	movs	r2, #36	@ 0x24
 80017ea:	2100      	movs	r1, #0
 80017ec:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017ee:	2317      	movs	r3, #23
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	2202      	movs	r2, #2
 80017f4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80017f6:	2317      	movs	r3, #23
 80017f8:	18fb      	adds	r3, r7, r3
 80017fa:	781b      	ldrb	r3, [r3, #0]
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	b006      	add	sp, #24
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800180c:	210f      	movs	r1, #15
 800180e:	187b      	adds	r3, r7, r1
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2225      	movs	r2, #37	@ 0x25
 8001818:	5c9b      	ldrb	r3, [r3, r2]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d006      	beq.n	800182e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2204      	movs	r2, #4
 8001824:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001826:	187b      	adds	r3, r7, r1
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
 800182c:	e02a      	b.n	8001884 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	210e      	movs	r1, #14
 800183a:	438a      	bics	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2101      	movs	r1, #1
 800184a:	438a      	bics	r2, r1
 800184c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	221c      	movs	r2, #28
 8001854:	401a      	ands	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	2101      	movs	r1, #1
 800185c:	4091      	lsls	r1, r2
 800185e:	000a      	movs	r2, r1
 8001860:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2225      	movs	r2, #37	@ 0x25
 8001866:	2101      	movs	r1, #1
 8001868:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2224      	movs	r2, #36	@ 0x24
 800186e:	2100      	movs	r1, #0
 8001870:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001876:	2b00      	cmp	r3, #0
 8001878:	d004      	beq.n	8001884 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	0010      	movs	r0, r2
 8001882:	4798      	blx	r3
    }
  }
  return status;
 8001884:	230f      	movs	r3, #15
 8001886:	18fb      	adds	r3, r7, r3
 8001888:	781b      	ldrb	r3, [r3, #0]
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b004      	add	sp, #16
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	221c      	movs	r2, #28
 80018b0:	4013      	ands	r3, r2
 80018b2:	2204      	movs	r2, #4
 80018b4:	409a      	lsls	r2, r3
 80018b6:	0013      	movs	r3, r2
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4013      	ands	r3, r2
 80018bc:	d026      	beq.n	800190c <HAL_DMA_IRQHandler+0x7a>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2204      	movs	r2, #4
 80018c2:	4013      	ands	r3, r2
 80018c4:	d022      	beq.n	800190c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2220      	movs	r2, #32
 80018ce:	4013      	ands	r3, r2
 80018d0:	d107      	bne.n	80018e2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2104      	movs	r1, #4
 80018de:	438a      	bics	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	221c      	movs	r2, #28
 80018e8:	401a      	ands	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	2104      	movs	r1, #4
 80018f0:	4091      	lsls	r1, r2
 80018f2:	000a      	movs	r2, r1
 80018f4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d100      	bne.n	8001900 <HAL_DMA_IRQHandler+0x6e>
 80018fe:	e071      	b.n	80019e4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	0010      	movs	r0, r2
 8001908:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800190a:	e06b      	b.n	80019e4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001910:	221c      	movs	r2, #28
 8001912:	4013      	ands	r3, r2
 8001914:	2202      	movs	r2, #2
 8001916:	409a      	lsls	r2, r3
 8001918:	0013      	movs	r3, r2
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4013      	ands	r3, r2
 800191e:	d02d      	beq.n	800197c <HAL_DMA_IRQHandler+0xea>
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2202      	movs	r2, #2
 8001924:	4013      	ands	r3, r2
 8001926:	d029      	beq.n	800197c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2220      	movs	r2, #32
 8001930:	4013      	ands	r3, r2
 8001932:	d10b      	bne.n	800194c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	210a      	movs	r1, #10
 8001940:	438a      	bics	r2, r1
 8001942:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2225      	movs	r2, #37	@ 0x25
 8001948:	2101      	movs	r1, #1
 800194a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001950:	221c      	movs	r2, #28
 8001952:	401a      	ands	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	2102      	movs	r1, #2
 800195a:	4091      	lsls	r1, r2
 800195c:	000a      	movs	r2, r1
 800195e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2224      	movs	r2, #36	@ 0x24
 8001964:	2100      	movs	r1, #0
 8001966:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196c:	2b00      	cmp	r3, #0
 800196e:	d039      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	0010      	movs	r0, r2
 8001978:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800197a:	e033      	b.n	80019e4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001980:	221c      	movs	r2, #28
 8001982:	4013      	ands	r3, r2
 8001984:	2208      	movs	r2, #8
 8001986:	409a      	lsls	r2, r3
 8001988:	0013      	movs	r3, r2
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	4013      	ands	r3, r2
 800198e:	d02a      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x154>
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2208      	movs	r2, #8
 8001994:	4013      	ands	r3, r2
 8001996:	d026      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	210e      	movs	r1, #14
 80019a4:	438a      	bics	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ac:	221c      	movs	r2, #28
 80019ae:	401a      	ands	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	2101      	movs	r1, #1
 80019b6:	4091      	lsls	r1, r2
 80019b8:	000a      	movs	r2, r1
 80019ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2225      	movs	r2, #37	@ 0x25
 80019c6:	2101      	movs	r1, #1
 80019c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2224      	movs	r2, #36	@ 0x24
 80019ce:	2100      	movs	r1, #0
 80019d0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	0010      	movs	r0, r2
 80019e2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019e4:	46c0      	nop			@ (mov r8, r8)
 80019e6:	46c0      	nop			@ (mov r8, r8)
}
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b004      	add	sp, #16
 80019ec:	bd80      	pop	{r7, pc}

080019ee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a00:	221c      	movs	r2, #28
 8001a02:	401a      	ands	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	2101      	movs	r1, #1
 8001a0a:	4091      	lsls	r1, r2
 8001a0c:	000a      	movs	r2, r1
 8001a0e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b10      	cmp	r3, #16
 8001a1e:	d108      	bne.n	8001a32 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a30:	e007      	b.n	8001a42 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	60da      	str	r2, [r3, #12]
}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b004      	add	sp, #16
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a62:	e155      	b.n	8001d10 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2101      	movs	r1, #1
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4091      	lsls	r1, r2
 8001a6e:	000a      	movs	r2, r1
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d100      	bne.n	8001a7c <HAL_GPIO_Init+0x30>
 8001a7a:	e146      	b.n	8001d0a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2203      	movs	r2, #3
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d005      	beq.n	8001a94 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d130      	bne.n	8001af6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	0013      	movs	r3, r2
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	0013      	movs	r3, r2
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aca:	2201      	movs	r2, #1
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	0013      	movs	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2203      	movs	r2, #3
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d017      	beq.n	8001b32 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	0013      	movs	r3, r2
 8001b12:	43da      	mvns	r2, r3
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	409a      	lsls	r2, r3
 8001b24:	0013      	movs	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2203      	movs	r2, #3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d123      	bne.n	8001b86 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	08da      	lsrs	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3208      	adds	r2, #8
 8001b46:	0092      	lsls	r2, r2, #2
 8001b48:	58d3      	ldr	r3, [r2, r3]
 8001b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2207      	movs	r2, #7
 8001b50:	4013      	ands	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	409a      	lsls	r2, r3
 8001b58:	0013      	movs	r3, r2
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2107      	movs	r1, #7
 8001b6a:	400b      	ands	r3, r1
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	0013      	movs	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	08da      	lsrs	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3208      	adds	r2, #8
 8001b80:	0092      	lsls	r2, r2, #2
 8001b82:	6939      	ldr	r1, [r7, #16]
 8001b84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	409a      	lsls	r2, r3
 8001b94:	0013      	movs	r3, r2
 8001b96:	43da      	mvns	r2, r3
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	409a      	lsls	r2, r3
 8001bac:	0013      	movs	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	23c0      	movs	r3, #192	@ 0xc0
 8001bc0:	029b      	lsls	r3, r3, #10
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d100      	bne.n	8001bc8 <HAL_GPIO_Init+0x17c>
 8001bc6:	e0a0      	b.n	8001d0a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc8:	4b57      	ldr	r3, [pc, #348]	@ (8001d28 <HAL_GPIO_Init+0x2dc>)
 8001bca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bcc:	4b56      	ldr	r3, [pc, #344]	@ (8001d28 <HAL_GPIO_Init+0x2dc>)
 8001bce:	2101      	movs	r1, #1
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bd4:	4a55      	ldr	r2, [pc, #340]	@ (8001d2c <HAL_GPIO_Init+0x2e0>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	589b      	ldr	r3, [r3, r2]
 8001be0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2203      	movs	r2, #3
 8001be6:	4013      	ands	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	409a      	lsls	r2, r3
 8001bee:	0013      	movs	r3, r2
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	23a0      	movs	r3, #160	@ 0xa0
 8001bfc:	05db      	lsls	r3, r3, #23
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d01f      	beq.n	8001c42 <HAL_GPIO_Init+0x1f6>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4a      	ldr	r2, [pc, #296]	@ (8001d30 <HAL_GPIO_Init+0x2e4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d019      	beq.n	8001c3e <HAL_GPIO_Init+0x1f2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a49      	ldr	r2, [pc, #292]	@ (8001d34 <HAL_GPIO_Init+0x2e8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_Init+0x1ee>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a48      	ldr	r2, [pc, #288]	@ (8001d38 <HAL_GPIO_Init+0x2ec>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00d      	beq.n	8001c36 <HAL_GPIO_Init+0x1ea>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a47      	ldr	r2, [pc, #284]	@ (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_Init+0x1e6>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a46      	ldr	r2, [pc, #280]	@ (8001d40 <HAL_GPIO_Init+0x2f4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_Init+0x1e2>
 8001c2a:	2305      	movs	r3, #5
 8001c2c:	e00a      	b.n	8001c44 <HAL_GPIO_Init+0x1f8>
 8001c2e:	2306      	movs	r3, #6
 8001c30:	e008      	b.n	8001c44 <HAL_GPIO_Init+0x1f8>
 8001c32:	2304      	movs	r3, #4
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x1f8>
 8001c36:	2303      	movs	r3, #3
 8001c38:	e004      	b.n	8001c44 <HAL_GPIO_Init+0x1f8>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_Init+0x1f8>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_GPIO_Init+0x1f8>
 8001c42:	2300      	movs	r3, #0
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	2103      	movs	r1, #3
 8001c48:	400a      	ands	r2, r1
 8001c4a:	0092      	lsls	r2, r2, #2
 8001c4c:	4093      	lsls	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c54:	4935      	ldr	r1, [pc, #212]	@ (8001d2c <HAL_GPIO_Init+0x2e0>)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c62:	4b38      	ldr	r3, [pc, #224]	@ (8001d44 <HAL_GPIO_Init+0x2f8>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	2380      	movs	r3, #128	@ 0x80
 8001c78:	035b      	lsls	r3, r3, #13
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c86:	4b2f      	ldr	r3, [pc, #188]	@ (8001d44 <HAL_GPIO_Init+0x2f8>)
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d44 <HAL_GPIO_Init+0x2f8>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	43da      	mvns	r2, r3
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	2380      	movs	r3, #128	@ 0x80
 8001ca2:	039b      	lsls	r3, r3, #14
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cb0:	4b24      	ldr	r3, [pc, #144]	@ (8001d44 <HAL_GPIO_Init+0x2f8>)
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001cb6:	4b23      	ldr	r3, [pc, #140]	@ (8001d44 <HAL_GPIO_Init+0x2f8>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	2380      	movs	r3, #128	@ 0x80
 8001ccc:	029b      	lsls	r3, r3, #10
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cda:	4b1a      	ldr	r3, [pc, #104]	@ (8001d44 <HAL_GPIO_Init+0x2f8>)
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce0:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <HAL_GPIO_Init+0x2f8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	43da      	mvns	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	2380      	movs	r3, #128	@ 0x80
 8001cf6:	025b      	lsls	r3, r3, #9
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <HAL_GPIO_Init+0x2f8>)
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	40da      	lsrs	r2, r3
 8001d18:	1e13      	subs	r3, r2, #0
 8001d1a:	d000      	beq.n	8001d1e <HAL_GPIO_Init+0x2d2>
 8001d1c:	e6a2      	b.n	8001a64 <HAL_GPIO_Init+0x18>
  }
}
 8001d1e:	46c0      	nop			@ (mov r8, r8)
 8001d20:	46c0      	nop			@ (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b006      	add	sp, #24
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40010000 	.word	0x40010000
 8001d30:	50000400 	.word	0x50000400
 8001d34:	50000800 	.word	0x50000800
 8001d38:	50000c00 	.word	0x50000c00
 8001d3c:	50001000 	.word	0x50001000
 8001d40:	50001c00 	.word	0x50001c00
 8001d44:	40010400 	.word	0x40010400

08001d48 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	000a      	movs	r2, r1
 8001d52:	1cbb      	adds	r3, r7, #2
 8001d54:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	1cba      	adds	r2, r7, #2
 8001d5c:	8812      	ldrh	r2, [r2, #0]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d004      	beq.n	8001d6c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001d62:	230f      	movs	r3, #15
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
 8001d6a:	e003      	b.n	8001d74 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d6c:	230f      	movs	r3, #15
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001d74:	230f      	movs	r3, #15
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	781b      	ldrb	r3, [r3, #0]
}
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b004      	add	sp, #16
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	0008      	movs	r0, r1
 8001d8c:	0011      	movs	r1, r2
 8001d8e:	1cbb      	adds	r3, r7, #2
 8001d90:	1c02      	adds	r2, r0, #0
 8001d92:	801a      	strh	r2, [r3, #0]
 8001d94:	1c7b      	adds	r3, r7, #1
 8001d96:	1c0a      	adds	r2, r1, #0
 8001d98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d9a:	1c7b      	adds	r3, r7, #1
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da2:	1cbb      	adds	r3, r7, #2
 8001da4:	881a      	ldrh	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001daa:	e003      	b.n	8001db4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001dac:	1cbb      	adds	r3, r7, #2
 8001dae:	881a      	ldrh	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001db4:	46c0      	nop			@ (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b002      	add	sp, #8
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b5b0      	push	{r4, r5, r7, lr}
 8001dbe:	b08a      	sub	sp, #40	@ 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f000 fbbf 	bl	800254e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd0:	4bc9      	ldr	r3, [pc, #804]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dda:	4bc7      	ldr	r3, [pc, #796]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	2380      	movs	r3, #128	@ 0x80
 8001de0:	025b      	lsls	r3, r3, #9
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2201      	movs	r2, #1
 8001dec:	4013      	ands	r3, r2
 8001dee:	d100      	bne.n	8001df2 <HAL_RCC_OscConfig+0x36>
 8001df0:	e07e      	b.n	8001ef0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d007      	beq.n	8001e08 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d112      	bne.n	8001e24 <HAL_RCC_OscConfig+0x68>
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	2380      	movs	r3, #128	@ 0x80
 8001e02:	025b      	lsls	r3, r3, #9
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d10d      	bne.n	8001e24 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	4bbb      	ldr	r3, [pc, #748]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2380      	movs	r3, #128	@ 0x80
 8001e0e:	029b      	lsls	r3, r3, #10
 8001e10:	4013      	ands	r3, r2
 8001e12:	d100      	bne.n	8001e16 <HAL_RCC_OscConfig+0x5a>
 8001e14:	e06b      	b.n	8001eee <HAL_RCC_OscConfig+0x132>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d167      	bne.n	8001eee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f000 fb95 	bl	800254e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	2380      	movs	r3, #128	@ 0x80
 8001e2a:	025b      	lsls	r3, r3, #9
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_OscConfig+0x84>
 8001e30:	4bb1      	ldr	r3, [pc, #708]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4bb0      	ldr	r3, [pc, #704]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001e36:	2180      	movs	r1, #128	@ 0x80
 8001e38:	0249      	lsls	r1, r1, #9
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e027      	b.n	8001e90 <HAL_RCC_OscConfig+0xd4>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	23a0      	movs	r3, #160	@ 0xa0
 8001e46:	02db      	lsls	r3, r3, #11
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d10e      	bne.n	8001e6a <HAL_RCC_OscConfig+0xae>
 8001e4c:	4baa      	ldr	r3, [pc, #680]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4ba9      	ldr	r3, [pc, #676]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001e52:	2180      	movs	r1, #128	@ 0x80
 8001e54:	02c9      	lsls	r1, r1, #11
 8001e56:	430a      	orrs	r2, r1
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	4ba7      	ldr	r3, [pc, #668]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4ba6      	ldr	r3, [pc, #664]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001e60:	2180      	movs	r1, #128	@ 0x80
 8001e62:	0249      	lsls	r1, r1, #9
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	e012      	b.n	8001e90 <HAL_RCC_OscConfig+0xd4>
 8001e6a:	4ba3      	ldr	r3, [pc, #652]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4ba2      	ldr	r3, [pc, #648]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001e70:	49a2      	ldr	r1, [pc, #648]	@ (80020fc <HAL_RCC_OscConfig+0x340>)
 8001e72:	400a      	ands	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	4ba0      	ldr	r3, [pc, #640]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	2380      	movs	r3, #128	@ 0x80
 8001e7c:	025b      	lsls	r3, r3, #9
 8001e7e:	4013      	ands	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4b9c      	ldr	r3, [pc, #624]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b9b      	ldr	r3, [pc, #620]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001e8a:	499d      	ldr	r1, [pc, #628]	@ (8002100 <HAL_RCC_OscConfig+0x344>)
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d015      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff faca 	bl	8001430 <HAL_GetTick>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ea0:	e009      	b.n	8001eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea2:	f7ff fac5 	bl	8001430 <HAL_GetTick>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b64      	cmp	r3, #100	@ 0x64
 8001eae:	d902      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	f000 fb4c 	bl	800254e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eb6:	4b90      	ldr	r3, [pc, #576]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	@ 0x80
 8001ebc:	029b      	lsls	r3, r3, #10
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d0ef      	beq.n	8001ea2 <HAL_RCC_OscConfig+0xe6>
 8001ec2:	e015      	b.n	8001ef0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fab4 	bl	8001430 <HAL_GetTick>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ece:	f7ff faaf 	bl	8001430 <HAL_GetTick>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b64      	cmp	r3, #100	@ 0x64
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e336      	b.n	800254e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ee0:	4b85      	ldr	r3, [pc, #532]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	029b      	lsls	r3, r3, #10
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d1f0      	bne.n	8001ece <HAL_RCC_OscConfig+0x112>
 8001eec:	e000      	b.n	8001ef0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d100      	bne.n	8001efc <HAL_RCC_OscConfig+0x140>
 8001efa:	e099      	b.n	8002030 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f04:	2220      	movs	r2, #32
 8001f06:	4013      	ands	r3, r2
 8001f08:	d009      	beq.n	8001f1e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001f0a:	4b7b      	ldr	r3, [pc, #492]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4b7a      	ldr	r3, [pc, #488]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001f10:	2120      	movs	r1, #32
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	2220      	movs	r2, #32
 8001f1a:	4393      	bics	r3, r2
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	2b0c      	cmp	r3, #12
 8001f28:	d13e      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x1ec>
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d13b      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001f30:	4b71      	ldr	r3, [pc, #452]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2204      	movs	r2, #4
 8001f36:	4013      	ands	r3, r2
 8001f38:	d004      	beq.n	8001f44 <HAL_RCC_OscConfig+0x188>
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e304      	b.n	800254e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f44:	4b6c      	ldr	r3, [pc, #432]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a6e      	ldr	r2, [pc, #440]	@ (8002104 <HAL_RCC_OscConfig+0x348>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	0019      	movs	r1, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	021a      	lsls	r2, r3, #8
 8001f54:	4b68      	ldr	r3, [pc, #416]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001f56:	430a      	orrs	r2, r1
 8001f58:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f5a:	4b67      	ldr	r3, [pc, #412]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2209      	movs	r2, #9
 8001f60:	4393      	bics	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	4b64      	ldr	r3, [pc, #400]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f6c:	f000 fc42 	bl	80027f4 <HAL_RCC_GetSysClockFreq>
 8001f70:	0001      	movs	r1, r0
 8001f72:	4b61      	ldr	r3, [pc, #388]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	091b      	lsrs	r3, r3, #4
 8001f78:	220f      	movs	r2, #15
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	4a62      	ldr	r2, [pc, #392]	@ (8002108 <HAL_RCC_OscConfig+0x34c>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	000a      	movs	r2, r1
 8001f82:	40da      	lsrs	r2, r3
 8001f84:	4b61      	ldr	r3, [pc, #388]	@ (800210c <HAL_RCC_OscConfig+0x350>)
 8001f86:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001f88:	4b61      	ldr	r3, [pc, #388]	@ (8002110 <HAL_RCC_OscConfig+0x354>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2513      	movs	r5, #19
 8001f8e:	197c      	adds	r4, r7, r5
 8001f90:	0018      	movs	r0, r3
 8001f92:	f7ff fa07 	bl	80013a4 <HAL_InitTick>
 8001f96:	0003      	movs	r3, r0
 8001f98:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001f9a:	197b      	adds	r3, r7, r5
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d046      	beq.n	8002030 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001fa2:	197b      	adds	r3, r7, r5
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	e2d2      	b.n	800254e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d027      	beq.n	8001ffe <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001fae:	4b52      	ldr	r3, [pc, #328]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2209      	movs	r2, #9
 8001fb4:	4393      	bics	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	4b4f      	ldr	r3, [pc, #316]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fa36 	bl	8001430 <HAL_GetTick>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fca:	f7ff fa31 	bl	8001430 <HAL_GetTick>
 8001fce:	0002      	movs	r2, r0
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e2b8      	b.n	800254e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fdc:	4b46      	ldr	r3, [pc, #280]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d0f1      	beq.n	8001fca <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe6:	4b44      	ldr	r3, [pc, #272]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4a46      	ldr	r2, [pc, #280]	@ (8002104 <HAL_RCC_OscConfig+0x348>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	021a      	lsls	r2, r3, #8
 8001ff6:	4b40      	ldr	r3, [pc, #256]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	e018      	b.n	8002030 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4b3d      	ldr	r3, [pc, #244]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8002004:	2101      	movs	r1, #1
 8002006:	438a      	bics	r2, r1
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7ff fa11 	bl	8001430 <HAL_GetTick>
 800200e:	0003      	movs	r3, r0
 8002010:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002014:	f7ff fa0c 	bl	8001430 <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e293      	b.n	800254e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002026:	4b34      	ldr	r3, [pc, #208]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2204      	movs	r2, #4
 800202c:	4013      	ands	r3, r2
 800202e:	d1f1      	bne.n	8002014 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2210      	movs	r2, #16
 8002036:	4013      	ands	r3, r2
 8002038:	d100      	bne.n	800203c <HAL_RCC_OscConfig+0x280>
 800203a:	e0a2      	b.n	8002182 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d140      	bne.n	80020c4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002042:	4b2d      	ldr	r3, [pc, #180]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	@ 0x80
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4013      	ands	r3, r2
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x29e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e279      	b.n	800254e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800205a:	4b27      	ldr	r3, [pc, #156]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4a2d      	ldr	r2, [pc, #180]	@ (8002114 <HAL_RCC_OscConfig+0x358>)
 8002060:	4013      	ands	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002068:	4b23      	ldr	r3, [pc, #140]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 800206a:	430a      	orrs	r2, r1
 800206c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800206e:	4b22      	ldr	r3, [pc, #136]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	0a19      	lsrs	r1, r3, #8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	061a      	lsls	r2, r3, #24
 800207c:	4b1e      	ldr	r3, [pc, #120]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 800207e:	430a      	orrs	r2, r1
 8002080:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	0b5b      	lsrs	r3, r3, #13
 8002088:	3301      	adds	r3, #1
 800208a:	2280      	movs	r2, #128	@ 0x80
 800208c:	0212      	lsls	r2, r2, #8
 800208e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002090:	4b19      	ldr	r3, [pc, #100]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	210f      	movs	r1, #15
 8002098:	400b      	ands	r3, r1
 800209a:	491b      	ldr	r1, [pc, #108]	@ (8002108 <HAL_RCC_OscConfig+0x34c>)
 800209c:	5ccb      	ldrb	r3, [r1, r3]
 800209e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020a0:	4b1a      	ldr	r3, [pc, #104]	@ (800210c <HAL_RCC_OscConfig+0x350>)
 80020a2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80020a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002110 <HAL_RCC_OscConfig+0x354>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2513      	movs	r5, #19
 80020aa:	197c      	adds	r4, r7, r5
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7ff f979 	bl	80013a4 <HAL_InitTick>
 80020b2:	0003      	movs	r3, r0
 80020b4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80020b6:	197b      	adds	r3, r7, r5
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d061      	beq.n	8002182 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80020be:	197b      	adds	r3, r7, r5
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	e244      	b.n	800254e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d040      	beq.n	800214e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020cc:	4b0a      	ldr	r3, [pc, #40]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 80020d2:	2180      	movs	r1, #128	@ 0x80
 80020d4:	0049      	lsls	r1, r1, #1
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7ff f9a9 	bl	8001430 <HAL_GetTick>
 80020de:	0003      	movs	r3, r0
 80020e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020e2:	e019      	b.n	8002118 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020e4:	f7ff f9a4 	bl	8001430 <HAL_GetTick>
 80020e8:	0002      	movs	r2, r0
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d912      	bls.n	8002118 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e22b      	b.n	800254e <HAL_RCC_OscConfig+0x792>
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	40021000 	.word	0x40021000
 80020fc:	fffeffff 	.word	0xfffeffff
 8002100:	fffbffff 	.word	0xfffbffff
 8002104:	ffffe0ff 	.word	0xffffe0ff
 8002108:	08005a3c 	.word	0x08005a3c
 800210c:	20000000 	.word	0x20000000
 8002110:	20000004 	.word	0x20000004
 8002114:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002118:	4bca      	ldr	r3, [pc, #808]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	2380      	movs	r3, #128	@ 0x80
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4013      	ands	r3, r2
 8002122:	d0df      	beq.n	80020e4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002124:	4bc7      	ldr	r3, [pc, #796]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4ac7      	ldr	r2, [pc, #796]	@ (8002448 <HAL_RCC_OscConfig+0x68c>)
 800212a:	4013      	ands	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002132:	4bc4      	ldr	r3, [pc, #784]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002134:	430a      	orrs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002138:	4bc2      	ldr	r3, [pc, #776]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	0a19      	lsrs	r1, r3, #8
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	061a      	lsls	r2, r3, #24
 8002146:	4bbf      	ldr	r3, [pc, #764]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	e019      	b.n	8002182 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800214e:	4bbd      	ldr	r3, [pc, #756]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	4bbc      	ldr	r3, [pc, #752]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002154:	49bd      	ldr	r1, [pc, #756]	@ (800244c <HAL_RCC_OscConfig+0x690>)
 8002156:	400a      	ands	r2, r1
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7ff f969 	bl	8001430 <HAL_GetTick>
 800215e:	0003      	movs	r3, r0
 8002160:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002164:	f7ff f964 	bl	8001430 <HAL_GetTick>
 8002168:	0002      	movs	r2, r0
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e1eb      	b.n	800254e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002176:	4bb3      	ldr	r3, [pc, #716]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	2380      	movs	r3, #128	@ 0x80
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4013      	ands	r3, r2
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2208      	movs	r2, #8
 8002188:	4013      	ands	r3, r2
 800218a:	d036      	beq.n	80021fa <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d019      	beq.n	80021c8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002194:	4bab      	ldr	r3, [pc, #684]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002196:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002198:	4baa      	ldr	r3, [pc, #680]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 800219a:	2101      	movs	r1, #1
 800219c:	430a      	orrs	r2, r1
 800219e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7ff f946 	bl	8001430 <HAL_GetTick>
 80021a4:	0003      	movs	r3, r0
 80021a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021aa:	f7ff f941 	bl	8001430 <HAL_GetTick>
 80021ae:	0002      	movs	r2, r0
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e1c8      	b.n	800254e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021bc:	4ba1      	ldr	r3, [pc, #644]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80021be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c0:	2202      	movs	r2, #2
 80021c2:	4013      	ands	r3, r2
 80021c4:	d0f1      	beq.n	80021aa <HAL_RCC_OscConfig+0x3ee>
 80021c6:	e018      	b.n	80021fa <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c8:	4b9e      	ldr	r3, [pc, #632]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80021ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021cc:	4b9d      	ldr	r3, [pc, #628]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80021ce:	2101      	movs	r1, #1
 80021d0:	438a      	bics	r2, r1
 80021d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d4:	f7ff f92c 	bl	8001430 <HAL_GetTick>
 80021d8:	0003      	movs	r3, r0
 80021da:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021de:	f7ff f927 	bl	8001430 <HAL_GetTick>
 80021e2:	0002      	movs	r2, r0
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e1ae      	b.n	800254e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021f0:	4b94      	ldr	r3, [pc, #592]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80021f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021f4:	2202      	movs	r2, #2
 80021f6:	4013      	ands	r3, r2
 80021f8:	d1f1      	bne.n	80021de <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2204      	movs	r2, #4
 8002200:	4013      	ands	r3, r2
 8002202:	d100      	bne.n	8002206 <HAL_RCC_OscConfig+0x44a>
 8002204:	e0ae      	b.n	8002364 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002206:	2023      	movs	r0, #35	@ 0x23
 8002208:	183b      	adds	r3, r7, r0
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220e:	4b8d      	ldr	r3, [pc, #564]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002212:	2380      	movs	r3, #128	@ 0x80
 8002214:	055b      	lsls	r3, r3, #21
 8002216:	4013      	ands	r3, r2
 8002218:	d109      	bne.n	800222e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	4b8a      	ldr	r3, [pc, #552]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 800221c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800221e:	4b89      	ldr	r3, [pc, #548]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002220:	2180      	movs	r1, #128	@ 0x80
 8002222:	0549      	lsls	r1, r1, #21
 8002224:	430a      	orrs	r2, r1
 8002226:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002228:	183b      	adds	r3, r7, r0
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222e:	4b88      	ldr	r3, [pc, #544]	@ (8002450 <HAL_RCC_OscConfig+0x694>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	2380      	movs	r3, #128	@ 0x80
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4013      	ands	r3, r2
 8002238:	d11a      	bne.n	8002270 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223a:	4b85      	ldr	r3, [pc, #532]	@ (8002450 <HAL_RCC_OscConfig+0x694>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4b84      	ldr	r3, [pc, #528]	@ (8002450 <HAL_RCC_OscConfig+0x694>)
 8002240:	2180      	movs	r1, #128	@ 0x80
 8002242:	0049      	lsls	r1, r1, #1
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002248:	f7ff f8f2 	bl	8001430 <HAL_GetTick>
 800224c:	0003      	movs	r3, r0
 800224e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7ff f8ed 	bl	8001430 <HAL_GetTick>
 8002256:	0002      	movs	r2, r0
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b64      	cmp	r3, #100	@ 0x64
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e174      	b.n	800254e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	4b7a      	ldr	r3, [pc, #488]	@ (8002450 <HAL_RCC_OscConfig+0x694>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	2380      	movs	r3, #128	@ 0x80
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4013      	ands	r3, r2
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	2380      	movs	r3, #128	@ 0x80
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	429a      	cmp	r2, r3
 800227a:	d107      	bne.n	800228c <HAL_RCC_OscConfig+0x4d0>
 800227c:	4b71      	ldr	r3, [pc, #452]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 800227e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002280:	4b70      	ldr	r3, [pc, #448]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002282:	2180      	movs	r1, #128	@ 0x80
 8002284:	0049      	lsls	r1, r1, #1
 8002286:	430a      	orrs	r2, r1
 8002288:	651a      	str	r2, [r3, #80]	@ 0x50
 800228a:	e031      	b.n	80022f0 <HAL_RCC_OscConfig+0x534>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10c      	bne.n	80022ae <HAL_RCC_OscConfig+0x4f2>
 8002294:	4b6b      	ldr	r3, [pc, #428]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002296:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002298:	4b6a      	ldr	r3, [pc, #424]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 800229a:	496c      	ldr	r1, [pc, #432]	@ (800244c <HAL_RCC_OscConfig+0x690>)
 800229c:	400a      	ands	r2, r1
 800229e:	651a      	str	r2, [r3, #80]	@ 0x50
 80022a0:	4b68      	ldr	r3, [pc, #416]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80022a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022a4:	4b67      	ldr	r3, [pc, #412]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80022a6:	496b      	ldr	r1, [pc, #428]	@ (8002454 <HAL_RCC_OscConfig+0x698>)
 80022a8:	400a      	ands	r2, r1
 80022aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80022ac:	e020      	b.n	80022f0 <HAL_RCC_OscConfig+0x534>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	23a0      	movs	r3, #160	@ 0xa0
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d10e      	bne.n	80022d8 <HAL_RCC_OscConfig+0x51c>
 80022ba:	4b62      	ldr	r3, [pc, #392]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80022bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022be:	4b61      	ldr	r3, [pc, #388]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80022c0:	2180      	movs	r1, #128	@ 0x80
 80022c2:	00c9      	lsls	r1, r1, #3
 80022c4:	430a      	orrs	r2, r1
 80022c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80022c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80022ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022cc:	4b5d      	ldr	r3, [pc, #372]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80022ce:	2180      	movs	r1, #128	@ 0x80
 80022d0:	0049      	lsls	r1, r1, #1
 80022d2:	430a      	orrs	r2, r1
 80022d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80022d6:	e00b      	b.n	80022f0 <HAL_RCC_OscConfig+0x534>
 80022d8:	4b5a      	ldr	r3, [pc, #360]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80022da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022dc:	4b59      	ldr	r3, [pc, #356]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80022de:	495b      	ldr	r1, [pc, #364]	@ (800244c <HAL_RCC_OscConfig+0x690>)
 80022e0:	400a      	ands	r2, r1
 80022e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80022e4:	4b57      	ldr	r3, [pc, #348]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80022e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022e8:	4b56      	ldr	r3, [pc, #344]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80022ea:	495a      	ldr	r1, [pc, #360]	@ (8002454 <HAL_RCC_OscConfig+0x698>)
 80022ec:	400a      	ands	r2, r1
 80022ee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d015      	beq.n	8002324 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f8:	f7ff f89a 	bl	8001430 <HAL_GetTick>
 80022fc:	0003      	movs	r3, r0
 80022fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002300:	e009      	b.n	8002316 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7ff f895 	bl	8001430 <HAL_GetTick>
 8002306:	0002      	movs	r2, r0
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	4a52      	ldr	r2, [pc, #328]	@ (8002458 <HAL_RCC_OscConfig+0x69c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e11b      	b.n	800254e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002316:	4b4b      	ldr	r3, [pc, #300]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002318:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800231a:	2380      	movs	r3, #128	@ 0x80
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4013      	ands	r3, r2
 8002320:	d0ef      	beq.n	8002302 <HAL_RCC_OscConfig+0x546>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002324:	f7ff f884 	bl	8001430 <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800232c:	e009      	b.n	8002342 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7ff f87f 	bl	8001430 <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	4a47      	ldr	r2, [pc, #284]	@ (8002458 <HAL_RCC_OscConfig+0x69c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e105      	b.n	800254e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002342:	4b40      	ldr	r3, [pc, #256]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002344:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002346:	2380      	movs	r3, #128	@ 0x80
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4013      	ands	r3, r2
 800234c:	d1ef      	bne.n	800232e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800234e:	2323      	movs	r3, #35	@ 0x23
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d105      	bne.n	8002364 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002358:	4b3a      	ldr	r3, [pc, #232]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 800235a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800235c:	4b39      	ldr	r3, [pc, #228]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 800235e:	493f      	ldr	r1, [pc, #252]	@ (800245c <HAL_RCC_OscConfig+0x6a0>)
 8002360:	400a      	ands	r2, r1
 8002362:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2220      	movs	r2, #32
 800236a:	4013      	ands	r3, r2
 800236c:	d049      	beq.n	8002402 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d026      	beq.n	80023c4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002376:	4b33      	ldr	r3, [pc, #204]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	4b32      	ldr	r3, [pc, #200]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 800237c:	2101      	movs	r1, #1
 800237e:	430a      	orrs	r2, r1
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	4b30      	ldr	r3, [pc, #192]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002386:	4b2f      	ldr	r3, [pc, #188]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002388:	2101      	movs	r1, #1
 800238a:	430a      	orrs	r2, r1
 800238c:	635a      	str	r2, [r3, #52]	@ 0x34
 800238e:	4b34      	ldr	r3, [pc, #208]	@ (8002460 <HAL_RCC_OscConfig+0x6a4>)
 8002390:	6a1a      	ldr	r2, [r3, #32]
 8002392:	4b33      	ldr	r3, [pc, #204]	@ (8002460 <HAL_RCC_OscConfig+0x6a4>)
 8002394:	2180      	movs	r1, #128	@ 0x80
 8002396:	0189      	lsls	r1, r1, #6
 8002398:	430a      	orrs	r2, r1
 800239a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff f848 	bl	8001430 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023a6:	f7ff f843 	bl	8001430 <HAL_GetTick>
 80023aa:	0002      	movs	r2, r0
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e0ca      	b.n	800254e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023b8:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2202      	movs	r2, #2
 80023be:	4013      	ands	r3, r2
 80023c0:	d0f1      	beq.n	80023a6 <HAL_RCC_OscConfig+0x5ea>
 80023c2:	e01e      	b.n	8002402 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80023c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80023ca:	2101      	movs	r1, #1
 80023cc:	438a      	bics	r2, r1
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	4b23      	ldr	r3, [pc, #140]	@ (8002460 <HAL_RCC_OscConfig+0x6a4>)
 80023d2:	6a1a      	ldr	r2, [r3, #32]
 80023d4:	4b22      	ldr	r3, [pc, #136]	@ (8002460 <HAL_RCC_OscConfig+0x6a4>)
 80023d6:	4923      	ldr	r1, [pc, #140]	@ (8002464 <HAL_RCC_OscConfig+0x6a8>)
 80023d8:	400a      	ands	r2, r1
 80023da:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff f828 	bl	8001430 <HAL_GetTick>
 80023e0:	0003      	movs	r3, r0
 80023e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023e6:	f7ff f823 	bl	8001430 <HAL_GetTick>
 80023ea:	0002      	movs	r2, r0
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e0aa      	b.n	800254e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023f8:	4b12      	ldr	r3, [pc, #72]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2202      	movs	r2, #2
 80023fe:	4013      	ands	r3, r2
 8002400:	d1f1      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002406:	2b00      	cmp	r3, #0
 8002408:	d100      	bne.n	800240c <HAL_RCC_OscConfig+0x650>
 800240a:	e09f      	b.n	800254c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	2b0c      	cmp	r3, #12
 8002410:	d100      	bne.n	8002414 <HAL_RCC_OscConfig+0x658>
 8002412:	e078      	b.n	8002506 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002418:	2b02      	cmp	r3, #2
 800241a:	d159      	bne.n	80024d0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241c:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002422:	4911      	ldr	r1, [pc, #68]	@ (8002468 <HAL_RCC_OscConfig+0x6ac>)
 8002424:	400a      	ands	r2, r1
 8002426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7ff f802 	bl	8001430 <HAL_GetTick>
 800242c:	0003      	movs	r3, r0
 800242e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002430:	e01c      	b.n	800246c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002432:	f7fe fffd 	bl	8001430 <HAL_GetTick>
 8002436:	0002      	movs	r2, r0
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d915      	bls.n	800246c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e084      	b.n	800254e <HAL_RCC_OscConfig+0x792>
 8002444:	40021000 	.word	0x40021000
 8002448:	ffff1fff 	.word	0xffff1fff
 800244c:	fffffeff 	.word	0xfffffeff
 8002450:	40007000 	.word	0x40007000
 8002454:	fffffbff 	.word	0xfffffbff
 8002458:	00001388 	.word	0x00001388
 800245c:	efffffff 	.word	0xefffffff
 8002460:	40010000 	.word	0x40010000
 8002464:	ffffdfff 	.word	0xffffdfff
 8002468:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800246c:	4b3a      	ldr	r3, [pc, #232]	@ (8002558 <HAL_RCC_OscConfig+0x79c>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2380      	movs	r3, #128	@ 0x80
 8002472:	049b      	lsls	r3, r3, #18
 8002474:	4013      	ands	r3, r2
 8002476:	d1dc      	bne.n	8002432 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002478:	4b37      	ldr	r3, [pc, #220]	@ (8002558 <HAL_RCC_OscConfig+0x79c>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4a37      	ldr	r2, [pc, #220]	@ (800255c <HAL_RCC_OscConfig+0x7a0>)
 800247e:	4013      	ands	r3, r2
 8002480:	0019      	movs	r1, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002490:	431a      	orrs	r2, r3
 8002492:	4b31      	ldr	r3, [pc, #196]	@ (8002558 <HAL_RCC_OscConfig+0x79c>)
 8002494:	430a      	orrs	r2, r1
 8002496:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002498:	4b2f      	ldr	r3, [pc, #188]	@ (8002558 <HAL_RCC_OscConfig+0x79c>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b2e      	ldr	r3, [pc, #184]	@ (8002558 <HAL_RCC_OscConfig+0x79c>)
 800249e:	2180      	movs	r1, #128	@ 0x80
 80024a0:	0449      	lsls	r1, r1, #17
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7fe ffc3 	bl	8001430 <HAL_GetTick>
 80024aa:	0003      	movs	r3, r0
 80024ac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe ffbe 	bl	8001430 <HAL_GetTick>
 80024b4:	0002      	movs	r2, r0
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e045      	b.n	800254e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024c2:	4b25      	ldr	r3, [pc, #148]	@ (8002558 <HAL_RCC_OscConfig+0x79c>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2380      	movs	r3, #128	@ 0x80
 80024c8:	049b      	lsls	r3, r3, #18
 80024ca:	4013      	ands	r3, r2
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x6f4>
 80024ce:	e03d      	b.n	800254c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d0:	4b21      	ldr	r3, [pc, #132]	@ (8002558 <HAL_RCC_OscConfig+0x79c>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b20      	ldr	r3, [pc, #128]	@ (8002558 <HAL_RCC_OscConfig+0x79c>)
 80024d6:	4922      	ldr	r1, [pc, #136]	@ (8002560 <HAL_RCC_OscConfig+0x7a4>)
 80024d8:	400a      	ands	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe ffa8 	bl	8001430 <HAL_GetTick>
 80024e0:	0003      	movs	r3, r0
 80024e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e6:	f7fe ffa3 	bl	8001430 <HAL_GetTick>
 80024ea:	0002      	movs	r2, r0
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e02a      	b.n	800254e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024f8:	4b17      	ldr	r3, [pc, #92]	@ (8002558 <HAL_RCC_OscConfig+0x79c>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	@ 0x80
 80024fe:	049b      	lsls	r3, r3, #18
 8002500:	4013      	ands	r3, r2
 8002502:	d1f0      	bne.n	80024e6 <HAL_RCC_OscConfig+0x72a>
 8002504:	e022      	b.n	800254c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e01d      	b.n	800254e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002512:	4b11      	ldr	r3, [pc, #68]	@ (8002558 <HAL_RCC_OscConfig+0x79c>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	2380      	movs	r3, #128	@ 0x80
 800251c:	025b      	lsls	r3, r3, #9
 800251e:	401a      	ands	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002524:	429a      	cmp	r2, r3
 8002526:	d10f      	bne.n	8002548 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	23f0      	movs	r3, #240	@ 0xf0
 800252c:	039b      	lsls	r3, r3, #14
 800252e:	401a      	ands	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d107      	bne.n	8002548 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	23c0      	movs	r3, #192	@ 0xc0
 800253c:	041b      	lsls	r3, r3, #16
 800253e:	401a      	ands	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	b00a      	add	sp, #40	@ 0x28
 8002554:	bdb0      	pop	{r4, r5, r7, pc}
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	40021000 	.word	0x40021000
 800255c:	ff02ffff 	.word	0xff02ffff
 8002560:	feffffff 	.word	0xfeffffff

08002564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002564:	b5b0      	push	{r4, r5, r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e128      	b.n	80027ca <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002578:	4b96      	ldr	r3, [pc, #600]	@ (80027d4 <HAL_RCC_ClockConfig+0x270>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2201      	movs	r2, #1
 800257e:	4013      	ands	r3, r2
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d91e      	bls.n	80025c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b93      	ldr	r3, [pc, #588]	@ (80027d4 <HAL_RCC_ClockConfig+0x270>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	4393      	bics	r3, r2
 800258e:	0019      	movs	r1, r3
 8002590:	4b90      	ldr	r3, [pc, #576]	@ (80027d4 <HAL_RCC_ClockConfig+0x270>)
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002598:	f7fe ff4a 	bl	8001430 <HAL_GetTick>
 800259c:	0003      	movs	r3, r0
 800259e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a0:	e009      	b.n	80025b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a2:	f7fe ff45 	bl	8001430 <HAL_GetTick>
 80025a6:	0002      	movs	r2, r0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	4a8a      	ldr	r2, [pc, #552]	@ (80027d8 <HAL_RCC_ClockConfig+0x274>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e109      	b.n	80027ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b87      	ldr	r3, [pc, #540]	@ (80027d4 <HAL_RCC_ClockConfig+0x270>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2201      	movs	r2, #1
 80025bc:	4013      	ands	r3, r2
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d1ee      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2202      	movs	r2, #2
 80025ca:	4013      	ands	r3, r2
 80025cc:	d009      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ce:	4b83      	ldr	r3, [pc, #524]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	22f0      	movs	r2, #240	@ 0xf0
 80025d4:	4393      	bics	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	4b7f      	ldr	r3, [pc, #508]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 80025de:	430a      	orrs	r2, r1
 80025e0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2201      	movs	r2, #1
 80025e8:	4013      	ands	r3, r2
 80025ea:	d100      	bne.n	80025ee <HAL_RCC_ClockConfig+0x8a>
 80025ec:	e089      	b.n	8002702 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025f6:	4b79      	ldr	r3, [pc, #484]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	2380      	movs	r3, #128	@ 0x80
 80025fc:	029b      	lsls	r3, r3, #10
 80025fe:	4013      	ands	r3, r2
 8002600:	d120      	bne.n	8002644 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e0e1      	b.n	80027ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b03      	cmp	r3, #3
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800260e:	4b73      	ldr	r3, [pc, #460]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	2380      	movs	r3, #128	@ 0x80
 8002614:	049b      	lsls	r3, r3, #18
 8002616:	4013      	ands	r3, r2
 8002618:	d114      	bne.n	8002644 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0d5      	b.n	80027ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d106      	bne.n	8002634 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002626:	4b6d      	ldr	r3, [pc, #436]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2204      	movs	r2, #4
 800262c:	4013      	ands	r3, r2
 800262e:	d109      	bne.n	8002644 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0ca      	b.n	80027ca <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002634:	4b69      	ldr	r3, [pc, #420]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4013      	ands	r3, r2
 800263e:	d101      	bne.n	8002644 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0c2      	b.n	80027ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002644:	4b65      	ldr	r3, [pc, #404]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2203      	movs	r2, #3
 800264a:	4393      	bics	r3, r2
 800264c:	0019      	movs	r1, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	4b62      	ldr	r3, [pc, #392]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 8002654:	430a      	orrs	r2, r1
 8002656:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002658:	f7fe feea 	bl	8001430 <HAL_GetTick>
 800265c:	0003      	movs	r3, r0
 800265e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d111      	bne.n	800268c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002668:	e009      	b.n	800267e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266a:	f7fe fee1 	bl	8001430 <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	4a58      	ldr	r2, [pc, #352]	@ (80027d8 <HAL_RCC_ClockConfig+0x274>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e0a5      	b.n	80027ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800267e:	4b57      	ldr	r3, [pc, #348]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	220c      	movs	r2, #12
 8002684:	4013      	ands	r3, r2
 8002686:	2b08      	cmp	r3, #8
 8002688:	d1ef      	bne.n	800266a <HAL_RCC_ClockConfig+0x106>
 800268a:	e03a      	b.n	8002702 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d111      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002694:	e009      	b.n	80026aa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002696:	f7fe fecb 	bl	8001430 <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	4a4d      	ldr	r2, [pc, #308]	@ (80027d8 <HAL_RCC_ClockConfig+0x274>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e08f      	b.n	80027ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026aa:	4b4c      	ldr	r3, [pc, #304]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	220c      	movs	r2, #12
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	d1ef      	bne.n	8002696 <HAL_RCC_ClockConfig+0x132>
 80026b6:	e024      	b.n	8002702 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d11b      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026c0:	e009      	b.n	80026d6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c2:	f7fe feb5 	bl	8001430 <HAL_GetTick>
 80026c6:	0002      	movs	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	4a42      	ldr	r2, [pc, #264]	@ (80027d8 <HAL_RCC_ClockConfig+0x274>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e079      	b.n	80027ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026d6:	4b41      	ldr	r3, [pc, #260]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	220c      	movs	r2, #12
 80026dc:	4013      	ands	r3, r2
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d1ef      	bne.n	80026c2 <HAL_RCC_ClockConfig+0x15e>
 80026e2:	e00e      	b.n	8002702 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e4:	f7fe fea4 	bl	8001430 <HAL_GetTick>
 80026e8:	0002      	movs	r2, r0
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	4a3a      	ldr	r2, [pc, #232]	@ (80027d8 <HAL_RCC_ClockConfig+0x274>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e068      	b.n	80027ca <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80026f8:	4b38      	ldr	r3, [pc, #224]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	220c      	movs	r2, #12
 80026fe:	4013      	ands	r3, r2
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002702:	4b34      	ldr	r3, [pc, #208]	@ (80027d4 <HAL_RCC_ClockConfig+0x270>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	4013      	ands	r3, r2
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d21e      	bcs.n	800274e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002710:	4b30      	ldr	r3, [pc, #192]	@ (80027d4 <HAL_RCC_ClockConfig+0x270>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2201      	movs	r2, #1
 8002716:	4393      	bics	r3, r2
 8002718:	0019      	movs	r1, r3
 800271a:	4b2e      	ldr	r3, [pc, #184]	@ (80027d4 <HAL_RCC_ClockConfig+0x270>)
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002722:	f7fe fe85 	bl	8001430 <HAL_GetTick>
 8002726:	0003      	movs	r3, r0
 8002728:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	e009      	b.n	8002740 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272c:	f7fe fe80 	bl	8001430 <HAL_GetTick>
 8002730:	0002      	movs	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	4a28      	ldr	r2, [pc, #160]	@ (80027d8 <HAL_RCC_ClockConfig+0x274>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e044      	b.n	80027ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002740:	4b24      	ldr	r3, [pc, #144]	@ (80027d4 <HAL_RCC_ClockConfig+0x270>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2201      	movs	r2, #1
 8002746:	4013      	ands	r3, r2
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d1ee      	bne.n	800272c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2204      	movs	r2, #4
 8002754:	4013      	ands	r3, r2
 8002756:	d009      	beq.n	800276c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002758:	4b20      	ldr	r3, [pc, #128]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4a20      	ldr	r2, [pc, #128]	@ (80027e0 <HAL_RCC_ClockConfig+0x27c>)
 800275e:	4013      	ands	r3, r2
 8002760:	0019      	movs	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	4b1d      	ldr	r3, [pc, #116]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 8002768:	430a      	orrs	r2, r1
 800276a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2208      	movs	r2, #8
 8002772:	4013      	ands	r3, r2
 8002774:	d00a      	beq.n	800278c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002776:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	4a1a      	ldr	r2, [pc, #104]	@ (80027e4 <HAL_RCC_ClockConfig+0x280>)
 800277c:	4013      	ands	r3, r2
 800277e:	0019      	movs	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	00da      	lsls	r2, r3, #3
 8002786:	4b15      	ldr	r3, [pc, #84]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 8002788:	430a      	orrs	r2, r1
 800278a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800278c:	f000 f832 	bl	80027f4 <HAL_RCC_GetSysClockFreq>
 8002790:	0001      	movs	r1, r0
 8002792:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <HAL_RCC_ClockConfig+0x278>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	220f      	movs	r2, #15
 800279a:	4013      	ands	r3, r2
 800279c:	4a12      	ldr	r2, [pc, #72]	@ (80027e8 <HAL_RCC_ClockConfig+0x284>)
 800279e:	5cd3      	ldrb	r3, [r2, r3]
 80027a0:	000a      	movs	r2, r1
 80027a2:	40da      	lsrs	r2, r3
 80027a4:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <HAL_RCC_ClockConfig+0x288>)
 80027a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027a8:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <HAL_RCC_ClockConfig+0x28c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	250b      	movs	r5, #11
 80027ae:	197c      	adds	r4, r7, r5
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7fe fdf7 	bl	80013a4 <HAL_InitTick>
 80027b6:	0003      	movs	r3, r0
 80027b8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80027ba:	197b      	adds	r3, r7, r5
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80027c2:	197b      	adds	r3, r7, r5
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	e000      	b.n	80027ca <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b004      	add	sp, #16
 80027d0:	bdb0      	pop	{r4, r5, r7, pc}
 80027d2:	46c0      	nop			@ (mov r8, r8)
 80027d4:	40022000 	.word	0x40022000
 80027d8:	00001388 	.word	0x00001388
 80027dc:	40021000 	.word	0x40021000
 80027e0:	fffff8ff 	.word	0xfffff8ff
 80027e4:	ffffc7ff 	.word	0xffffc7ff
 80027e8:	08005a3c 	.word	0x08005a3c
 80027ec:	20000000 	.word	0x20000000
 80027f0:	20000004 	.word	0x20000004

080027f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f4:	b5b0      	push	{r4, r5, r7, lr}
 80027f6:	b08e      	sub	sp, #56	@ 0x38
 80027f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80027fa:	4b4c      	ldr	r3, [pc, #304]	@ (800292c <HAL_RCC_GetSysClockFreq+0x138>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002800:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002802:	230c      	movs	r3, #12
 8002804:	4013      	ands	r3, r2
 8002806:	2b0c      	cmp	r3, #12
 8002808:	d014      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x40>
 800280a:	d900      	bls.n	800280e <HAL_RCC_GetSysClockFreq+0x1a>
 800280c:	e07b      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0x112>
 800280e:	2b04      	cmp	r3, #4
 8002810:	d002      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x24>
 8002812:	2b08      	cmp	r3, #8
 8002814:	d00b      	beq.n	800282e <HAL_RCC_GetSysClockFreq+0x3a>
 8002816:	e076      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002818:	4b44      	ldr	r3, [pc, #272]	@ (800292c <HAL_RCC_GetSysClockFreq+0x138>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2210      	movs	r2, #16
 800281e:	4013      	ands	r3, r2
 8002820:	d002      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002822:	4b43      	ldr	r3, [pc, #268]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002824:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002826:	e07c      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002828:	4b42      	ldr	r3, [pc, #264]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x140>)
 800282a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800282c:	e079      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800282e:	4b42      	ldr	r3, [pc, #264]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x144>)
 8002830:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002832:	e076      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002836:	0c9a      	lsrs	r2, r3, #18
 8002838:	230f      	movs	r3, #15
 800283a:	401a      	ands	r2, r3
 800283c:	4b3f      	ldr	r3, [pc, #252]	@ (800293c <HAL_RCC_GetSysClockFreq+0x148>)
 800283e:	5c9b      	ldrb	r3, [r3, r2]
 8002840:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002844:	0d9a      	lsrs	r2, r3, #22
 8002846:	2303      	movs	r3, #3
 8002848:	4013      	ands	r3, r2
 800284a:	3301      	adds	r3, #1
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800284e:	4b37      	ldr	r3, [pc, #220]	@ (800292c <HAL_RCC_GetSysClockFreq+0x138>)
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	2380      	movs	r3, #128	@ 0x80
 8002854:	025b      	lsls	r3, r3, #9
 8002856:	4013      	ands	r3, r2
 8002858:	d01a      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800285a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	4a35      	ldr	r2, [pc, #212]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x144>)
 8002864:	2300      	movs	r3, #0
 8002866:	69b8      	ldr	r0, [r7, #24]
 8002868:	69f9      	ldr	r1, [r7, #28]
 800286a:	f7fd fcf9 	bl	8000260 <__aeabi_lmul>
 800286e:	0002      	movs	r2, r0
 8002870:	000b      	movs	r3, r1
 8002872:	0010      	movs	r0, r2
 8002874:	0019      	movs	r1, r3
 8002876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f7fd fccd 	bl	8000220 <__aeabi_uldivmod>
 8002886:	0002      	movs	r2, r0
 8002888:	000b      	movs	r3, r1
 800288a:	0013      	movs	r3, r2
 800288c:	637b      	str	r3, [r7, #52]	@ 0x34
 800288e:	e037      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002890:	4b26      	ldr	r3, [pc, #152]	@ (800292c <HAL_RCC_GetSysClockFreq+0x138>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2210      	movs	r2, #16
 8002896:	4013      	ands	r3, r2
 8002898:	d01a      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800289a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	4a23      	ldr	r2, [pc, #140]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x13c>)
 80028a4:	2300      	movs	r3, #0
 80028a6:	68b8      	ldr	r0, [r7, #8]
 80028a8:	68f9      	ldr	r1, [r7, #12]
 80028aa:	f7fd fcd9 	bl	8000260 <__aeabi_lmul>
 80028ae:	0002      	movs	r2, r0
 80028b0:	000b      	movs	r3, r1
 80028b2:	0010      	movs	r0, r2
 80028b4:	0019      	movs	r1, r3
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f7fd fcad 	bl	8000220 <__aeabi_uldivmod>
 80028c6:	0002      	movs	r2, r0
 80028c8:	000b      	movs	r3, r1
 80028ca:	0013      	movs	r3, r2
 80028cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80028ce:	e017      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d2:	0018      	movs	r0, r3
 80028d4:	2300      	movs	r3, #0
 80028d6:	0019      	movs	r1, r3
 80028d8:	4a16      	ldr	r2, [pc, #88]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x140>)
 80028da:	2300      	movs	r3, #0
 80028dc:	f7fd fcc0 	bl	8000260 <__aeabi_lmul>
 80028e0:	0002      	movs	r2, r0
 80028e2:	000b      	movs	r3, r1
 80028e4:	0010      	movs	r0, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	001c      	movs	r4, r3
 80028ec:	2300      	movs	r3, #0
 80028ee:	001d      	movs	r5, r3
 80028f0:	0022      	movs	r2, r4
 80028f2:	002b      	movs	r3, r5
 80028f4:	f7fd fc94 	bl	8000220 <__aeabi_uldivmod>
 80028f8:	0002      	movs	r2, r0
 80028fa:	000b      	movs	r3, r1
 80028fc:	0013      	movs	r3, r2
 80028fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002902:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002904:	e00d      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002906:	4b09      	ldr	r3, [pc, #36]	@ (800292c <HAL_RCC_GetSysClockFreq+0x138>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	0b5b      	lsrs	r3, r3, #13
 800290c:	2207      	movs	r2, #7
 800290e:	4013      	ands	r3, r2
 8002910:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	3301      	adds	r3, #1
 8002916:	2280      	movs	r2, #128	@ 0x80
 8002918:	0212      	lsls	r2, r2, #8
 800291a:	409a      	lsls	r2, r3
 800291c:	0013      	movs	r3, r2
 800291e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002920:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002924:	0018      	movs	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	b00e      	add	sp, #56	@ 0x38
 800292a:	bdb0      	pop	{r4, r5, r7, pc}
 800292c:	40021000 	.word	0x40021000
 8002930:	003d0900 	.word	0x003d0900
 8002934:	00f42400 	.word	0x00f42400
 8002938:	007a1200 	.word	0x007a1200
 800293c:	08005a54 	.word	0x08005a54

08002940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002944:	4b02      	ldr	r3, [pc, #8]	@ (8002950 <HAL_RCC_GetHCLKFreq+0x10>)
 8002946:	681b      	ldr	r3, [r3, #0]
}
 8002948:	0018      	movs	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	20000000 	.word	0x20000000

08002954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002958:	f7ff fff2 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 800295c:	0001      	movs	r1, r0
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	2207      	movs	r2, #7
 8002966:	4013      	ands	r3, r2
 8002968:	4a04      	ldr	r2, [pc, #16]	@ (800297c <HAL_RCC_GetPCLK1Freq+0x28>)
 800296a:	5cd3      	ldrb	r3, [r2, r3]
 800296c:	40d9      	lsrs	r1, r3
 800296e:	000b      	movs	r3, r1
}
 8002970:	0018      	movs	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	46c0      	nop			@ (mov r8, r8)
 8002978:	40021000 	.word	0x40021000
 800297c:	08005a4c 	.word	0x08005a4c

08002980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002984:	f7ff ffdc 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 8002988:	0001      	movs	r1, r0
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	0adb      	lsrs	r3, r3, #11
 8002990:	2207      	movs	r2, #7
 8002992:	4013      	ands	r3, r2
 8002994:	4a04      	ldr	r2, [pc, #16]	@ (80029a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002996:	5cd3      	ldrb	r3, [r2, r3]
 8002998:	40d9      	lsrs	r1, r3
 800299a:	000b      	movs	r3, r1
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			@ (mov r8, r8)
 80029a4:	40021000 	.word	0x40021000
 80029a8:	08005a4c 	.word	0x08005a4c

080029ac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80029b4:	2317      	movs	r3, #23
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2220      	movs	r2, #32
 80029c2:	4013      	ands	r3, r2
 80029c4:	d106      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	2380      	movs	r3, #128	@ 0x80
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	4013      	ands	r3, r2
 80029d0:	d100      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80029d2:	e104      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d4:	4bb9      	ldr	r3, [pc, #740]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029d8:	2380      	movs	r3, #128	@ 0x80
 80029da:	055b      	lsls	r3, r3, #21
 80029dc:	4013      	ands	r3, r2
 80029de:	d10a      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e0:	4bb6      	ldr	r3, [pc, #728]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029e4:	4bb5      	ldr	r3, [pc, #724]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029e6:	2180      	movs	r1, #128	@ 0x80
 80029e8:	0549      	lsls	r1, r1, #21
 80029ea:	430a      	orrs	r2, r1
 80029ec:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80029ee:	2317      	movs	r3, #23
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	4bb2      	ldr	r3, [pc, #712]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	2380      	movs	r3, #128	@ 0x80
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4013      	ands	r3, r2
 8002a00:	d11a      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a02:	4baf      	ldr	r3, [pc, #700]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4bae      	ldr	r3, [pc, #696]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002a08:	2180      	movs	r1, #128	@ 0x80
 8002a0a:	0049      	lsls	r1, r1, #1
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a10:	f7fe fd0e 	bl	8001430 <HAL_GetTick>
 8002a14:	0003      	movs	r3, r0
 8002a16:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	e008      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1a:	f7fe fd09 	bl	8001430 <HAL_GetTick>
 8002a1e:	0002      	movs	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b64      	cmp	r3, #100	@ 0x64
 8002a26:	d901      	bls.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e143      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	4ba4      	ldr	r3, [pc, #656]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2380      	movs	r3, #128	@ 0x80
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4013      	ands	r3, r2
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a38:	4ba0      	ldr	r3, [pc, #640]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	23c0      	movs	r3, #192	@ 0xc0
 8002a3e:	039b      	lsls	r3, r3, #14
 8002a40:	4013      	ands	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	23c0      	movs	r3, #192	@ 0xc0
 8002a4a:	039b      	lsls	r3, r3, #14
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d107      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	23c0      	movs	r3, #192	@ 0xc0
 8002a5a:	039b      	lsls	r3, r3, #14
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d013      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	23c0      	movs	r3, #192	@ 0xc0
 8002a6a:	029b      	lsls	r3, r3, #10
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	23c0      	movs	r3, #192	@ 0xc0
 8002a70:	029b      	lsls	r3, r3, #10
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d10a      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a76:	4b91      	ldr	r3, [pc, #580]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	2380      	movs	r3, #128	@ 0x80
 8002a7c:	029b      	lsls	r3, r3, #10
 8002a7e:	401a      	ands	r2, r3
 8002a80:	2380      	movs	r3, #128	@ 0x80
 8002a82:	029b      	lsls	r3, r3, #10
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d101      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e113      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002a8c:	4b8b      	ldr	r3, [pc, #556]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a90:	23c0      	movs	r3, #192	@ 0xc0
 8002a92:	029b      	lsls	r3, r3, #10
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d049      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	23c0      	movs	r3, #192	@ 0xc0
 8002aa4:	029b      	lsls	r3, r3, #10
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d004      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d10d      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	23c0      	movs	r3, #192	@ 0xc0
 8002abe:	029b      	lsls	r3, r3, #10
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d034      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	2380      	movs	r3, #128	@ 0x80
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d02e      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002ad4:	4b79      	ldr	r3, [pc, #484]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad8:	4a7a      	ldr	r2, [pc, #488]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ade:	4b77      	ldr	r3, [pc, #476]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ae0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ae2:	4b76      	ldr	r3, [pc, #472]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ae4:	2180      	movs	r1, #128	@ 0x80
 8002ae6:	0309      	lsls	r1, r1, #12
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aec:	4b73      	ldr	r3, [pc, #460]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002aee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002af0:	4b72      	ldr	r3, [pc, #456]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002af2:	4975      	ldr	r1, [pc, #468]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002af4:	400a      	ands	r2, r1
 8002af6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002af8:	4b70      	ldr	r3, [pc, #448]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	2380      	movs	r3, #128	@ 0x80
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4013      	ands	r3, r2
 8002b06:	d014      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fc92 	bl	8001430 <HAL_GetTick>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b10:	e009      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7fe fc8d 	bl	8001430 <HAL_GetTick>
 8002b16:	0002      	movs	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	4a6b      	ldr	r2, [pc, #428]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e0c6      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b26:	4b65      	ldr	r3, [pc, #404]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b2a:	2380      	movs	r3, #128	@ 0x80
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d0ef      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	2380      	movs	r3, #128	@ 0x80
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d01f      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	23c0      	movs	r3, #192	@ 0xc0
 8002b44:	029b      	lsls	r3, r3, #10
 8002b46:	401a      	ands	r2, r3
 8002b48:	23c0      	movs	r3, #192	@ 0xc0
 8002b4a:	029b      	lsls	r3, r3, #10
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d10c      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002b50:	4b5a      	ldr	r3, [pc, #360]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a5e      	ldr	r2, [pc, #376]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	0019      	movs	r1, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	23c0      	movs	r3, #192	@ 0xc0
 8002b60:	039b      	lsls	r3, r3, #14
 8002b62:	401a      	ands	r2, r3
 8002b64:	4b55      	ldr	r3, [pc, #340]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	4b54      	ldr	r3, [pc, #336]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b6c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	23c0      	movs	r3, #192	@ 0xc0
 8002b74:	029b      	lsls	r3, r3, #10
 8002b76:	401a      	ands	r2, r3
 8002b78:	4b50      	ldr	r3, [pc, #320]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2220      	movs	r2, #32
 8002b84:	4013      	ands	r3, r2
 8002b86:	d01f      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	23c0      	movs	r3, #192	@ 0xc0
 8002b8e:	029b      	lsls	r3, r3, #10
 8002b90:	401a      	ands	r2, r3
 8002b92:	23c0      	movs	r3, #192	@ 0xc0
 8002b94:	029b      	lsls	r3, r3, #10
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002b9a:	4b48      	ldr	r3, [pc, #288]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a4c      	ldr	r2, [pc, #304]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	23c0      	movs	r3, #192	@ 0xc0
 8002baa:	039b      	lsls	r3, r3, #14
 8002bac:	401a      	ands	r2, r3
 8002bae:	4b43      	ldr	r3, [pc, #268]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	4b41      	ldr	r3, [pc, #260]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bb6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	23c0      	movs	r3, #192	@ 0xc0
 8002bbe:	029b      	lsls	r3, r3, #10
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	4b3e      	ldr	r3, [pc, #248]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bc8:	2317      	movs	r3, #23
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d105      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bd6:	4b39      	ldr	r3, [pc, #228]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bd8:	493e      	ldr	r1, [pc, #248]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002bda:	400a      	ands	r2, r1
 8002bdc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2201      	movs	r2, #1
 8002be4:	4013      	ands	r3, r2
 8002be6:	d009      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002be8:	4b34      	ldr	r3, [pc, #208]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bec:	2203      	movs	r2, #3
 8002bee:	4393      	bics	r3, r2
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	4b31      	ldr	r3, [pc, #196]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2202      	movs	r2, #2
 8002c02:	4013      	ands	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c06:	4b2d      	ldr	r3, [pc, #180]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	4b29      	ldr	r3, [pc, #164]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c16:	430a      	orrs	r2, r1
 8002c18:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2204      	movs	r2, #4
 8002c20:	4013      	ands	r3, r2
 8002c22:	d009      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c24:	4b25      	ldr	r3, [pc, #148]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c28:	4a2b      	ldr	r2, [pc, #172]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	4b22      	ldr	r3, [pc, #136]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c34:	430a      	orrs	r2, r1
 8002c36:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d009      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c42:	4b1e      	ldr	r3, [pc, #120]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c46:	4a25      	ldr	r2, [pc, #148]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	4b1a      	ldr	r3, [pc, #104]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c52:	430a      	orrs	r2, r1
 8002c54:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	2380      	movs	r3, #128	@ 0x80
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c62:	4b16      	ldr	r3, [pc, #88]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c66:	4a17      	ldr	r2, [pc, #92]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69da      	ldr	r2, [r3, #28]
 8002c70:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c72:	430a      	orrs	r2, r1
 8002c74:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2240      	movs	r2, #64	@ 0x40
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d009      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c80:	4b0e      	ldr	r3, [pc, #56]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c84:	4a16      	ldr	r2, [pc, #88]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2280      	movs	r2, #128	@ 0x80
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002c9e:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca2:	4a10      	ldr	r2, [pc, #64]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1a      	ldr	r2, [r3, #32]
 8002cac:	4b03      	ldr	r3, [pc, #12]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b006      	add	sp, #24
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	fffcffff 	.word	0xfffcffff
 8002cc8:	fff7ffff 	.word	0xfff7ffff
 8002ccc:	00001388 	.word	0x00001388
 8002cd0:	ffcfffff 	.word	0xffcfffff
 8002cd4:	efffffff 	.word	0xefffffff
 8002cd8:	fffff3ff 	.word	0xfffff3ff
 8002cdc:	ffffcfff 	.word	0xffffcfff
 8002ce0:	fbffffff 	.word	0xfbffffff
 8002ce4:	fff3ffff 	.word	0xfff3ffff

08002ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e032      	b.n	8002d60 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2239      	movs	r2, #57	@ 0x39
 8002cfe:	5c9b      	ldrb	r3, [r3, r2]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d107      	bne.n	8002d16 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2238      	movs	r2, #56	@ 0x38
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7fe f9b7 	bl	8001084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2239      	movs	r2, #57	@ 0x39
 8002d1a:	2102      	movs	r1, #2
 8002d1c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3304      	adds	r3, #4
 8002d26:	0019      	movs	r1, r3
 8002d28:	0010      	movs	r0, r2
 8002d2a:	f000 fff9 	bl	8003d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	223e      	movs	r2, #62	@ 0x3e
 8002d32:	2101      	movs	r1, #1
 8002d34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	223a      	movs	r2, #58	@ 0x3a
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	5499      	strb	r1, [r3, r2]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	223b      	movs	r2, #59	@ 0x3b
 8002d42:	2101      	movs	r1, #1
 8002d44:	5499      	strb	r1, [r3, r2]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	223c      	movs	r2, #60	@ 0x3c
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	5499      	strb	r1, [r3, r2]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	223d      	movs	r2, #61	@ 0x3d
 8002d52:	2101      	movs	r1, #1
 8002d54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2239      	movs	r2, #57	@ 0x39
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b002      	add	sp, #8
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2239      	movs	r2, #57	@ 0x39
 8002d74:	5c9b      	ldrb	r3, [r3, r2]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d001      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e03b      	b.n	8002df8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2239      	movs	r2, #57	@ 0x39
 8002d84:	2102      	movs	r1, #2
 8002d86:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2101      	movs	r1, #1
 8002d94:	430a      	orrs	r2, r1
 8002d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	05db      	lsls	r3, r3, #23
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d00e      	beq.n	8002dc2 <HAL_TIM_Base_Start_IT+0x5a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a15      	ldr	r2, [pc, #84]	@ (8002e00 <HAL_TIM_Base_Start_IT+0x98>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d009      	beq.n	8002dc2 <HAL_TIM_Base_Start_IT+0x5a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a14      	ldr	r2, [pc, #80]	@ (8002e04 <HAL_TIM_Base_Start_IT+0x9c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d004      	beq.n	8002dc2 <HAL_TIM_Base_Start_IT+0x5a>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a12      	ldr	r2, [pc, #72]	@ (8002e08 <HAL_TIM_Base_Start_IT+0xa0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d111      	bne.n	8002de6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2207      	movs	r2, #7
 8002dca:	4013      	ands	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b06      	cmp	r3, #6
 8002dd2:	d010      	beq.n	8002df6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2101      	movs	r1, #1
 8002de0:	430a      	orrs	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de4:	e007      	b.n	8002df6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2101      	movs	r1, #1
 8002df2:	430a      	orrs	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b004      	add	sp, #16
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40010800 	.word	0x40010800
 8002e08:	40011400 	.word	0x40011400

08002e0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e032      	b.n	8002e84 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2239      	movs	r2, #57	@ 0x39
 8002e22:	5c9b      	ldrb	r3, [r3, r2]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d107      	bne.n	8002e3a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2238      	movs	r2, #56	@ 0x38
 8002e2e:	2100      	movs	r1, #0
 8002e30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 f829 	bl	8002e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2239      	movs	r2, #57	@ 0x39
 8002e3e:	2102      	movs	r1, #2
 8002e40:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	0010      	movs	r0, r2
 8002e4e:	f000 ff67 	bl	8003d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	223e      	movs	r2, #62	@ 0x3e
 8002e56:	2101      	movs	r1, #1
 8002e58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	223a      	movs	r2, #58	@ 0x3a
 8002e5e:	2101      	movs	r1, #1
 8002e60:	5499      	strb	r1, [r3, r2]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	223b      	movs	r2, #59	@ 0x3b
 8002e66:	2101      	movs	r1, #1
 8002e68:	5499      	strb	r1, [r3, r2]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	223c      	movs	r2, #60	@ 0x3c
 8002e6e:	2101      	movs	r1, #1
 8002e70:	5499      	strb	r1, [r3, r2]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	223d      	movs	r2, #61	@ 0x3d
 8002e76:	2101      	movs	r1, #1
 8002e78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2239      	movs	r2, #57	@ 0x39
 8002e7e:	2101      	movs	r1, #1
 8002e80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	0018      	movs	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b002      	add	sp, #8
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e94:	46c0      	nop			@ (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b002      	add	sp, #8
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d108      	bne.n	8002ebe <HAL_TIM_PWM_Start+0x22>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	223a      	movs	r2, #58	@ 0x3a
 8002eb0:	5c9b      	ldrb	r3, [r3, r2]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	1e5a      	subs	r2, r3, #1
 8002eb8:	4193      	sbcs	r3, r2
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	e01f      	b.n	8002efe <HAL_TIM_PWM_Start+0x62>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d108      	bne.n	8002ed6 <HAL_TIM_PWM_Start+0x3a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	223b      	movs	r2, #59	@ 0x3b
 8002ec8:	5c9b      	ldrb	r3, [r3, r2]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	1e5a      	subs	r2, r3, #1
 8002ed0:	4193      	sbcs	r3, r2
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	e013      	b.n	8002efe <HAL_TIM_PWM_Start+0x62>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d108      	bne.n	8002eee <HAL_TIM_PWM_Start+0x52>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	223c      	movs	r2, #60	@ 0x3c
 8002ee0:	5c9b      	ldrb	r3, [r3, r2]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	1e5a      	subs	r2, r3, #1
 8002ee8:	4193      	sbcs	r3, r2
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	e007      	b.n	8002efe <HAL_TIM_PWM_Start+0x62>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	223d      	movs	r2, #61	@ 0x3d
 8002ef2:	5c9b      	ldrb	r3, [r3, r2]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	1e5a      	subs	r2, r3, #1
 8002efa:	4193      	sbcs	r3, r2
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e052      	b.n	8002fac <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d104      	bne.n	8002f16 <HAL_TIM_PWM_Start+0x7a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	223a      	movs	r2, #58	@ 0x3a
 8002f10:	2102      	movs	r1, #2
 8002f12:	5499      	strb	r1, [r3, r2]
 8002f14:	e013      	b.n	8002f3e <HAL_TIM_PWM_Start+0xa2>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d104      	bne.n	8002f26 <HAL_TIM_PWM_Start+0x8a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	223b      	movs	r2, #59	@ 0x3b
 8002f20:	2102      	movs	r1, #2
 8002f22:	5499      	strb	r1, [r3, r2]
 8002f24:	e00b      	b.n	8002f3e <HAL_TIM_PWM_Start+0xa2>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d104      	bne.n	8002f36 <HAL_TIM_PWM_Start+0x9a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	223c      	movs	r2, #60	@ 0x3c
 8002f30:	2102      	movs	r1, #2
 8002f32:	5499      	strb	r1, [r3, r2]
 8002f34:	e003      	b.n	8002f3e <HAL_TIM_PWM_Start+0xa2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	223d      	movs	r2, #61	@ 0x3d
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6839      	ldr	r1, [r7, #0]
 8002f44:	2201      	movs	r2, #1
 8002f46:	0018      	movs	r0, r3
 8002f48:	f001 fa0a 	bl	8004360 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	2380      	movs	r3, #128	@ 0x80
 8002f52:	05db      	lsls	r3, r3, #23
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d00e      	beq.n	8002f76 <HAL_TIM_PWM_Start+0xda>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a15      	ldr	r2, [pc, #84]	@ (8002fb4 <HAL_TIM_PWM_Start+0x118>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d009      	beq.n	8002f76 <HAL_TIM_PWM_Start+0xda>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a14      	ldr	r2, [pc, #80]	@ (8002fb8 <HAL_TIM_PWM_Start+0x11c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d004      	beq.n	8002f76 <HAL_TIM_PWM_Start+0xda>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a12      	ldr	r2, [pc, #72]	@ (8002fbc <HAL_TIM_PWM_Start+0x120>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d111      	bne.n	8002f9a <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	4013      	ands	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b06      	cmp	r3, #6
 8002f86:	d010      	beq.n	8002faa <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2101      	movs	r1, #1
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f98:	e007      	b.n	8002faa <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b004      	add	sp, #16
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40010800 	.word	0x40010800
 8002fbc:	40011400 	.word	0x40011400

08002fc0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e032      	b.n	8003038 <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2239      	movs	r2, #57	@ 0x39
 8002fd6:	5c9b      	ldrb	r3, [r3, r2]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d107      	bne.n	8002fee <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2238      	movs	r2, #56	@ 0x38
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f000 f867 	bl	80030bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2239      	movs	r2, #57	@ 0x39
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	0019      	movs	r1, r3
 8003000:	0010      	movs	r0, r2
 8003002:	f000 fe8d 	bl	8003d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	223e      	movs	r2, #62	@ 0x3e
 800300a:	2101      	movs	r1, #1
 800300c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	223a      	movs	r2, #58	@ 0x3a
 8003012:	2101      	movs	r1, #1
 8003014:	5499      	strb	r1, [r3, r2]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	223b      	movs	r2, #59	@ 0x3b
 800301a:	2101      	movs	r1, #1
 800301c:	5499      	strb	r1, [r3, r2]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	223c      	movs	r2, #60	@ 0x3c
 8003022:	2101      	movs	r1, #1
 8003024:	5499      	strb	r1, [r3, r2]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	223d      	movs	r2, #61	@ 0x3d
 800302a:	2101      	movs	r1, #1
 800302c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2239      	movs	r2, #57	@ 0x39
 8003032:	2101      	movs	r1, #1
 8003034:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	0018      	movs	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	b002      	add	sp, #8
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_TIM_IC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2239      	movs	r2, #57	@ 0x39
 800304c:	2102      	movs	r1, #2
 800304e:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4a18      	ldr	r2, [pc, #96]	@ (80030b8 <HAL_TIM_IC_DeInit+0x78>)
 8003058:	4013      	ands	r3, r2
 800305a:	d107      	bne.n	800306c <HAL_TIM_IC_DeInit+0x2c>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2101      	movs	r1, #1
 8003068:	438a      	bics	r2, r1
 800306a:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->IC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	0018      	movs	r0, r3
 8003070:	f000 f82c 	bl	80030cc <HAL_TIM_IC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	223e      	movs	r2, #62	@ 0x3e
 8003078:	2100      	movs	r1, #0
 800307a:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	223a      	movs	r2, #58	@ 0x3a
 8003080:	2100      	movs	r1, #0
 8003082:	5499      	strb	r1, [r3, r2]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	223b      	movs	r2, #59	@ 0x3b
 8003088:	2100      	movs	r1, #0
 800308a:	5499      	strb	r1, [r3, r2]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	223c      	movs	r2, #60	@ 0x3c
 8003090:	2100      	movs	r1, #0
 8003092:	5499      	strb	r1, [r3, r2]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	223d      	movs	r2, #61	@ 0x3d
 8003098:	2100      	movs	r1, #0
 800309a:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2239      	movs	r2, #57	@ 0x39
 80030a0:	2100      	movs	r1, #0
 80030a2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2238      	movs	r2, #56	@ 0x38
 80030a8:	2100      	movs	r1, #0
 80030aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b002      	add	sp, #8
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	00001111 	.word	0x00001111

080030bc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80030c4:	46c0      	nop			@ (mov r8, r8)
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b002      	add	sp, #8
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_TIM_IC_MspDeInit>:
  * @brief  DeInitializes TIM Input Capture MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 80030d4:	46c0      	nop			@ (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b002      	add	sp, #8
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	001a      	movs	r2, r3
 80030ea:	1cbb      	adds	r3, r7, #2
 80030ec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	2317      	movs	r3, #23
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d104      	bne.n	8003106 <HAL_TIM_IC_Start_DMA+0x2a>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	223a      	movs	r2, #58	@ 0x3a
 8003100:	5c9b      	ldrb	r3, [r3, r2]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	e013      	b.n	800312e <HAL_TIM_IC_Start_DMA+0x52>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b04      	cmp	r3, #4
 800310a:	d104      	bne.n	8003116 <HAL_TIM_IC_Start_DMA+0x3a>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	223b      	movs	r2, #59	@ 0x3b
 8003110:	5c9b      	ldrb	r3, [r3, r2]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	e00b      	b.n	800312e <HAL_TIM_IC_Start_DMA+0x52>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b08      	cmp	r3, #8
 800311a:	d104      	bne.n	8003126 <HAL_TIM_IC_Start_DMA+0x4a>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	223c      	movs	r2, #60	@ 0x3c
 8003120:	5c9b      	ldrb	r3, [r3, r2]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	e003      	b.n	800312e <HAL_TIM_IC_Start_DMA+0x52>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	223d      	movs	r2, #61	@ 0x3d
 800312a:	5c9b      	ldrb	r3, [r3, r2]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2116      	movs	r1, #22
 8003130:	187a      	adds	r2, r7, r1
 8003132:	7013      	strb	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if (channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8003134:	187b      	adds	r3, r7, r1
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d101      	bne.n	8003140 <HAL_TIM_IC_Start_DMA+0x64>
  {
    return HAL_BUSY;
 800313c:	2302      	movs	r3, #2
 800313e:	e114      	b.n	800336a <HAL_TIM_IC_Start_DMA+0x28e>
  }
  if (channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8003140:	2316      	movs	r3, #22
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d125      	bne.n	8003196 <HAL_TIM_IC_Start_DMA+0xba>
  {
    if ((pData == NULL) || (Length == 0U))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_TIM_IC_Start_DMA+0x7c>
 8003150:	1cbb      	adds	r3, r7, #2
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_TIM_IC_Start_DMA+0x80>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e106      	b.n	800336a <HAL_TIM_IC_Start_DMA+0x28e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d104      	bne.n	800316c <HAL_TIM_IC_Start_DMA+0x90>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	223a      	movs	r2, #58	@ 0x3a
 8003166:	2102      	movs	r1, #2
 8003168:	5499      	strb	r1, [r3, r2]
 800316a:	e016      	b.n	800319a <HAL_TIM_IC_Start_DMA+0xbe>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b04      	cmp	r3, #4
 8003170:	d104      	bne.n	800317c <HAL_TIM_IC_Start_DMA+0xa0>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	223b      	movs	r2, #59	@ 0x3b
 8003176:	2102      	movs	r1, #2
 8003178:	5499      	strb	r1, [r3, r2]
 800317a:	e00e      	b.n	800319a <HAL_TIM_IC_Start_DMA+0xbe>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b08      	cmp	r3, #8
 8003180:	d104      	bne.n	800318c <HAL_TIM_IC_Start_DMA+0xb0>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	223c      	movs	r2, #60	@ 0x3c
 8003186:	2102      	movs	r1, #2
 8003188:	5499      	strb	r1, [r3, r2]
 800318a:	e006      	b.n	800319a <HAL_TIM_IC_Start_DMA+0xbe>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	223d      	movs	r2, #61	@ 0x3d
 8003190:	2102      	movs	r1, #2
 8003192:	5499      	strb	r1, [r3, r2]
 8003194:	e001      	b.n	800319a <HAL_TIM_IC_Start_DMA+0xbe>
    }
  }
  else
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e0e7      	b.n	800336a <HAL_TIM_IC_Start_DMA+0x28e>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	2201      	movs	r2, #1
 80031a2:	0018      	movs	r0, r3
 80031a4:	f001 f8dc 	bl	8004360 <TIM_CCxChannelCmd>

  switch (Channel)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	d100      	bne.n	80031b0 <HAL_TIM_IC_Start_DMA+0xd4>
 80031ae:	e080      	b.n	80032b2 <HAL_TIM_IC_Start_DMA+0x1d6>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b0c      	cmp	r3, #12
 80031b4:	d900      	bls.n	80031b8 <HAL_TIM_IC_Start_DMA+0xdc>
 80031b6:	e0a1      	b.n	80032fc <HAL_TIM_IC_Start_DMA+0x220>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d054      	beq.n	8003268 <HAL_TIM_IC_Start_DMA+0x18c>
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d900      	bls.n	80031c6 <HAL_TIM_IC_Start_DMA+0xea>
 80031c4:	e09a      	b.n	80032fc <HAL_TIM_IC_Start_DMA+0x220>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_TIM_IC_Start_DMA+0xf8>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d025      	beq.n	800321e <HAL_TIM_IC_Start_DMA+0x142>
 80031d2:	e093      	b.n	80032fc <HAL_TIM_IC_Start_DMA+0x220>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4a66      	ldr	r2, [pc, #408]	@ (8003374 <HAL_TIM_IC_Start_DMA+0x298>)
 80031da:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	4a65      	ldr	r2, [pc, #404]	@ (8003378 <HAL_TIM_IC_Start_DMA+0x29c>)
 80031e2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	4a64      	ldr	r2, [pc, #400]	@ (800337c <HAL_TIM_IC_Start_DMA+0x2a0>)
 80031ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a18      	ldr	r0, [r3, #32]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3334      	adds	r3, #52	@ 0x34
 80031f6:	0019      	movs	r1, r3
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	1cbb      	adds	r3, r7, #2
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	f7fe fa9b 	bl	8001738 <HAL_DMA_Start_IT>
 8003202:	1e03      	subs	r3, r0, #0
 8003204:	d001      	beq.n	800320a <HAL_TIM_IC_Start_DMA+0x12e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e0af      	b.n	800336a <HAL_TIM_IC_Start_DMA+0x28e>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2180      	movs	r1, #128	@ 0x80
 8003216:	0089      	lsls	r1, r1, #2
 8003218:	430a      	orrs	r2, r1
 800321a:	60da      	str	r2, [r3, #12]
      break;
 800321c:	e073      	b.n	8003306 <HAL_TIM_IC_Start_DMA+0x22a>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	4a54      	ldr	r2, [pc, #336]	@ (8003374 <HAL_TIM_IC_Start_DMA+0x298>)
 8003224:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322a:	4a53      	ldr	r2, [pc, #332]	@ (8003378 <HAL_TIM_IC_Start_DMA+0x29c>)
 800322c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003232:	4a52      	ldr	r2, [pc, #328]	@ (800337c <HAL_TIM_IC_Start_DMA+0x2a0>)
 8003234:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3338      	adds	r3, #56	@ 0x38
 8003240:	0019      	movs	r1, r3
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	1cbb      	adds	r3, r7, #2
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	f7fe fa76 	bl	8001738 <HAL_DMA_Start_IT>
 800324c:	1e03      	subs	r3, r0, #0
 800324e:	d001      	beq.n	8003254 <HAL_TIM_IC_Start_DMA+0x178>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e08a      	b.n	800336a <HAL_TIM_IC_Start_DMA+0x28e>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2180      	movs	r1, #128	@ 0x80
 8003260:	00c9      	lsls	r1, r1, #3
 8003262:	430a      	orrs	r2, r1
 8003264:	60da      	str	r2, [r3, #12]
      break;
 8003266:	e04e      	b.n	8003306 <HAL_TIM_IC_Start_DMA+0x22a>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326c:	4a41      	ldr	r2, [pc, #260]	@ (8003374 <HAL_TIM_IC_Start_DMA+0x298>)
 800326e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003274:	4a40      	ldr	r2, [pc, #256]	@ (8003378 <HAL_TIM_IC_Start_DMA+0x29c>)
 8003276:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327c:	4a3f      	ldr	r2, [pc, #252]	@ (800337c <HAL_TIM_IC_Start_DMA+0x2a0>)
 800327e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	333c      	adds	r3, #60	@ 0x3c
 800328a:	0019      	movs	r1, r3
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	1cbb      	adds	r3, r7, #2
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	f7fe fa51 	bl	8001738 <HAL_DMA_Start_IT>
 8003296:	1e03      	subs	r3, r0, #0
 8003298:	d001      	beq.n	800329e <HAL_TIM_IC_Start_DMA+0x1c2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e065      	b.n	800336a <HAL_TIM_IC_Start_DMA+0x28e>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2180      	movs	r1, #128	@ 0x80
 80032aa:	0109      	lsls	r1, r1, #4
 80032ac:	430a      	orrs	r2, r1
 80032ae:	60da      	str	r2, [r3, #12]
      break;
 80032b0:	e029      	b.n	8003306 <HAL_TIM_IC_Start_DMA+0x22a>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003374 <HAL_TIM_IC_Start_DMA+0x298>)
 80032b8:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032be:	4a2e      	ldr	r2, [pc, #184]	@ (8003378 <HAL_TIM_IC_Start_DMA+0x29c>)
 80032c0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c6:	4a2d      	ldr	r2, [pc, #180]	@ (800337c <HAL_TIM_IC_Start_DMA+0x2a0>)
 80032c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3340      	adds	r3, #64	@ 0x40
 80032d4:	0019      	movs	r1, r3
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	1cbb      	adds	r3, r7, #2
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	f7fe fa2c 	bl	8001738 <HAL_DMA_Start_IT>
 80032e0:	1e03      	subs	r3, r0, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_TIM_IC_Start_DMA+0x20c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e040      	b.n	800336a <HAL_TIM_IC_Start_DMA+0x28e>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2180      	movs	r1, #128	@ 0x80
 80032f4:	0149      	lsls	r1, r1, #5
 80032f6:	430a      	orrs	r2, r1
 80032f8:	60da      	str	r2, [r3, #12]
      break;
 80032fa:	e004      	b.n	8003306 <HAL_TIM_IC_Start_DMA+0x22a>
    }

    default:
      status = HAL_ERROR;
 80032fc:	2317      	movs	r3, #23
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
      break;
 8003304:	46c0      	nop			@ (mov r8, r8)
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	2380      	movs	r3, #128	@ 0x80
 800330c:	05db      	lsls	r3, r3, #23
 800330e:	429a      	cmp	r2, r3
 8003310:	d00e      	beq.n	8003330 <HAL_TIM_IC_Start_DMA+0x254>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1a      	ldr	r2, [pc, #104]	@ (8003380 <HAL_TIM_IC_Start_DMA+0x2a4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d009      	beq.n	8003330 <HAL_TIM_IC_Start_DMA+0x254>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a18      	ldr	r2, [pc, #96]	@ (8003384 <HAL_TIM_IC_Start_DMA+0x2a8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <HAL_TIM_IC_Start_DMA+0x254>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a17      	ldr	r2, [pc, #92]	@ (8003388 <HAL_TIM_IC_Start_DMA+0x2ac>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d111      	bne.n	8003354 <HAL_TIM_IC_Start_DMA+0x278>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2207      	movs	r2, #7
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b06      	cmp	r3, #6
 8003340:	d010      	beq.n	8003364 <HAL_TIM_IC_Start_DMA+0x288>
    {
      __HAL_TIM_ENABLE(htim);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2101      	movs	r1, #1
 800334e:	430a      	orrs	r2, r1
 8003350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003352:	e007      	b.n	8003364 <HAL_TIM_IC_Start_DMA+0x288>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2101      	movs	r1, #1
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003364:	2317      	movs	r3, #23
 8003366:	18fb      	adds	r3, r7, r3
 8003368:	781b      	ldrb	r3, [r3, #0]
}
 800336a:	0018      	movs	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	b006      	add	sp, #24
 8003370:	bd80      	pop	{r7, pc}
 8003372:	46c0      	nop			@ (mov r8, r8)
 8003374:	08003c0d 	.word	0x08003c0d
 8003378:	08003cb7 	.word	0x08003cb7
 800337c:	08003b79 	.word	0x08003b79
 8003380:	40000400 	.word	0x40000400
 8003384:	40010800 	.word	0x40010800
 8003388:	40011400 	.word	0x40011400

0800338c <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003396:	230f      	movs	r3, #15
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	2200      	movs	r2, #0
 800339c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6839      	ldr	r1, [r7, #0]
 80033a4:	2200      	movs	r2, #0
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 ffda 	bl	8004360 <TIM_CCxChannelCmd>

  switch (Channel)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	d039      	beq.n	8003426 <HAL_TIM_IC_Stop_DMA+0x9a>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	d844      	bhi.n	8003442 <HAL_TIM_IC_Stop_DMA+0xb6>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d025      	beq.n	800340a <HAL_TIM_IC_Stop_DMA+0x7e>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d83e      	bhi.n	8003442 <HAL_TIM_IC_Stop_DMA+0xb6>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_TIM_IC_Stop_DMA+0x46>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d00e      	beq.n	80033ee <HAL_TIM_IC_Stop_DMA+0x62>
 80033d0:	e037      	b.n	8003442 <HAL_TIM_IC_Stop_DMA+0xb6>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4936      	ldr	r1, [pc, #216]	@ (80034b8 <HAL_TIM_IC_Stop_DMA+0x12c>)
 80033de:	400a      	ands	r2, r1
 80033e0:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7fe fa0c 	bl	8001804 <HAL_DMA_Abort_IT>
      break;
 80033ec:	e02e      	b.n	800344c <HAL_TIM_IC_Stop_DMA+0xc0>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4930      	ldr	r1, [pc, #192]	@ (80034bc <HAL_TIM_IC_Stop_DMA+0x130>)
 80033fa:	400a      	ands	r2, r1
 80033fc:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	0018      	movs	r0, r3
 8003404:	f7fe f9fe 	bl	8001804 <HAL_DMA_Abort_IT>
      break;
 8003408:	e020      	b.n	800344c <HAL_TIM_IC_Stop_DMA+0xc0>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	492a      	ldr	r1, [pc, #168]	@ (80034c0 <HAL_TIM_IC_Stop_DMA+0x134>)
 8003416:	400a      	ands	r2, r1
 8003418:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341e:	0018      	movs	r0, r3
 8003420:	f7fe f9f0 	bl	8001804 <HAL_DMA_Abort_IT>
      break;
 8003424:	e012      	b.n	800344c <HAL_TIM_IC_Stop_DMA+0xc0>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4924      	ldr	r1, [pc, #144]	@ (80034c4 <HAL_TIM_IC_Stop_DMA+0x138>)
 8003432:	400a      	ands	r2, r1
 8003434:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343a:	0018      	movs	r0, r3
 800343c:	f7fe f9e2 	bl	8001804 <HAL_DMA_Abort_IT>
      break;
 8003440:	e004      	b.n	800344c <HAL_TIM_IC_Stop_DMA+0xc0>
    }

    default:
      status = HAL_ERROR;
 8003442:	230f      	movs	r3, #15
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	2201      	movs	r2, #1
 8003448:	701a      	strb	r2, [r3, #0]
      break;
 800344a:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800344c:	230f      	movs	r3, #15
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d129      	bne.n	80034aa <HAL_TIM_IC_Stop_DMA+0x11e>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	4a1a      	ldr	r2, [pc, #104]	@ (80034c8 <HAL_TIM_IC_Stop_DMA+0x13c>)
 800345e:	4013      	ands	r3, r2
 8003460:	d107      	bne.n	8003472 <HAL_TIM_IC_Stop_DMA+0xe6>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2101      	movs	r1, #1
 800346e:	438a      	bics	r2, r1
 8003470:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d104      	bne.n	8003482 <HAL_TIM_IC_Stop_DMA+0xf6>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	223a      	movs	r2, #58	@ 0x3a
 800347c:	2101      	movs	r1, #1
 800347e:	5499      	strb	r1, [r3, r2]
 8003480:	e013      	b.n	80034aa <HAL_TIM_IC_Stop_DMA+0x11e>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d104      	bne.n	8003492 <HAL_TIM_IC_Stop_DMA+0x106>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	223b      	movs	r2, #59	@ 0x3b
 800348c:	2101      	movs	r1, #1
 800348e:	5499      	strb	r1, [r3, r2]
 8003490:	e00b      	b.n	80034aa <HAL_TIM_IC_Stop_DMA+0x11e>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d104      	bne.n	80034a2 <HAL_TIM_IC_Stop_DMA+0x116>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	223c      	movs	r2, #60	@ 0x3c
 800349c:	2101      	movs	r1, #1
 800349e:	5499      	strb	r1, [r3, r2]
 80034a0:	e003      	b.n	80034aa <HAL_TIM_IC_Stop_DMA+0x11e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	223d      	movs	r2, #61	@ 0x3d
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80034aa:	230f      	movs	r3, #15
 80034ac:	18fb      	adds	r3, r7, r3
 80034ae:	781b      	ldrb	r3, [r3, #0]
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b004      	add	sp, #16
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	fffffdff 	.word	0xfffffdff
 80034bc:	fffffbff 	.word	0xfffffbff
 80034c0:	fffff7ff 	.word	0xfffff7ff
 80034c4:	ffffefff 	.word	0xffffefff
 80034c8:	00001111 	.word	0x00001111

080034cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2202      	movs	r2, #2
 80034dc:	4013      	ands	r3, r2
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d124      	bne.n	800352c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	2202      	movs	r2, #2
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d11d      	bne.n	800352c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2203      	movs	r2, #3
 80034f6:	4252      	negs	r2, r2
 80034f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2203      	movs	r2, #3
 8003508:	4013      	ands	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	0018      	movs	r0, r3
 8003510:	f000 fb0a 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 8003514:	e007      	b.n	8003526 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	0018      	movs	r0, r3
 800351a:	f000 fafd 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	0018      	movs	r0, r3
 8003522:	f000 fb11 	bl	8003b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2204      	movs	r2, #4
 8003534:	4013      	ands	r3, r2
 8003536:	2b04      	cmp	r3, #4
 8003538:	d125      	bne.n	8003586 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2204      	movs	r2, #4
 8003542:	4013      	ands	r3, r2
 8003544:	2b04      	cmp	r3, #4
 8003546:	d11e      	bne.n	8003586 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2205      	movs	r2, #5
 800354e:	4252      	negs	r2, r2
 8003550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	23c0      	movs	r3, #192	@ 0xc0
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4013      	ands	r3, r2
 8003564:	d004      	beq.n	8003570 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0018      	movs	r0, r3
 800356a:	f000 fadd 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 800356e:	e007      	b.n	8003580 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	0018      	movs	r0, r3
 8003574:	f000 fad0 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	0018      	movs	r0, r3
 800357c:	f000 fae4 	bl	8003b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2208      	movs	r2, #8
 800358e:	4013      	ands	r3, r2
 8003590:	2b08      	cmp	r3, #8
 8003592:	d124      	bne.n	80035de <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2208      	movs	r2, #8
 800359c:	4013      	ands	r3, r2
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d11d      	bne.n	80035de <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2209      	movs	r2, #9
 80035a8:	4252      	negs	r2, r2
 80035aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2204      	movs	r2, #4
 80035b0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	2203      	movs	r2, #3
 80035ba:	4013      	ands	r3, r2
 80035bc:	d004      	beq.n	80035c8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f000 fab1 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 80035c6:	e007      	b.n	80035d8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	0018      	movs	r0, r3
 80035cc:	f000 faa4 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	0018      	movs	r0, r3
 80035d4:	f000 fab8 	bl	8003b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	2210      	movs	r2, #16
 80035e6:	4013      	ands	r3, r2
 80035e8:	2b10      	cmp	r3, #16
 80035ea:	d125      	bne.n	8003638 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2210      	movs	r2, #16
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b10      	cmp	r3, #16
 80035f8:	d11e      	bne.n	8003638 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2211      	movs	r2, #17
 8003600:	4252      	negs	r2, r2
 8003602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2208      	movs	r2, #8
 8003608:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	23c0      	movs	r3, #192	@ 0xc0
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4013      	ands	r3, r2
 8003616:	d004      	beq.n	8003622 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	0018      	movs	r0, r3
 800361c:	f000 fa84 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 8003620:	e007      	b.n	8003632 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	0018      	movs	r0, r3
 8003626:	f000 fa77 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	0018      	movs	r0, r3
 800362e:	f000 fa8b 	bl	8003b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2201      	movs	r2, #1
 8003640:	4013      	ands	r3, r2
 8003642:	2b01      	cmp	r3, #1
 8003644:	d10f      	bne.n	8003666 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	4013      	ands	r3, r2
 8003650:	2b01      	cmp	r3, #1
 8003652:	d108      	bne.n	8003666 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2202      	movs	r2, #2
 800365a:	4252      	negs	r2, r2
 800365c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	0018      	movs	r0, r3
 8003662:	f7fd f905 	bl	8000870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	2240      	movs	r2, #64	@ 0x40
 800366e:	4013      	ands	r3, r2
 8003670:	2b40      	cmp	r3, #64	@ 0x40
 8003672:	d10f      	bne.n	8003694 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2240      	movs	r2, #64	@ 0x40
 800367c:	4013      	ands	r3, r2
 800367e:	2b40      	cmp	r3, #64	@ 0x40
 8003680:	d108      	bne.n	8003694 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2241      	movs	r2, #65	@ 0x41
 8003688:	4252      	negs	r2, r2
 800368a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	0018      	movs	r0, r3
 8003690:	f000 fa62 	bl	8003b58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003694:	46c0      	nop			@ (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	b002      	add	sp, #8
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a8:	2317      	movs	r3, #23
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2238      	movs	r2, #56	@ 0x38
 80036b4:	5c9b      	ldrb	r3, [r3, r2]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_TIM_IC_ConfigChannel+0x22>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e08c      	b.n	80037d8 <HAL_TIM_IC_ConfigChannel+0x13c>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2238      	movs	r2, #56	@ 0x38
 80036c2:	2101      	movs	r1, #1
 80036c4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d11b      	bne.n	8003704 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80036dc:	f000 fc82 	bl	8003fe4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	210c      	movs	r1, #12
 80036ec:	438a      	bics	r2, r1
 80036ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6999      	ldr	r1, [r3, #24]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	619a      	str	r2, [r3, #24]
 8003702:	e062      	b.n	80037ca <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b04      	cmp	r3, #4
 8003708:	d11c      	bne.n	8003744 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800371a:	f000 fced 	bl	80040f8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699a      	ldr	r2, [r3, #24]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	492d      	ldr	r1, [pc, #180]	@ (80037e0 <HAL_TIM_IC_ConfigChannel+0x144>)
 800372a:	400a      	ands	r2, r1
 800372c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6999      	ldr	r1, [r3, #24]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	021a      	lsls	r2, r3, #8
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	619a      	str	r2, [r3, #24]
 8003742:	e042      	b.n	80037ca <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b08      	cmp	r3, #8
 8003748:	d11b      	bne.n	8003782 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800375a:	f000 fd41 	bl	80041e0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	210c      	movs	r1, #12
 800376a:	438a      	bics	r2, r1
 800376c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69d9      	ldr	r1, [r3, #28]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	61da      	str	r2, [r3, #28]
 8003780:	e023      	b.n	80037ca <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b0c      	cmp	r3, #12
 8003786:	d11c      	bne.n	80037c2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003798:	f000 fd62 	bl	8004260 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69da      	ldr	r2, [r3, #28]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	490e      	ldr	r1, [pc, #56]	@ (80037e0 <HAL_TIM_IC_ConfigChannel+0x144>)
 80037a8:	400a      	ands	r2, r1
 80037aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69d9      	ldr	r1, [r3, #28]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	021a      	lsls	r2, r3, #8
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	61da      	str	r2, [r3, #28]
 80037c0:	e003      	b.n	80037ca <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80037c2:	2317      	movs	r3, #23
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2238      	movs	r2, #56	@ 0x38
 80037ce:	2100      	movs	r1, #0
 80037d0:	5499      	strb	r1, [r3, r2]

  return status;
 80037d2:	2317      	movs	r3, #23
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	781b      	ldrb	r3, [r3, #0]
}
 80037d8:	0018      	movs	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	b006      	add	sp, #24
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	fffff3ff 	.word	0xfffff3ff

080037e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f0:	2317      	movs	r3, #23
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2238      	movs	r2, #56	@ 0x38
 80037fc:	5c9b      	ldrb	r3, [r3, r2]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003802:	2302      	movs	r3, #2
 8003804:	e0ad      	b.n	8003962 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2238      	movs	r2, #56	@ 0x38
 800380a:	2101      	movs	r1, #1
 800380c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b0c      	cmp	r3, #12
 8003812:	d100      	bne.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003814:	e076      	b.n	8003904 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b0c      	cmp	r3, #12
 800381a:	d900      	bls.n	800381e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800381c:	e095      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x166>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b08      	cmp	r3, #8
 8003822:	d04e      	beq.n	80038c2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b08      	cmp	r3, #8
 8003828:	d900      	bls.n	800382c <HAL_TIM_PWM_ConfigChannel+0x48>
 800382a:	e08e      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x166>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_TIM_PWM_ConfigChannel+0x56>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b04      	cmp	r3, #4
 8003836:	d021      	beq.n	800387c <HAL_TIM_PWM_ConfigChannel+0x98>
 8003838:	e087      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	0011      	movs	r1, r2
 8003842:	0018      	movs	r0, r3
 8003844:	f000 faca 	bl	8003ddc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2108      	movs	r1, #8
 8003854:	430a      	orrs	r2, r1
 8003856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2104      	movs	r1, #4
 8003864:	438a      	bics	r2, r1
 8003866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6999      	ldr	r1, [r3, #24]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	619a      	str	r2, [r3, #24]
      break;
 800387a:	e06b      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	0011      	movs	r1, r2
 8003884:	0018      	movs	r0, r3
 8003886:	f000 fae5 	bl	8003e54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699a      	ldr	r2, [r3, #24]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2180      	movs	r1, #128	@ 0x80
 8003896:	0109      	lsls	r1, r1, #4
 8003898:	430a      	orrs	r2, r1
 800389a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4931      	ldr	r1, [pc, #196]	@ (800396c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80038a8:	400a      	ands	r2, r1
 80038aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6999      	ldr	r1, [r3, #24]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	021a      	lsls	r2, r3, #8
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	619a      	str	r2, [r3, #24]
      break;
 80038c0:	e048      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	0011      	movs	r1, r2
 80038ca:	0018      	movs	r0, r3
 80038cc:	f000 fb04 	bl	8003ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2108      	movs	r1, #8
 80038dc:	430a      	orrs	r2, r1
 80038de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2104      	movs	r1, #4
 80038ec:	438a      	bics	r2, r1
 80038ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69d9      	ldr	r1, [r3, #28]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	61da      	str	r2, [r3, #28]
      break;
 8003902:	e027      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	0011      	movs	r1, r2
 800390c:	0018      	movs	r0, r3
 800390e:	f000 fb23 	bl	8003f58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69da      	ldr	r2, [r3, #28]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2180      	movs	r1, #128	@ 0x80
 800391e:	0109      	lsls	r1, r1, #4
 8003920:	430a      	orrs	r2, r1
 8003922:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	490f      	ldr	r1, [pc, #60]	@ (800396c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003930:	400a      	ands	r2, r1
 8003932:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69d9      	ldr	r1, [r3, #28]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	021a      	lsls	r2, r3, #8
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	61da      	str	r2, [r3, #28]
      break;
 8003948:	e004      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800394a:	2317      	movs	r3, #23
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
      break;
 8003952:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2238      	movs	r2, #56	@ 0x38
 8003958:	2100      	movs	r1, #0
 800395a:	5499      	strb	r1, [r3, r2]

  return status;
 800395c:	2317      	movs	r3, #23
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	781b      	ldrb	r3, [r3, #0]
}
 8003962:	0018      	movs	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	b006      	add	sp, #24
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	fffffbff 	.word	0xfffffbff

08003970 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800397a:	230f      	movs	r3, #15
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2238      	movs	r2, #56	@ 0x38
 8003986:	5c9b      	ldrb	r3, [r3, r2]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_TIM_ConfigClockSource+0x20>
 800398c:	2302      	movs	r3, #2
 800398e:	e0bc      	b.n	8003b0a <HAL_TIM_ConfigClockSource+0x19a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2238      	movs	r2, #56	@ 0x38
 8003994:	2101      	movs	r1, #1
 8003996:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2239      	movs	r2, #57	@ 0x39
 800399c:	2102      	movs	r1, #2
 800399e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2277      	movs	r2, #119	@ 0x77
 80039ac:	4393      	bics	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4a58      	ldr	r2, [pc, #352]	@ (8003b14 <HAL_TIM_ConfigClockSource+0x1a4>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2280      	movs	r2, #128	@ 0x80
 80039c6:	0192      	lsls	r2, r2, #6
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d040      	beq.n	8003a4e <HAL_TIM_ConfigClockSource+0xde>
 80039cc:	2280      	movs	r2, #128	@ 0x80
 80039ce:	0192      	lsls	r2, r2, #6
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d900      	bls.n	80039d6 <HAL_TIM_ConfigClockSource+0x66>
 80039d4:	e088      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x178>
 80039d6:	2280      	movs	r2, #128	@ 0x80
 80039d8:	0152      	lsls	r2, r2, #5
 80039da:	4293      	cmp	r3, r2
 80039dc:	d100      	bne.n	80039e0 <HAL_TIM_ConfigClockSource+0x70>
 80039de:	e088      	b.n	8003af2 <HAL_TIM_ConfigClockSource+0x182>
 80039e0:	2280      	movs	r2, #128	@ 0x80
 80039e2:	0152      	lsls	r2, r2, #5
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d900      	bls.n	80039ea <HAL_TIM_ConfigClockSource+0x7a>
 80039e8:	e07e      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x178>
 80039ea:	2b70      	cmp	r3, #112	@ 0x70
 80039ec:	d018      	beq.n	8003a20 <HAL_TIM_ConfigClockSource+0xb0>
 80039ee:	d900      	bls.n	80039f2 <HAL_TIM_ConfigClockSource+0x82>
 80039f0:	e07a      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x178>
 80039f2:	2b60      	cmp	r3, #96	@ 0x60
 80039f4:	d04f      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x126>
 80039f6:	d900      	bls.n	80039fa <HAL_TIM_ConfigClockSource+0x8a>
 80039f8:	e076      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x178>
 80039fa:	2b50      	cmp	r3, #80	@ 0x50
 80039fc:	d03b      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x106>
 80039fe:	d900      	bls.n	8003a02 <HAL_TIM_ConfigClockSource+0x92>
 8003a00:	e072      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x178>
 8003a02:	2b40      	cmp	r3, #64	@ 0x40
 8003a04:	d057      	beq.n	8003ab6 <HAL_TIM_ConfigClockSource+0x146>
 8003a06:	d900      	bls.n	8003a0a <HAL_TIM_ConfigClockSource+0x9a>
 8003a08:	e06e      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x178>
 8003a0a:	2b30      	cmp	r3, #48	@ 0x30
 8003a0c:	d063      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0x166>
 8003a0e:	d86b      	bhi.n	8003ae8 <HAL_TIM_ConfigClockSource+0x178>
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d060      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0x166>
 8003a14:	d868      	bhi.n	8003ae8 <HAL_TIM_ConfigClockSource+0x178>
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d05d      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0x166>
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d05b      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0x166>
 8003a1e:	e063      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a30:	f000 fc76 	bl	8004320 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2277      	movs	r2, #119	@ 0x77
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	609a      	str	r2, [r3, #8]
      break;
 8003a4c:	e052      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a5e:	f000 fc5f 	bl	8004320 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2180      	movs	r1, #128	@ 0x80
 8003a6e:	01c9      	lsls	r1, r1, #7
 8003a70:	430a      	orrs	r2, r1
 8003a72:	609a      	str	r2, [r3, #8]
      break;
 8003a74:	e03e      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a82:	001a      	movs	r2, r3
 8003a84:	f000 fb0a 	bl	800409c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2150      	movs	r1, #80	@ 0x50
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f000 fc2c 	bl	80042ec <TIM_ITRx_SetConfig>
      break;
 8003a94:	e02e      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	f000 fb6a 	bl	800417c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2160      	movs	r1, #96	@ 0x60
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f000 fc1c 	bl	80042ec <TIM_ITRx_SetConfig>
      break;
 8003ab4:	e01e      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac2:	001a      	movs	r2, r3
 8003ac4:	f000 faea 	bl	800409c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2140      	movs	r1, #64	@ 0x40
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f000 fc0c 	bl	80042ec <TIM_ITRx_SetConfig>
      break;
 8003ad4:	e00e      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	0019      	movs	r1, r3
 8003ae0:	0010      	movs	r0, r2
 8003ae2:	f000 fc03 	bl	80042ec <TIM_ITRx_SetConfig>
      break;
 8003ae6:	e005      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003ae8:	230f      	movs	r3, #15
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
      break;
 8003af0:	e000      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003af2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2239      	movs	r2, #57	@ 0x39
 8003af8:	2101      	movs	r1, #1
 8003afa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2238      	movs	r2, #56	@ 0x38
 8003b00:	2100      	movs	r1, #0
 8003b02:	5499      	strb	r1, [r3, r2]

  return status;
 8003b04:	230f      	movs	r3, #15
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	781b      	ldrb	r3, [r3, #0]
}
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b004      	add	sp, #16
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	ffff00ff 	.word	0xffff00ff

08003b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b20:	46c0      	nop			@ (mov r8, r8)
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b002      	add	sp, #8
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b30:	46c0      	nop			@ (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b002      	add	sp, #8
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003b40:	46c0      	nop			@ (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b002      	add	sp, #8
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b50:	46c0      	nop			@ (mov r8, r8)
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b002      	add	sp, #8
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b60:	46c0      	nop			@ (mov r8, r8)
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b002      	add	sp, #8
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003b70:	46c0      	nop			@ (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b002      	add	sp, #8
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b84:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d107      	bne.n	8003ba0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	223a      	movs	r2, #58	@ 0x3a
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	5499      	strb	r1, [r3, r2]
 8003b9e:	e02a      	b.n	8003bf6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d107      	bne.n	8003bba <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2202      	movs	r2, #2
 8003bae:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	223b      	movs	r2, #59	@ 0x3b
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	5499      	strb	r1, [r3, r2]
 8003bb8:	e01d      	b.n	8003bf6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d107      	bne.n	8003bd4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	223c      	movs	r2, #60	@ 0x3c
 8003bce:	2101      	movs	r1, #1
 8003bd0:	5499      	strb	r1, [r3, r2]
 8003bd2:	e010      	b.n	8003bf6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d107      	bne.n	8003bee <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2208      	movs	r2, #8
 8003be2:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	223d      	movs	r2, #61	@ 0x3d
 8003be8:	2101      	movs	r1, #1
 8003bea:	5499      	strb	r1, [r3, r2]
 8003bec:	e003      	b.n	8003bf6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2239      	movs	r2, #57	@ 0x39
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f7ff ffb5 	bl	8003b68 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	761a      	strb	r2, [r3, #24]
}
 8003c04:	46c0      	nop			@ (mov r8, r8)
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b004      	add	sp, #16
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c18:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d10b      	bne.n	8003c3c <TIM_DMACaptureCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2201      	movs	r2, #1
 8003c28:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d136      	bne.n	8003ca0 <TIM_DMACaptureCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	223a      	movs	r2, #58	@ 0x3a
 8003c36:	2101      	movs	r1, #1
 8003c38:	5499      	strb	r1, [r3, r2]
 8003c3a:	e031      	b.n	8003ca0 <TIM_DMACaptureCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d10b      	bne.n	8003c5e <TIM_DMACaptureCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d125      	bne.n	8003ca0 <TIM_DMACaptureCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	223b      	movs	r2, #59	@ 0x3b
 8003c58:	2101      	movs	r1, #1
 8003c5a:	5499      	strb	r1, [r3, r2]
 8003c5c:	e020      	b.n	8003ca0 <TIM_DMACaptureCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d10b      	bne.n	8003c80 <TIM_DMACaptureCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2204      	movs	r2, #4
 8003c6c:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d114      	bne.n	8003ca0 <TIM_DMACaptureCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	223c      	movs	r2, #60	@ 0x3c
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	5499      	strb	r1, [r3, r2]
 8003c7e:	e00f      	b.n	8003ca0 <TIM_DMACaptureCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d10a      	bne.n	8003ca0 <TIM_DMACaptureCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d103      	bne.n	8003ca0 <TIM_DMACaptureCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	223d      	movs	r2, #61	@ 0x3d
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f7ff ff40 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	761a      	strb	r2, [r3, #24]
}
 8003cae:	46c0      	nop			@ (mov r8, r8)
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b004      	add	sp, #16
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d103      	bne.n	8003cd6 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	761a      	strb	r2, [r3, #24]
 8003cd4:	e019      	b.n	8003d0a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d103      	bne.n	8003ce8 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	761a      	strb	r2, [r3, #24]
 8003ce6:	e010      	b.n	8003d0a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d103      	bne.n	8003cfa <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	761a      	strb	r2, [r3, #24]
 8003cf8:	e007      	b.n	8003d0a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d102      	bne.n	8003d0a <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2208      	movs	r2, #8
 8003d08:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f7ff ff13 	bl	8003b38 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	761a      	strb	r2, [r3, #24]
}
 8003d18:	46c0      	nop			@ (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b004      	add	sp, #16
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	2380      	movs	r3, #128	@ 0x80
 8003d34:	05db      	lsls	r3, r3, #23
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d00b      	beq.n	8003d52 <TIM_Base_SetConfig+0x32>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a23      	ldr	r2, [pc, #140]	@ (8003dcc <TIM_Base_SetConfig+0xac>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <TIM_Base_SetConfig+0x32>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a22      	ldr	r2, [pc, #136]	@ (8003dd0 <TIM_Base_SetConfig+0xb0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d003      	beq.n	8003d52 <TIM_Base_SetConfig+0x32>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a21      	ldr	r2, [pc, #132]	@ (8003dd4 <TIM_Base_SetConfig+0xb4>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d108      	bne.n	8003d64 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2270      	movs	r2, #112	@ 0x70
 8003d56:	4393      	bics	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	2380      	movs	r3, #128	@ 0x80
 8003d68:	05db      	lsls	r3, r3, #23
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d00b      	beq.n	8003d86 <TIM_Base_SetConfig+0x66>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a16      	ldr	r2, [pc, #88]	@ (8003dcc <TIM_Base_SetConfig+0xac>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d007      	beq.n	8003d86 <TIM_Base_SetConfig+0x66>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a15      	ldr	r2, [pc, #84]	@ (8003dd0 <TIM_Base_SetConfig+0xb0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d003      	beq.n	8003d86 <TIM_Base_SetConfig+0x66>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a14      	ldr	r2, [pc, #80]	@ (8003dd4 <TIM_Base_SetConfig+0xb4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d108      	bne.n	8003d98 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a13      	ldr	r2, [pc, #76]	@ (8003dd8 <TIM_Base_SetConfig+0xb8>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2280      	movs	r2, #128	@ 0x80
 8003d9c:	4393      	bics	r3, r2
 8003d9e:	001a      	movs	r2, r3
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	615a      	str	r2, [r3, #20]
}
 8003dc4:	46c0      	nop			@ (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b004      	add	sp, #16
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40000400 	.word	0x40000400
 8003dd0:	40010800 	.word	0x40010800
 8003dd4:	40011400 	.word	0x40011400
 8003dd8:	fffffcff 	.word	0xfffffcff

08003ddc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	2201      	movs	r2, #1
 8003dec:	4393      	bics	r3, r2
 8003dee:	001a      	movs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2270      	movs	r2, #112	@ 0x70
 8003e0a:	4393      	bics	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2203      	movs	r2, #3
 8003e12:	4393      	bics	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2202      	movs	r2, #2
 8003e24:	4393      	bics	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	621a      	str	r2, [r3, #32]
}
 8003e4c:	46c0      	nop			@ (mov r8, r8)
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	b006      	add	sp, #24
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	2210      	movs	r2, #16
 8003e64:	4393      	bics	r3, r2
 8003e66:	001a      	movs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4a13      	ldr	r2, [pc, #76]	@ (8003ed0 <TIM_OC2_SetConfig+0x7c>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4a12      	ldr	r2, [pc, #72]	@ (8003ed4 <TIM_OC2_SetConfig+0x80>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	4393      	bics	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	621a      	str	r2, [r3, #32]
}
 8003ec8:	46c0      	nop			@ (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b006      	add	sp, #24
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	ffff8fff 	.word	0xffff8fff
 8003ed4:	fffffcff 	.word	0xfffffcff

08003ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8003f50 <TIM_OC3_SetConfig+0x78>)
 8003ee8:	401a      	ands	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2270      	movs	r2, #112	@ 0x70
 8003f04:	4393      	bics	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	4393      	bics	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f54 <TIM_OC3_SetConfig+0x7c>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	621a      	str	r2, [r3, #32]
}
 8003f48:	46c0      	nop			@ (mov r8, r8)
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b006      	add	sp, #24
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	fffffeff 	.word	0xfffffeff
 8003f54:	fffffdff 	.word	0xfffffdff

08003f58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd4 <TIM_OC4_SetConfig+0x7c>)
 8003f68:	401a      	ands	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4a15      	ldr	r2, [pc, #84]	@ (8003fd8 <TIM_OC4_SetConfig+0x80>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a14      	ldr	r2, [pc, #80]	@ (8003fdc <TIM_OC4_SetConfig+0x84>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	4a10      	ldr	r2, [pc, #64]	@ (8003fe0 <TIM_OC4_SetConfig+0x88>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	031b      	lsls	r3, r3, #12
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	621a      	str	r2, [r3, #32]
}
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b006      	add	sp, #24
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	46c0      	nop			@ (mov r8, r8)
 8003fd4:	ffffefff 	.word	0xffffefff
 8003fd8:	ffff8fff 	.word	0xffff8fff
 8003fdc:	fffffcff 	.word	0xfffffcff
 8003fe0:	ffffdfff 	.word	0xffffdfff

08003fe4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	4393      	bics	r3, r2
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	2380      	movs	r3, #128	@ 0x80
 8004010:	05db      	lsls	r3, r3, #23
 8004012:	429a      	cmp	r2, r3
 8004014:	d00b      	beq.n	800402e <TIM_TI1_SetConfig+0x4a>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4a1d      	ldr	r2, [pc, #116]	@ (8004090 <TIM_TI1_SetConfig+0xac>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d007      	beq.n	800402e <TIM_TI1_SetConfig+0x4a>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4a1c      	ldr	r2, [pc, #112]	@ (8004094 <TIM_TI1_SetConfig+0xb0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_TI1_SetConfig+0x4a>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a1b      	ldr	r2, [pc, #108]	@ (8004098 <TIM_TI1_SetConfig+0xb4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d101      	bne.n	8004032 <TIM_TI1_SetConfig+0x4e>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <TIM_TI1_SetConfig+0x50>
 8004032:	2300      	movs	r3, #0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2203      	movs	r2, #3
 800403c:	4393      	bics	r3, r2
 800403e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	e003      	b.n	8004052 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2201      	movs	r2, #1
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	22f0      	movs	r2, #240	@ 0xf0
 8004056:	4393      	bics	r3, r2
 8004058:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	22ff      	movs	r2, #255	@ 0xff
 8004060:	4013      	ands	r3, r2
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	220a      	movs	r2, #10
 800406c:	4393      	bics	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	220a      	movs	r2, #10
 8004074:	4013      	ands	r3, r2
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	621a      	str	r2, [r3, #32]
}
 8004088:	46c0      	nop			@ (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40000400 	.word	0x40000400
 8004094:	40010800 	.word	0x40010800
 8004098:	40011400 	.word	0x40011400

0800409c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	2201      	movs	r2, #1
 80040b4:	4393      	bics	r3, r2
 80040b6:	001a      	movs	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	22f0      	movs	r2, #240	@ 0xf0
 80040c6:	4393      	bics	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	220a      	movs	r2, #10
 80040d8:	4393      	bics	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	621a      	str	r2, [r3, #32]
}
 80040f0:	46c0      	nop			@ (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b006      	add	sp, #24
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	2210      	movs	r2, #16
 800410c:	4393      	bics	r3, r2
 800410e:	001a      	movs	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	4a14      	ldr	r2, [pc, #80]	@ (8004174 <TIM_TI2_SetConfig+0x7c>)
 8004124:	4013      	ands	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	4a10      	ldr	r2, [pc, #64]	@ (8004178 <TIM_TI2_SetConfig+0x80>)
 8004136:	4013      	ands	r3, r2
 8004138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	031b      	lsls	r3, r3, #12
 800413e:	041b      	lsls	r3, r3, #16
 8004140:	0c1b      	lsrs	r3, r3, #16
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	22a0      	movs	r2, #160	@ 0xa0
 800414c:	4393      	bics	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	22a0      	movs	r2, #160	@ 0xa0
 8004156:	4013      	ands	r3, r2
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	46c0      	nop			@ (mov r8, r8)
 800416c:	46bd      	mov	sp, r7
 800416e:	b006      	add	sp, #24
 8004170:	bd80      	pop	{r7, pc}
 8004172:	46c0      	nop			@ (mov r8, r8)
 8004174:	fffffcff 	.word	0xfffffcff
 8004178:	ffff0fff 	.word	0xffff0fff

0800417c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	2210      	movs	r2, #16
 800418e:	4393      	bics	r3, r2
 8004190:	001a      	movs	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	4a0d      	ldr	r2, [pc, #52]	@ (80041dc <TIM_TI2_ConfigInputStage+0x60>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	031b      	lsls	r3, r3, #12
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	22a0      	movs	r2, #160	@ 0xa0
 80041b8:	4393      	bics	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	621a      	str	r2, [r3, #32]
}
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b006      	add	sp, #24
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	46c0      	nop			@ (mov r8, r8)
 80041dc:	ffff0fff 	.word	0xffff0fff

080041e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	4a19      	ldr	r2, [pc, #100]	@ (8004258 <TIM_TI3_SetConfig+0x78>)
 80041f4:	401a      	ands	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2203      	movs	r2, #3
 800420a:	4393      	bics	r3, r2
 800420c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	22f0      	movs	r2, #240	@ 0xf0
 800421a:	4393      	bics	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	22ff      	movs	r2, #255	@ 0xff
 8004224:	4013      	ands	r3, r2
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	4a0b      	ldr	r2, [pc, #44]	@ (800425c <TIM_TI3_SetConfig+0x7c>)
 8004230:	4013      	ands	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	021a      	lsls	r2, r3, #8
 8004238:	23a0      	movs	r3, #160	@ 0xa0
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	4013      	ands	r3, r2
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	621a      	str	r2, [r3, #32]
}
 8004250:	46c0      	nop			@ (mov r8, r8)
 8004252:	46bd      	mov	sp, r7
 8004254:	b006      	add	sp, #24
 8004256:	bd80      	pop	{r7, pc}
 8004258:	fffffeff 	.word	0xfffffeff
 800425c:	fffff5ff 	.word	0xfffff5ff

08004260 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	4a1a      	ldr	r2, [pc, #104]	@ (80042dc <TIM_TI4_SetConfig+0x7c>)
 8004274:	401a      	ands	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	4a15      	ldr	r2, [pc, #84]	@ (80042e0 <TIM_TI4_SetConfig+0x80>)
 800428a:	4013      	ands	r3, r2
 800428c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	4a12      	ldr	r2, [pc, #72]	@ (80042e4 <TIM_TI4_SetConfig+0x84>)
 800429c:	4013      	ands	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	031b      	lsls	r3, r3, #12
 80042a4:	041b      	lsls	r3, r3, #16
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4a0d      	ldr	r2, [pc, #52]	@ (80042e8 <TIM_TI4_SetConfig+0x88>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	031a      	lsls	r2, r3, #12
 80042ba:	23a0      	movs	r3, #160	@ 0xa0
 80042bc:	021b      	lsls	r3, r3, #8
 80042be:	4013      	ands	r3, r2
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	46c0      	nop			@ (mov r8, r8)
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b006      	add	sp, #24
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	ffffefff 	.word	0xffffefff
 80042e0:	fffffcff 	.word	0xfffffcff
 80042e4:	ffff0fff 	.word	0xffff0fff
 80042e8:	ffff5fff 	.word	0xffff5fff

080042ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2270      	movs	r2, #112	@ 0x70
 8004300:	4393      	bics	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4313      	orrs	r3, r2
 800430a:	2207      	movs	r2, #7
 800430c:	4313      	orrs	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	609a      	str	r2, [r3, #8]
}
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	46bd      	mov	sp, r7
 800431a:	b004      	add	sp, #16
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	4a09      	ldr	r2, [pc, #36]	@ (800435c <TIM_ETR_SetConfig+0x3c>)
 8004338:	4013      	ands	r3, r2
 800433a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	021a      	lsls	r2, r3, #8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	431a      	orrs	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4313      	orrs	r3, r2
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4313      	orrs	r3, r2
 800434c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	609a      	str	r2, [r3, #8]
}
 8004354:	46c0      	nop			@ (mov r8, r8)
 8004356:	46bd      	mov	sp, r7
 8004358:	b006      	add	sp, #24
 800435a:	bd80      	pop	{r7, pc}
 800435c:	ffff00ff 	.word	0xffff00ff

08004360 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	221f      	movs	r2, #31
 8004370:	4013      	ands	r3, r2
 8004372:	2201      	movs	r2, #1
 8004374:	409a      	lsls	r2, r3
 8004376:	0013      	movs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	43d2      	mvns	r2, r2
 8004382:	401a      	ands	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a1a      	ldr	r2, [r3, #32]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	211f      	movs	r1, #31
 8004390:	400b      	ands	r3, r1
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4099      	lsls	r1, r3
 8004396:	000b      	movs	r3, r1
 8004398:	431a      	orrs	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	621a      	str	r2, [r3, #32]
}
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	46bd      	mov	sp, r7
 80043a2:	b006      	add	sp, #24
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2238      	movs	r2, #56	@ 0x38
 80043b6:	5c9b      	ldrb	r3, [r3, r2]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043bc:	2302      	movs	r3, #2
 80043be:	e047      	b.n	8004450 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2238      	movs	r2, #56	@ 0x38
 80043c4:	2101      	movs	r1, #1
 80043c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2239      	movs	r2, #57	@ 0x39
 80043cc:	2102      	movs	r1, #2
 80043ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2270      	movs	r2, #112	@ 0x70
 80043e4:	4393      	bics	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	2380      	movs	r3, #128	@ 0x80
 8004400:	05db      	lsls	r3, r3, #23
 8004402:	429a      	cmp	r2, r3
 8004404:	d00e      	beq.n	8004424 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a13      	ldr	r2, [pc, #76]	@ (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d009      	beq.n	8004424 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a11      	ldr	r2, [pc, #68]	@ (800445c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d004      	beq.n	8004424 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a10      	ldr	r2, [pc, #64]	@ (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d10c      	bne.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2280      	movs	r2, #128	@ 0x80
 8004428:	4393      	bics	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	4313      	orrs	r3, r2
 8004434:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2239      	movs	r2, #57	@ 0x39
 8004442:	2101      	movs	r1, #1
 8004444:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2238      	movs	r2, #56	@ 0x38
 800444a:	2100      	movs	r1, #0
 800444c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	0018      	movs	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	b004      	add	sp, #16
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40000400 	.word	0x40000400
 800445c:	40010800 	.word	0x40010800
 8004460:	40011400 	.word	0x40011400

08004464 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2238      	movs	r2, #56	@ 0x38
 8004472:	5c9b      	ldrb	r3, [r3, r2]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_TIMEx_RemapConfig+0x18>
 8004478:	2302      	movs	r3, #2
 800447a:	e00c      	b.n	8004496 <HAL_TIMEx_RemapConfig+0x32>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2238      	movs	r2, #56	@ 0x38
 8004480:	2101      	movs	r1, #1
 8004482:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2238      	movs	r2, #56	@ 0x38
 8004490:	2100      	movs	r1, #0
 8004492:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	0018      	movs	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	b002      	add	sp, #8
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e044      	b.n	800453c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2278      	movs	r2, #120	@ 0x78
 80044be:	2100      	movs	r1, #0
 80044c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f7fc fedf 	bl	8001288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2224      	movs	r2, #36	@ 0x24
 80044ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2101      	movs	r1, #1
 80044dc:	438a      	bics	r2, r1
 80044de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	0018      	movs	r0, r3
 80044e4:	f000 f8d0 	bl	8004688 <UART_SetConfig>
 80044e8:	0003      	movs	r3, r0
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e024      	b.n	800453c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	0018      	movs	r0, r3
 80044fe:	f000 fb61 	bl	8004bc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	490d      	ldr	r1, [pc, #52]	@ (8004544 <HAL_UART_Init+0xa4>)
 800450e:	400a      	ands	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	212a      	movs	r1, #42	@ 0x2a
 800451e:	438a      	bics	r2, r1
 8004520:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2101      	movs	r1, #1
 800452e:	430a      	orrs	r2, r1
 8004530:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	0018      	movs	r0, r3
 8004536:	f000 fbf9 	bl	8004d2c <UART_CheckIdleState>
 800453a:	0003      	movs	r3, r0
}
 800453c:	0018      	movs	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	b002      	add	sp, #8
 8004542:	bd80      	pop	{r7, pc}
 8004544:	ffffb7ff 	.word	0xffffb7ff

08004548 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	@ 0x28
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	1dbb      	adds	r3, r7, #6
 8004556:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800455c:	2b20      	cmp	r3, #32
 800455e:	d000      	beq.n	8004562 <HAL_UART_Transmit+0x1a>
 8004560:	e08c      	b.n	800467c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_UART_Transmit+0x28>
 8004568:	1dbb      	adds	r3, r7, #6
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e084      	b.n	800467e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	2380      	movs	r3, #128	@ 0x80
 800457a:	015b      	lsls	r3, r3, #5
 800457c:	429a      	cmp	r2, r3
 800457e:	d109      	bne.n	8004594 <HAL_UART_Transmit+0x4c>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d105      	bne.n	8004594 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2201      	movs	r2, #1
 800458c:	4013      	ands	r3, r2
 800458e:	d001      	beq.n	8004594 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e074      	b.n	800467e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2284      	movs	r2, #132	@ 0x84
 8004598:	2100      	movs	r1, #0
 800459a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2221      	movs	r2, #33	@ 0x21
 80045a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045a2:	f7fc ff45 	bl	8001430 <HAL_GetTick>
 80045a6:	0003      	movs	r3, r0
 80045a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1dba      	adds	r2, r7, #6
 80045ae:	2150      	movs	r1, #80	@ 0x50
 80045b0:	8812      	ldrh	r2, [r2, #0]
 80045b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1dba      	adds	r2, r7, #6
 80045b8:	2152      	movs	r1, #82	@ 0x52
 80045ba:	8812      	ldrh	r2, [r2, #0]
 80045bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	2380      	movs	r3, #128	@ 0x80
 80045c4:	015b      	lsls	r3, r3, #5
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d108      	bne.n	80045dc <HAL_UART_Transmit+0x94>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d104      	bne.n	80045dc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	e003      	b.n	80045e4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045e4:	e02f      	b.n	8004646 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	0013      	movs	r3, r2
 80045f0:	2200      	movs	r2, #0
 80045f2:	2180      	movs	r1, #128	@ 0x80
 80045f4:	f000 fc42 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 80045f8:	1e03      	subs	r3, r0, #0
 80045fa:	d004      	beq.n	8004606 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e03b      	b.n	800467e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10b      	bne.n	8004624 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	001a      	movs	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	05d2      	lsls	r2, r2, #23
 8004618:	0dd2      	lsrs	r2, r2, #23
 800461a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	3302      	adds	r3, #2
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	e007      	b.n	8004634 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	781a      	ldrb	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3301      	adds	r3, #1
 8004632:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2252      	movs	r2, #82	@ 0x52
 8004638:	5a9b      	ldrh	r3, [r3, r2]
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b299      	uxth	r1, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2252      	movs	r2, #82	@ 0x52
 8004644:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2252      	movs	r2, #82	@ 0x52
 800464a:	5a9b      	ldrh	r3, [r3, r2]
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1c9      	bne.n	80045e6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	0013      	movs	r3, r2
 800465c:	2200      	movs	r2, #0
 800465e:	2140      	movs	r1, #64	@ 0x40
 8004660:	f000 fc0c 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004664:	1e03      	subs	r3, r0, #0
 8004666:	d004      	beq.n	8004672 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2220      	movs	r2, #32
 800466c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e005      	b.n	800467e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2220      	movs	r2, #32
 8004676:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	e000      	b.n	800467e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800467c:	2302      	movs	r3, #2
  }
}
 800467e:	0018      	movs	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	b008      	add	sp, #32
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004688:	b5b0      	push	{r4, r5, r7, lr}
 800468a:	b08e      	sub	sp, #56	@ 0x38
 800468c:	af00      	add	r7, sp, #0
 800468e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004690:	231a      	movs	r3, #26
 8004692:	2218      	movs	r2, #24
 8004694:	189b      	adds	r3, r3, r2
 8004696:	19db      	adds	r3, r3, r7
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	431a      	orrs	r2, r3
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4ac3      	ldr	r2, [pc, #780]	@ (80049c8 <UART_SetConfig+0x340>)
 80046bc:	4013      	ands	r3, r2
 80046be:	0019      	movs	r1, r3
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046c6:	430a      	orrs	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4abe      	ldr	r2, [pc, #760]	@ (80049cc <UART_SetConfig+0x344>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	0019      	movs	r1, r3
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4ab8      	ldr	r2, [pc, #736]	@ (80049d0 <UART_SetConfig+0x348>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d004      	beq.n	80046fc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046f8:	4313      	orrs	r3, r2
 80046fa:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	4ab4      	ldr	r2, [pc, #720]	@ (80049d4 <UART_SetConfig+0x34c>)
 8004704:	4013      	ands	r3, r2
 8004706:	0019      	movs	r1, r3
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800470e:	430a      	orrs	r2, r1
 8004710:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4ab0      	ldr	r2, [pc, #704]	@ (80049d8 <UART_SetConfig+0x350>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d131      	bne.n	8004780 <UART_SetConfig+0xf8>
 800471c:	4baf      	ldr	r3, [pc, #700]	@ (80049dc <UART_SetConfig+0x354>)
 800471e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004720:	2203      	movs	r2, #3
 8004722:	4013      	ands	r3, r2
 8004724:	2b03      	cmp	r3, #3
 8004726:	d01d      	beq.n	8004764 <UART_SetConfig+0xdc>
 8004728:	d823      	bhi.n	8004772 <UART_SetConfig+0xea>
 800472a:	2b02      	cmp	r3, #2
 800472c:	d00c      	beq.n	8004748 <UART_SetConfig+0xc0>
 800472e:	d820      	bhi.n	8004772 <UART_SetConfig+0xea>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <UART_SetConfig+0xb2>
 8004734:	2b01      	cmp	r3, #1
 8004736:	d00e      	beq.n	8004756 <UART_SetConfig+0xce>
 8004738:	e01b      	b.n	8004772 <UART_SetConfig+0xea>
 800473a:	231b      	movs	r3, #27
 800473c:	2218      	movs	r2, #24
 800473e:	189b      	adds	r3, r3, r2
 8004740:	19db      	adds	r3, r3, r7
 8004742:	2201      	movs	r2, #1
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	e0b4      	b.n	80048b2 <UART_SetConfig+0x22a>
 8004748:	231b      	movs	r3, #27
 800474a:	2218      	movs	r2, #24
 800474c:	189b      	adds	r3, r3, r2
 800474e:	19db      	adds	r3, r3, r7
 8004750:	2202      	movs	r2, #2
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	e0ad      	b.n	80048b2 <UART_SetConfig+0x22a>
 8004756:	231b      	movs	r3, #27
 8004758:	2218      	movs	r2, #24
 800475a:	189b      	adds	r3, r3, r2
 800475c:	19db      	adds	r3, r3, r7
 800475e:	2204      	movs	r2, #4
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	e0a6      	b.n	80048b2 <UART_SetConfig+0x22a>
 8004764:	231b      	movs	r3, #27
 8004766:	2218      	movs	r2, #24
 8004768:	189b      	adds	r3, r3, r2
 800476a:	19db      	adds	r3, r3, r7
 800476c:	2208      	movs	r2, #8
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e09f      	b.n	80048b2 <UART_SetConfig+0x22a>
 8004772:	231b      	movs	r3, #27
 8004774:	2218      	movs	r2, #24
 8004776:	189b      	adds	r3, r3, r2
 8004778:	19db      	adds	r3, r3, r7
 800477a:	2210      	movs	r2, #16
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	e098      	b.n	80048b2 <UART_SetConfig+0x22a>
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a96      	ldr	r2, [pc, #600]	@ (80049e0 <UART_SetConfig+0x358>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d131      	bne.n	80047ee <UART_SetConfig+0x166>
 800478a:	4b94      	ldr	r3, [pc, #592]	@ (80049dc <UART_SetConfig+0x354>)
 800478c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478e:	220c      	movs	r2, #12
 8004790:	4013      	ands	r3, r2
 8004792:	2b0c      	cmp	r3, #12
 8004794:	d01d      	beq.n	80047d2 <UART_SetConfig+0x14a>
 8004796:	d823      	bhi.n	80047e0 <UART_SetConfig+0x158>
 8004798:	2b08      	cmp	r3, #8
 800479a:	d00c      	beq.n	80047b6 <UART_SetConfig+0x12e>
 800479c:	d820      	bhi.n	80047e0 <UART_SetConfig+0x158>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <UART_SetConfig+0x120>
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d00e      	beq.n	80047c4 <UART_SetConfig+0x13c>
 80047a6:	e01b      	b.n	80047e0 <UART_SetConfig+0x158>
 80047a8:	231b      	movs	r3, #27
 80047aa:	2218      	movs	r2, #24
 80047ac:	189b      	adds	r3, r3, r2
 80047ae:	19db      	adds	r3, r3, r7
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
 80047b4:	e07d      	b.n	80048b2 <UART_SetConfig+0x22a>
 80047b6:	231b      	movs	r3, #27
 80047b8:	2218      	movs	r2, #24
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	19db      	adds	r3, r3, r7
 80047be:	2202      	movs	r2, #2
 80047c0:	701a      	strb	r2, [r3, #0]
 80047c2:	e076      	b.n	80048b2 <UART_SetConfig+0x22a>
 80047c4:	231b      	movs	r3, #27
 80047c6:	2218      	movs	r2, #24
 80047c8:	189b      	adds	r3, r3, r2
 80047ca:	19db      	adds	r3, r3, r7
 80047cc:	2204      	movs	r2, #4
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	e06f      	b.n	80048b2 <UART_SetConfig+0x22a>
 80047d2:	231b      	movs	r3, #27
 80047d4:	2218      	movs	r2, #24
 80047d6:	189b      	adds	r3, r3, r2
 80047d8:	19db      	adds	r3, r3, r7
 80047da:	2208      	movs	r2, #8
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e068      	b.n	80048b2 <UART_SetConfig+0x22a>
 80047e0:	231b      	movs	r3, #27
 80047e2:	2218      	movs	r2, #24
 80047e4:	189b      	adds	r3, r3, r2
 80047e6:	19db      	adds	r3, r3, r7
 80047e8:	2210      	movs	r2, #16
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e061      	b.n	80048b2 <UART_SetConfig+0x22a>
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a7c      	ldr	r2, [pc, #496]	@ (80049e4 <UART_SetConfig+0x35c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d106      	bne.n	8004806 <UART_SetConfig+0x17e>
 80047f8:	231b      	movs	r3, #27
 80047fa:	2218      	movs	r2, #24
 80047fc:	189b      	adds	r3, r3, r2
 80047fe:	19db      	adds	r3, r3, r7
 8004800:	2200      	movs	r2, #0
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	e055      	b.n	80048b2 <UART_SetConfig+0x22a>
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a77      	ldr	r2, [pc, #476]	@ (80049e8 <UART_SetConfig+0x360>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d106      	bne.n	800481e <UART_SetConfig+0x196>
 8004810:	231b      	movs	r3, #27
 8004812:	2218      	movs	r2, #24
 8004814:	189b      	adds	r3, r3, r2
 8004816:	19db      	adds	r3, r3, r7
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	e049      	b.n	80048b2 <UART_SetConfig+0x22a>
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a6b      	ldr	r2, [pc, #428]	@ (80049d0 <UART_SetConfig+0x348>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d13e      	bne.n	80048a6 <UART_SetConfig+0x21e>
 8004828:	4b6c      	ldr	r3, [pc, #432]	@ (80049dc <UART_SetConfig+0x354>)
 800482a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800482c:	23c0      	movs	r3, #192	@ 0xc0
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	4013      	ands	r3, r2
 8004832:	22c0      	movs	r2, #192	@ 0xc0
 8004834:	0112      	lsls	r2, r2, #4
 8004836:	4293      	cmp	r3, r2
 8004838:	d027      	beq.n	800488a <UART_SetConfig+0x202>
 800483a:	22c0      	movs	r2, #192	@ 0xc0
 800483c:	0112      	lsls	r2, r2, #4
 800483e:	4293      	cmp	r3, r2
 8004840:	d82a      	bhi.n	8004898 <UART_SetConfig+0x210>
 8004842:	2280      	movs	r2, #128	@ 0x80
 8004844:	0112      	lsls	r2, r2, #4
 8004846:	4293      	cmp	r3, r2
 8004848:	d011      	beq.n	800486e <UART_SetConfig+0x1e6>
 800484a:	2280      	movs	r2, #128	@ 0x80
 800484c:	0112      	lsls	r2, r2, #4
 800484e:	4293      	cmp	r3, r2
 8004850:	d822      	bhi.n	8004898 <UART_SetConfig+0x210>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d004      	beq.n	8004860 <UART_SetConfig+0x1d8>
 8004856:	2280      	movs	r2, #128	@ 0x80
 8004858:	00d2      	lsls	r2, r2, #3
 800485a:	4293      	cmp	r3, r2
 800485c:	d00e      	beq.n	800487c <UART_SetConfig+0x1f4>
 800485e:	e01b      	b.n	8004898 <UART_SetConfig+0x210>
 8004860:	231b      	movs	r3, #27
 8004862:	2218      	movs	r2, #24
 8004864:	189b      	adds	r3, r3, r2
 8004866:	19db      	adds	r3, r3, r7
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
 800486c:	e021      	b.n	80048b2 <UART_SetConfig+0x22a>
 800486e:	231b      	movs	r3, #27
 8004870:	2218      	movs	r2, #24
 8004872:	189b      	adds	r3, r3, r2
 8004874:	19db      	adds	r3, r3, r7
 8004876:	2202      	movs	r2, #2
 8004878:	701a      	strb	r2, [r3, #0]
 800487a:	e01a      	b.n	80048b2 <UART_SetConfig+0x22a>
 800487c:	231b      	movs	r3, #27
 800487e:	2218      	movs	r2, #24
 8004880:	189b      	adds	r3, r3, r2
 8004882:	19db      	adds	r3, r3, r7
 8004884:	2204      	movs	r2, #4
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	e013      	b.n	80048b2 <UART_SetConfig+0x22a>
 800488a:	231b      	movs	r3, #27
 800488c:	2218      	movs	r2, #24
 800488e:	189b      	adds	r3, r3, r2
 8004890:	19db      	adds	r3, r3, r7
 8004892:	2208      	movs	r2, #8
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	e00c      	b.n	80048b2 <UART_SetConfig+0x22a>
 8004898:	231b      	movs	r3, #27
 800489a:	2218      	movs	r2, #24
 800489c:	189b      	adds	r3, r3, r2
 800489e:	19db      	adds	r3, r3, r7
 80048a0:	2210      	movs	r2, #16
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	e005      	b.n	80048b2 <UART_SetConfig+0x22a>
 80048a6:	231b      	movs	r3, #27
 80048a8:	2218      	movs	r2, #24
 80048aa:	189b      	adds	r3, r3, r2
 80048ac:	19db      	adds	r3, r3, r7
 80048ae:	2210      	movs	r2, #16
 80048b0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a46      	ldr	r2, [pc, #280]	@ (80049d0 <UART_SetConfig+0x348>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d000      	beq.n	80048be <UART_SetConfig+0x236>
 80048bc:	e09a      	b.n	80049f4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048be:	231b      	movs	r3, #27
 80048c0:	2218      	movs	r2, #24
 80048c2:	189b      	adds	r3, r3, r2
 80048c4:	19db      	adds	r3, r3, r7
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d01d      	beq.n	8004908 <UART_SetConfig+0x280>
 80048cc:	dc20      	bgt.n	8004910 <UART_SetConfig+0x288>
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d015      	beq.n	80048fe <UART_SetConfig+0x276>
 80048d2:	dc1d      	bgt.n	8004910 <UART_SetConfig+0x288>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <UART_SetConfig+0x256>
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d005      	beq.n	80048e8 <UART_SetConfig+0x260>
 80048dc:	e018      	b.n	8004910 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048de:	f7fe f839 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 80048e2:	0003      	movs	r3, r0
 80048e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048e6:	e01c      	b.n	8004922 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048e8:	4b3c      	ldr	r3, [pc, #240]	@ (80049dc <UART_SetConfig+0x354>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2210      	movs	r2, #16
 80048ee:	4013      	ands	r3, r2
 80048f0:	d002      	beq.n	80048f8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80048f2:	4b3e      	ldr	r3, [pc, #248]	@ (80049ec <UART_SetConfig+0x364>)
 80048f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048f6:	e014      	b.n	8004922 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80048f8:	4b3d      	ldr	r3, [pc, #244]	@ (80049f0 <UART_SetConfig+0x368>)
 80048fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048fc:	e011      	b.n	8004922 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048fe:	f7fd ff79 	bl	80027f4 <HAL_RCC_GetSysClockFreq>
 8004902:	0003      	movs	r3, r0
 8004904:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004906:	e00c      	b.n	8004922 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004908:	2380      	movs	r3, #128	@ 0x80
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800490e:	e008      	b.n	8004922 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004914:	231a      	movs	r3, #26
 8004916:	2218      	movs	r2, #24
 8004918:	189b      	adds	r3, r3, r2
 800491a:	19db      	adds	r3, r3, r7
 800491c:	2201      	movs	r2, #1
 800491e:	701a      	strb	r2, [r3, #0]
        break;
 8004920:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d100      	bne.n	800492a <UART_SetConfig+0x2a2>
 8004928:	e133      	b.n	8004b92 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	0013      	movs	r3, r2
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	189b      	adds	r3, r3, r2
 8004934:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004936:	429a      	cmp	r2, r3
 8004938:	d305      	bcc.n	8004946 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004942:	429a      	cmp	r2, r3
 8004944:	d906      	bls.n	8004954 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004946:	231a      	movs	r3, #26
 8004948:	2218      	movs	r2, #24
 800494a:	189b      	adds	r3, r3, r2
 800494c:	19db      	adds	r3, r3, r7
 800494e:	2201      	movs	r2, #1
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	e11e      	b.n	8004b92 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	6939      	ldr	r1, [r7, #16]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	000b      	movs	r3, r1
 8004962:	0e1b      	lsrs	r3, r3, #24
 8004964:	0010      	movs	r0, r2
 8004966:	0205      	lsls	r5, r0, #8
 8004968:	431d      	orrs	r5, r3
 800496a:	000b      	movs	r3, r1
 800496c:	021c      	lsls	r4, r3, #8
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	085b      	lsrs	r3, r3, #1
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	68b8      	ldr	r0, [r7, #8]
 800497c:	68f9      	ldr	r1, [r7, #12]
 800497e:	1900      	adds	r0, r0, r4
 8004980:	4169      	adcs	r1, r5
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	603b      	str	r3, [r7, #0]
 8004988:	2300      	movs	r3, #0
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f7fb fc46 	bl	8000220 <__aeabi_uldivmod>
 8004994:	0002      	movs	r2, r0
 8004996:	000b      	movs	r3, r1
 8004998:	0013      	movs	r3, r2
 800499a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800499c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800499e:	23c0      	movs	r3, #192	@ 0xc0
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d309      	bcc.n	80049ba <UART_SetConfig+0x332>
 80049a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049a8:	2380      	movs	r3, #128	@ 0x80
 80049aa:	035b      	lsls	r3, r3, #13
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d204      	bcs.n	80049ba <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049b6:	60da      	str	r2, [r3, #12]
 80049b8:	e0eb      	b.n	8004b92 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80049ba:	231a      	movs	r3, #26
 80049bc:	2218      	movs	r2, #24
 80049be:	189b      	adds	r3, r3, r2
 80049c0:	19db      	adds	r3, r3, r7
 80049c2:	2201      	movs	r2, #1
 80049c4:	701a      	strb	r2, [r3, #0]
 80049c6:	e0e4      	b.n	8004b92 <UART_SetConfig+0x50a>
 80049c8:	efff69f3 	.word	0xefff69f3
 80049cc:	ffffcfff 	.word	0xffffcfff
 80049d0:	40004800 	.word	0x40004800
 80049d4:	fffff4ff 	.word	0xfffff4ff
 80049d8:	40013800 	.word	0x40013800
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40004400 	.word	0x40004400
 80049e4:	40004c00 	.word	0x40004c00
 80049e8:	40005000 	.word	0x40005000
 80049ec:	003d0900 	.word	0x003d0900
 80049f0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	2380      	movs	r3, #128	@ 0x80
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d000      	beq.n	8004a02 <UART_SetConfig+0x37a>
 8004a00:	e070      	b.n	8004ae4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8004a02:	231b      	movs	r3, #27
 8004a04:	2218      	movs	r2, #24
 8004a06:	189b      	adds	r3, r3, r2
 8004a08:	19db      	adds	r3, r3, r7
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d822      	bhi.n	8004a56 <UART_SetConfig+0x3ce>
 8004a10:	009a      	lsls	r2, r3, #2
 8004a12:	4b67      	ldr	r3, [pc, #412]	@ (8004bb0 <UART_SetConfig+0x528>)
 8004a14:	18d3      	adds	r3, r2, r3
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a1a:	f7fd ff9b 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a22:	e021      	b.n	8004a68 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a24:	f7fd ffac 	bl	8002980 <HAL_RCC_GetPCLK2Freq>
 8004a28:	0003      	movs	r3, r0
 8004a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a2c:	e01c      	b.n	8004a68 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a2e:	4b61      	ldr	r3, [pc, #388]	@ (8004bb4 <UART_SetConfig+0x52c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2210      	movs	r2, #16
 8004a34:	4013      	ands	r3, r2
 8004a36:	d002      	beq.n	8004a3e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004a38:	4b5f      	ldr	r3, [pc, #380]	@ (8004bb8 <UART_SetConfig+0x530>)
 8004a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a3c:	e014      	b.n	8004a68 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8004bbc <UART_SetConfig+0x534>)
 8004a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a42:	e011      	b.n	8004a68 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a44:	f7fd fed6 	bl	80027f4 <HAL_RCC_GetSysClockFreq>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a4c:	e00c      	b.n	8004a68 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4e:	2380      	movs	r3, #128	@ 0x80
 8004a50:	021b      	lsls	r3, r3, #8
 8004a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a54:	e008      	b.n	8004a68 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004a5a:	231a      	movs	r3, #26
 8004a5c:	2218      	movs	r2, #24
 8004a5e:	189b      	adds	r3, r3, r2
 8004a60:	19db      	adds	r3, r3, r7
 8004a62:	2201      	movs	r2, #1
 8004a64:	701a      	strb	r2, [r3, #0]
        break;
 8004a66:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d100      	bne.n	8004a70 <UART_SetConfig+0x3e8>
 8004a6e:	e090      	b.n	8004b92 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a72:	005a      	lsls	r2, r3, #1
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	085b      	lsrs	r3, r3, #1
 8004a7a:	18d2      	adds	r2, r2, r3
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	0019      	movs	r1, r3
 8004a82:	0010      	movs	r0, r2
 8004a84:	f7fb fb40 	bl	8000108 <__udivsi3>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8e:	2b0f      	cmp	r3, #15
 8004a90:	d921      	bls.n	8004ad6 <UART_SetConfig+0x44e>
 8004a92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a94:	2380      	movs	r3, #128	@ 0x80
 8004a96:	025b      	lsls	r3, r3, #9
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d21c      	bcs.n	8004ad6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	200e      	movs	r0, #14
 8004aa2:	2418      	movs	r4, #24
 8004aa4:	1903      	adds	r3, r0, r4
 8004aa6:	19db      	adds	r3, r3, r7
 8004aa8:	210f      	movs	r1, #15
 8004aaa:	438a      	bics	r2, r1
 8004aac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab0:	085b      	lsrs	r3, r3, #1
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2207      	movs	r2, #7
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	b299      	uxth	r1, r3
 8004aba:	1903      	adds	r3, r0, r4
 8004abc:	19db      	adds	r3, r3, r7
 8004abe:	1902      	adds	r2, r0, r4
 8004ac0:	19d2      	adds	r2, r2, r7
 8004ac2:	8812      	ldrh	r2, [r2, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	1902      	adds	r2, r0, r4
 8004ace:	19d2      	adds	r2, r2, r7
 8004ad0:	8812      	ldrh	r2, [r2, #0]
 8004ad2:	60da      	str	r2, [r3, #12]
 8004ad4:	e05d      	b.n	8004b92 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad6:	231a      	movs	r3, #26
 8004ad8:	2218      	movs	r2, #24
 8004ada:	189b      	adds	r3, r3, r2
 8004adc:	19db      	adds	r3, r3, r7
 8004ade:	2201      	movs	r2, #1
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	e056      	b.n	8004b92 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ae4:	231b      	movs	r3, #27
 8004ae6:	2218      	movs	r2, #24
 8004ae8:	189b      	adds	r3, r3, r2
 8004aea:	19db      	adds	r3, r3, r7
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d822      	bhi.n	8004b38 <UART_SetConfig+0x4b0>
 8004af2:	009a      	lsls	r2, r3, #2
 8004af4:	4b32      	ldr	r3, [pc, #200]	@ (8004bc0 <UART_SetConfig+0x538>)
 8004af6:	18d3      	adds	r3, r2, r3
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004afc:	f7fd ff2a 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 8004b00:	0003      	movs	r3, r0
 8004b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b04:	e021      	b.n	8004b4a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b06:	f7fd ff3b 	bl	8002980 <HAL_RCC_GetPCLK2Freq>
 8004b0a:	0003      	movs	r3, r0
 8004b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b0e:	e01c      	b.n	8004b4a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b10:	4b28      	ldr	r3, [pc, #160]	@ (8004bb4 <UART_SetConfig+0x52c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2210      	movs	r2, #16
 8004b16:	4013      	ands	r3, r2
 8004b18:	d002      	beq.n	8004b20 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004b1a:	4b27      	ldr	r3, [pc, #156]	@ (8004bb8 <UART_SetConfig+0x530>)
 8004b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b1e:	e014      	b.n	8004b4a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004b20:	4b26      	ldr	r3, [pc, #152]	@ (8004bbc <UART_SetConfig+0x534>)
 8004b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b24:	e011      	b.n	8004b4a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b26:	f7fd fe65 	bl	80027f4 <HAL_RCC_GetSysClockFreq>
 8004b2a:	0003      	movs	r3, r0
 8004b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b2e:	e00c      	b.n	8004b4a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b30:	2380      	movs	r3, #128	@ 0x80
 8004b32:	021b      	lsls	r3, r3, #8
 8004b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b36:	e008      	b.n	8004b4a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004b3c:	231a      	movs	r3, #26
 8004b3e:	2218      	movs	r2, #24
 8004b40:	189b      	adds	r3, r3, r2
 8004b42:	19db      	adds	r3, r3, r7
 8004b44:	2201      	movs	r2, #1
 8004b46:	701a      	strb	r2, [r3, #0]
        break;
 8004b48:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d020      	beq.n	8004b92 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	085a      	lsrs	r2, r3, #1
 8004b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b58:	18d2      	adds	r2, r2, r3
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	0019      	movs	r1, r3
 8004b60:	0010      	movs	r0, r2
 8004b62:	f7fb fad1 	bl	8000108 <__udivsi3>
 8004b66:	0003      	movs	r3, r0
 8004b68:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6c:	2b0f      	cmp	r3, #15
 8004b6e:	d90a      	bls.n	8004b86 <UART_SetConfig+0x4fe>
 8004b70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b72:	2380      	movs	r3, #128	@ 0x80
 8004b74:	025b      	lsls	r3, r3, #9
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d205      	bcs.n	8004b86 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60da      	str	r2, [r3, #12]
 8004b84:	e005      	b.n	8004b92 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004b86:	231a      	movs	r3, #26
 8004b88:	2218      	movs	r2, #24
 8004b8a:	189b      	adds	r3, r3, r2
 8004b8c:	19db      	adds	r3, r3, r7
 8004b8e:	2201      	movs	r2, #1
 8004b90:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	2200      	movs	r2, #0
 8004b96:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b9e:	231a      	movs	r3, #26
 8004ba0:	2218      	movs	r2, #24
 8004ba2:	189b      	adds	r3, r3, r2
 8004ba4:	19db      	adds	r3, r3, r7
 8004ba6:	781b      	ldrb	r3, [r3, #0]
}
 8004ba8:	0018      	movs	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b00e      	add	sp, #56	@ 0x38
 8004bae:	bdb0      	pop	{r4, r5, r7, pc}
 8004bb0:	08005a60 	.word	0x08005a60
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	003d0900 	.word	0x003d0900
 8004bbc:	00f42400 	.word	0x00f42400
 8004bc0:	08005a84 	.word	0x08005a84

08004bc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d00b      	beq.n	8004bee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	4a4a      	ldr	r2, [pc, #296]	@ (8004d08 <UART_AdvFeatureConfig+0x144>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	0019      	movs	r1, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d00b      	beq.n	8004c10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	4a43      	ldr	r2, [pc, #268]	@ (8004d0c <UART_AdvFeatureConfig+0x148>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	0019      	movs	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c14:	2204      	movs	r2, #4
 8004c16:	4013      	ands	r3, r2
 8004c18:	d00b      	beq.n	8004c32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4a3b      	ldr	r2, [pc, #236]	@ (8004d10 <UART_AdvFeatureConfig+0x14c>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	0019      	movs	r1, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c36:	2208      	movs	r2, #8
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d00b      	beq.n	8004c54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	4a34      	ldr	r2, [pc, #208]	@ (8004d14 <UART_AdvFeatureConfig+0x150>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	0019      	movs	r1, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	2210      	movs	r2, #16
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d00b      	beq.n	8004c76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4a2c      	ldr	r2, [pc, #176]	@ (8004d18 <UART_AdvFeatureConfig+0x154>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	0019      	movs	r1, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d00b      	beq.n	8004c98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	4a25      	ldr	r2, [pc, #148]	@ (8004d1c <UART_AdvFeatureConfig+0x158>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	0019      	movs	r1, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9c:	2240      	movs	r2, #64	@ 0x40
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d01d      	beq.n	8004cde <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d20 <UART_AdvFeatureConfig+0x15c>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	0019      	movs	r1, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cbe:	2380      	movs	r3, #128	@ 0x80
 8004cc0:	035b      	lsls	r3, r3, #13
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d10b      	bne.n	8004cde <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	4a15      	ldr	r2, [pc, #84]	@ (8004d24 <UART_AdvFeatureConfig+0x160>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	0019      	movs	r1, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce2:	2280      	movs	r2, #128	@ 0x80
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d00b      	beq.n	8004d00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	4a0e      	ldr	r2, [pc, #56]	@ (8004d28 <UART_AdvFeatureConfig+0x164>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	0019      	movs	r1, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	605a      	str	r2, [r3, #4]
  }
}
 8004d00:	46c0      	nop			@ (mov r8, r8)
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b002      	add	sp, #8
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	fffdffff 	.word	0xfffdffff
 8004d0c:	fffeffff 	.word	0xfffeffff
 8004d10:	fffbffff 	.word	0xfffbffff
 8004d14:	ffff7fff 	.word	0xffff7fff
 8004d18:	ffffefff 	.word	0xffffefff
 8004d1c:	ffffdfff 	.word	0xffffdfff
 8004d20:	ffefffff 	.word	0xffefffff
 8004d24:	ff9fffff 	.word	0xff9fffff
 8004d28:	fff7ffff 	.word	0xfff7ffff

08004d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b092      	sub	sp, #72	@ 0x48
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2284      	movs	r2, #132	@ 0x84
 8004d38:	2100      	movs	r1, #0
 8004d3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d3c:	f7fc fb78 	bl	8001430 <HAL_GetTick>
 8004d40:	0003      	movs	r3, r0
 8004d42:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2208      	movs	r2, #8
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d12c      	bne.n	8004dac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d54:	2280      	movs	r2, #128	@ 0x80
 8004d56:	0391      	lsls	r1, r2, #14
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	4a46      	ldr	r2, [pc, #280]	@ (8004e74 <UART_CheckIdleState+0x148>)
 8004d5c:	9200      	str	r2, [sp, #0]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f000 f88c 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004d64:	1e03      	subs	r3, r0, #0
 8004d66:	d021      	beq.n	8004dac <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d68:	f3ef 8310 	mrs	r3, PRIMASK
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d72:	2301      	movs	r3, #1
 8004d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d78:	f383 8810 	msr	PRIMASK, r3
}
 8004d7c:	46c0      	nop			@ (mov r8, r8)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2180      	movs	r1, #128	@ 0x80
 8004d8a:	438a      	bics	r2, r1
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d94:	f383 8810 	msr	PRIMASK, r3
}
 8004d98:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2278      	movs	r2, #120	@ 0x78
 8004da4:	2100      	movs	r1, #0
 8004da6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e05f      	b.n	8004e6c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2204      	movs	r2, #4
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d146      	bne.n	8004e48 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dbc:	2280      	movs	r2, #128	@ 0x80
 8004dbe:	03d1      	lsls	r1, r2, #15
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	4a2c      	ldr	r2, [pc, #176]	@ (8004e74 <UART_CheckIdleState+0x148>)
 8004dc4:	9200      	str	r2, [sp, #0]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f000 f858 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004dcc:	1e03      	subs	r3, r0, #0
 8004dce:	d03b      	beq.n	8004e48 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dda:	2301      	movs	r3, #1
 8004ddc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f383 8810 	msr	PRIMASK, r3
}
 8004de4:	46c0      	nop			@ (mov r8, r8)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4921      	ldr	r1, [pc, #132]	@ (8004e78 <UART_CheckIdleState+0x14c>)
 8004df2:	400a      	ands	r2, r1
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f383 8810 	msr	PRIMASK, r3
}
 8004e00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e02:	f3ef 8310 	mrs	r3, PRIMASK
 8004e06:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e08:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f383 8810 	msr	PRIMASK, r3
}
 8004e16:	46c0      	nop			@ (mov r8, r8)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2101      	movs	r1, #1
 8004e24:	438a      	bics	r2, r1
 8004e26:	609a      	str	r2, [r3, #8]
 8004e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	f383 8810 	msr	PRIMASK, r3
}
 8004e32:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2280      	movs	r2, #128	@ 0x80
 8004e38:	2120      	movs	r1, #32
 8004e3a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2278      	movs	r2, #120	@ 0x78
 8004e40:	2100      	movs	r1, #0
 8004e42:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e011      	b.n	8004e6c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2280      	movs	r2, #128	@ 0x80
 8004e52:	2120      	movs	r1, #32
 8004e54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2278      	movs	r2, #120	@ 0x78
 8004e66:	2100      	movs	r1, #0
 8004e68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b010      	add	sp, #64	@ 0x40
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	01ffffff 	.word	0x01ffffff
 8004e78:	fffffedf 	.word	0xfffffedf

08004e7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	1dfb      	adds	r3, r7, #7
 8004e8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8c:	e04b      	b.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	3301      	adds	r3, #1
 8004e92:	d048      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e94:	f7fc facc 	bl	8001430 <HAL_GetTick>
 8004e98:	0002      	movs	r2, r0
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d302      	bcc.n	8004eaa <UART_WaitOnFlagUntilTimeout+0x2e>
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e04b      	b.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2204      	movs	r2, #4
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d035      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d111      	bne.n	8004eec <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	f000 f83c 	bl	8004f50 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2284      	movs	r2, #132	@ 0x84
 8004edc:	2108      	movs	r1, #8
 8004ede:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2278      	movs	r2, #120	@ 0x78
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e02c      	b.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69da      	ldr	r2, [r3, #28]
 8004ef2:	2380      	movs	r3, #128	@ 0x80
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	2380      	movs	r3, #128	@ 0x80
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d112      	bne.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2280      	movs	r2, #128	@ 0x80
 8004f06:	0112      	lsls	r2, r2, #4
 8004f08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f000 f81f 	bl	8004f50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2284      	movs	r2, #132	@ 0x84
 8004f16:	2120      	movs	r1, #32
 8004f18:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2278      	movs	r2, #120	@ 0x78
 8004f1e:	2100      	movs	r1, #0
 8004f20:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e00f      	b.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	425a      	negs	r2, r3
 8004f36:	4153      	adcs	r3, r2
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	001a      	movs	r2, r3
 8004f3c:	1dfb      	adds	r3, r7, #7
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d0a4      	beq.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	0018      	movs	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b004      	add	sp, #16
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08e      	sub	sp, #56	@ 0x38
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f58:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5c:	617b      	str	r3, [r7, #20]
  return(result);
 8004f5e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f62:	2301      	movs	r3, #1
 8004f64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	f383 8810 	msr	PRIMASK, r3
}
 8004f6c:	46c0      	nop			@ (mov r8, r8)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4926      	ldr	r1, [pc, #152]	@ (8005014 <UART_EndRxTransfer+0xc4>)
 8004f7a:	400a      	ands	r2, r1
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f383 8810 	msr	PRIMASK, r3
}
 8004f88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f8e:	623b      	str	r3, [r7, #32]
  return(result);
 8004f90:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f92:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f94:	2301      	movs	r3, #1
 8004f96:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9a:	f383 8810 	msr	PRIMASK, r3
}
 8004f9e:	46c0      	nop			@ (mov r8, r8)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2101      	movs	r1, #1
 8004fac:	438a      	bics	r2, r1
 8004fae:	609a      	str	r2, [r3, #8]
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb6:	f383 8810 	msr	PRIMASK, r3
}
 8004fba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d118      	bne.n	8004ff6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fce:	2301      	movs	r3, #1
 8004fd0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f383 8810 	msr	PRIMASK, r3
}
 8004fd8:	46c0      	nop			@ (mov r8, r8)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2110      	movs	r1, #16
 8004fe6:	438a      	bics	r2, r1
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f383 8810 	msr	PRIMASK, r3
}
 8004ff4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2280      	movs	r2, #128	@ 0x80
 8004ffa:	2120      	movs	r1, #32
 8004ffc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800500a:	46c0      	nop			@ (mov r8, r8)
 800500c:	46bd      	mov	sp, r7
 800500e:	b00e      	add	sp, #56	@ 0x38
 8005010:	bd80      	pop	{r7, pc}
 8005012:	46c0      	nop			@ (mov r8, r8)
 8005014:	fffffedf 	.word	0xfffffedf

08005018 <std>:
 8005018:	2300      	movs	r3, #0
 800501a:	b510      	push	{r4, lr}
 800501c:	0004      	movs	r4, r0
 800501e:	6003      	str	r3, [r0, #0]
 8005020:	6043      	str	r3, [r0, #4]
 8005022:	6083      	str	r3, [r0, #8]
 8005024:	8181      	strh	r1, [r0, #12]
 8005026:	6643      	str	r3, [r0, #100]	@ 0x64
 8005028:	81c2      	strh	r2, [r0, #14]
 800502a:	6103      	str	r3, [r0, #16]
 800502c:	6143      	str	r3, [r0, #20]
 800502e:	6183      	str	r3, [r0, #24]
 8005030:	0019      	movs	r1, r3
 8005032:	2208      	movs	r2, #8
 8005034:	305c      	adds	r0, #92	@ 0x5c
 8005036:	f000 f9ff 	bl	8005438 <memset>
 800503a:	4b0b      	ldr	r3, [pc, #44]	@ (8005068 <std+0x50>)
 800503c:	6224      	str	r4, [r4, #32]
 800503e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005040:	4b0a      	ldr	r3, [pc, #40]	@ (800506c <std+0x54>)
 8005042:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005044:	4b0a      	ldr	r3, [pc, #40]	@ (8005070 <std+0x58>)
 8005046:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005048:	4b0a      	ldr	r3, [pc, #40]	@ (8005074 <std+0x5c>)
 800504a:	6323      	str	r3, [r4, #48]	@ 0x30
 800504c:	4b0a      	ldr	r3, [pc, #40]	@ (8005078 <std+0x60>)
 800504e:	429c      	cmp	r4, r3
 8005050:	d005      	beq.n	800505e <std+0x46>
 8005052:	4b0a      	ldr	r3, [pc, #40]	@ (800507c <std+0x64>)
 8005054:	429c      	cmp	r4, r3
 8005056:	d002      	beq.n	800505e <std+0x46>
 8005058:	4b09      	ldr	r3, [pc, #36]	@ (8005080 <std+0x68>)
 800505a:	429c      	cmp	r4, r3
 800505c:	d103      	bne.n	8005066 <std+0x4e>
 800505e:	0020      	movs	r0, r4
 8005060:	3058      	adds	r0, #88	@ 0x58
 8005062:	f000 fa69 	bl	8005538 <__retarget_lock_init_recursive>
 8005066:	bd10      	pop	{r4, pc}
 8005068:	08005261 	.word	0x08005261
 800506c:	08005289 	.word	0x08005289
 8005070:	080052c1 	.word	0x080052c1
 8005074:	080052ed 	.word	0x080052ed
 8005078:	2000463c 	.word	0x2000463c
 800507c:	200046a4 	.word	0x200046a4
 8005080:	2000470c 	.word	0x2000470c

08005084 <stdio_exit_handler>:
 8005084:	b510      	push	{r4, lr}
 8005086:	4a03      	ldr	r2, [pc, #12]	@ (8005094 <stdio_exit_handler+0x10>)
 8005088:	4903      	ldr	r1, [pc, #12]	@ (8005098 <stdio_exit_handler+0x14>)
 800508a:	4804      	ldr	r0, [pc, #16]	@ (800509c <stdio_exit_handler+0x18>)
 800508c:	f000 f86c 	bl	8005168 <_fwalk_sglue>
 8005090:	bd10      	pop	{r4, pc}
 8005092:	46c0      	nop			@ (mov r8, r8)
 8005094:	2000000c 	.word	0x2000000c
 8005098:	08005845 	.word	0x08005845
 800509c:	2000001c 	.word	0x2000001c

080050a0 <cleanup_stdio>:
 80050a0:	6841      	ldr	r1, [r0, #4]
 80050a2:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <cleanup_stdio+0x30>)
 80050a4:	b510      	push	{r4, lr}
 80050a6:	0004      	movs	r4, r0
 80050a8:	4299      	cmp	r1, r3
 80050aa:	d001      	beq.n	80050b0 <cleanup_stdio+0x10>
 80050ac:	f000 fbca 	bl	8005844 <_fflush_r>
 80050b0:	68a1      	ldr	r1, [r4, #8]
 80050b2:	4b08      	ldr	r3, [pc, #32]	@ (80050d4 <cleanup_stdio+0x34>)
 80050b4:	4299      	cmp	r1, r3
 80050b6:	d002      	beq.n	80050be <cleanup_stdio+0x1e>
 80050b8:	0020      	movs	r0, r4
 80050ba:	f000 fbc3 	bl	8005844 <_fflush_r>
 80050be:	68e1      	ldr	r1, [r4, #12]
 80050c0:	4b05      	ldr	r3, [pc, #20]	@ (80050d8 <cleanup_stdio+0x38>)
 80050c2:	4299      	cmp	r1, r3
 80050c4:	d002      	beq.n	80050cc <cleanup_stdio+0x2c>
 80050c6:	0020      	movs	r0, r4
 80050c8:	f000 fbbc 	bl	8005844 <_fflush_r>
 80050cc:	bd10      	pop	{r4, pc}
 80050ce:	46c0      	nop			@ (mov r8, r8)
 80050d0:	2000463c 	.word	0x2000463c
 80050d4:	200046a4 	.word	0x200046a4
 80050d8:	2000470c 	.word	0x2000470c

080050dc <global_stdio_init.part.0>:
 80050dc:	b510      	push	{r4, lr}
 80050de:	4b09      	ldr	r3, [pc, #36]	@ (8005104 <global_stdio_init.part.0+0x28>)
 80050e0:	4a09      	ldr	r2, [pc, #36]	@ (8005108 <global_stdio_init.part.0+0x2c>)
 80050e2:	2104      	movs	r1, #4
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	4809      	ldr	r0, [pc, #36]	@ (800510c <global_stdio_init.part.0+0x30>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	f7ff ff95 	bl	8005018 <std>
 80050ee:	2201      	movs	r2, #1
 80050f0:	2109      	movs	r1, #9
 80050f2:	4807      	ldr	r0, [pc, #28]	@ (8005110 <global_stdio_init.part.0+0x34>)
 80050f4:	f7ff ff90 	bl	8005018 <std>
 80050f8:	2202      	movs	r2, #2
 80050fa:	2112      	movs	r1, #18
 80050fc:	4805      	ldr	r0, [pc, #20]	@ (8005114 <global_stdio_init.part.0+0x38>)
 80050fe:	f7ff ff8b 	bl	8005018 <std>
 8005102:	bd10      	pop	{r4, pc}
 8005104:	20004774 	.word	0x20004774
 8005108:	08005085 	.word	0x08005085
 800510c:	2000463c 	.word	0x2000463c
 8005110:	200046a4 	.word	0x200046a4
 8005114:	2000470c 	.word	0x2000470c

08005118 <__sfp_lock_acquire>:
 8005118:	b510      	push	{r4, lr}
 800511a:	4802      	ldr	r0, [pc, #8]	@ (8005124 <__sfp_lock_acquire+0xc>)
 800511c:	f000 fa0d 	bl	800553a <__retarget_lock_acquire_recursive>
 8005120:	bd10      	pop	{r4, pc}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	2000477d 	.word	0x2000477d

08005128 <__sfp_lock_release>:
 8005128:	b510      	push	{r4, lr}
 800512a:	4802      	ldr	r0, [pc, #8]	@ (8005134 <__sfp_lock_release+0xc>)
 800512c:	f000 fa06 	bl	800553c <__retarget_lock_release_recursive>
 8005130:	bd10      	pop	{r4, pc}
 8005132:	46c0      	nop			@ (mov r8, r8)
 8005134:	2000477d 	.word	0x2000477d

08005138 <__sinit>:
 8005138:	b510      	push	{r4, lr}
 800513a:	0004      	movs	r4, r0
 800513c:	f7ff ffec 	bl	8005118 <__sfp_lock_acquire>
 8005140:	6a23      	ldr	r3, [r4, #32]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <__sinit+0x14>
 8005146:	f7ff ffef 	bl	8005128 <__sfp_lock_release>
 800514a:	bd10      	pop	{r4, pc}
 800514c:	4b04      	ldr	r3, [pc, #16]	@ (8005160 <__sinit+0x28>)
 800514e:	6223      	str	r3, [r4, #32]
 8005150:	4b04      	ldr	r3, [pc, #16]	@ (8005164 <__sinit+0x2c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f6      	bne.n	8005146 <__sinit+0xe>
 8005158:	f7ff ffc0 	bl	80050dc <global_stdio_init.part.0>
 800515c:	e7f3      	b.n	8005146 <__sinit+0xe>
 800515e:	46c0      	nop			@ (mov r8, r8)
 8005160:	080050a1 	.word	0x080050a1
 8005164:	20004774 	.word	0x20004774

08005168 <_fwalk_sglue>:
 8005168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800516a:	0014      	movs	r4, r2
 800516c:	2600      	movs	r6, #0
 800516e:	9000      	str	r0, [sp, #0]
 8005170:	9101      	str	r1, [sp, #4]
 8005172:	68a5      	ldr	r5, [r4, #8]
 8005174:	6867      	ldr	r7, [r4, #4]
 8005176:	3f01      	subs	r7, #1
 8005178:	d504      	bpl.n	8005184 <_fwalk_sglue+0x1c>
 800517a:	6824      	ldr	r4, [r4, #0]
 800517c:	2c00      	cmp	r4, #0
 800517e:	d1f8      	bne.n	8005172 <_fwalk_sglue+0xa>
 8005180:	0030      	movs	r0, r6
 8005182:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005184:	89ab      	ldrh	r3, [r5, #12]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d908      	bls.n	800519c <_fwalk_sglue+0x34>
 800518a:	220e      	movs	r2, #14
 800518c:	5eab      	ldrsh	r3, [r5, r2]
 800518e:	3301      	adds	r3, #1
 8005190:	d004      	beq.n	800519c <_fwalk_sglue+0x34>
 8005192:	0029      	movs	r1, r5
 8005194:	9800      	ldr	r0, [sp, #0]
 8005196:	9b01      	ldr	r3, [sp, #4]
 8005198:	4798      	blx	r3
 800519a:	4306      	orrs	r6, r0
 800519c:	3568      	adds	r5, #104	@ 0x68
 800519e:	e7ea      	b.n	8005176 <_fwalk_sglue+0xe>

080051a0 <_puts_r>:
 80051a0:	6a03      	ldr	r3, [r0, #32]
 80051a2:	b570      	push	{r4, r5, r6, lr}
 80051a4:	0005      	movs	r5, r0
 80051a6:	000e      	movs	r6, r1
 80051a8:	6884      	ldr	r4, [r0, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <_puts_r+0x12>
 80051ae:	f7ff ffc3 	bl	8005138 <__sinit>
 80051b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051b4:	07db      	lsls	r3, r3, #31
 80051b6:	d405      	bmi.n	80051c4 <_puts_r+0x24>
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	059b      	lsls	r3, r3, #22
 80051bc:	d402      	bmi.n	80051c4 <_puts_r+0x24>
 80051be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051c0:	f000 f9bb 	bl	800553a <__retarget_lock_acquire_recursive>
 80051c4:	89a3      	ldrh	r3, [r4, #12]
 80051c6:	071b      	lsls	r3, r3, #28
 80051c8:	d502      	bpl.n	80051d0 <_puts_r+0x30>
 80051ca:	6923      	ldr	r3, [r4, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d11f      	bne.n	8005210 <_puts_r+0x70>
 80051d0:	0021      	movs	r1, r4
 80051d2:	0028      	movs	r0, r5
 80051d4:	f000 f8d2 	bl	800537c <__swsetup_r>
 80051d8:	2800      	cmp	r0, #0
 80051da:	d019      	beq.n	8005210 <_puts_r+0x70>
 80051dc:	2501      	movs	r5, #1
 80051de:	426d      	negs	r5, r5
 80051e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051e2:	07db      	lsls	r3, r3, #31
 80051e4:	d405      	bmi.n	80051f2 <_puts_r+0x52>
 80051e6:	89a3      	ldrh	r3, [r4, #12]
 80051e8:	059b      	lsls	r3, r3, #22
 80051ea:	d402      	bmi.n	80051f2 <_puts_r+0x52>
 80051ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051ee:	f000 f9a5 	bl	800553c <__retarget_lock_release_recursive>
 80051f2:	0028      	movs	r0, r5
 80051f4:	bd70      	pop	{r4, r5, r6, pc}
 80051f6:	3601      	adds	r6, #1
 80051f8:	60a3      	str	r3, [r4, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	da04      	bge.n	8005208 <_puts_r+0x68>
 80051fe:	69a2      	ldr	r2, [r4, #24]
 8005200:	429a      	cmp	r2, r3
 8005202:	dc16      	bgt.n	8005232 <_puts_r+0x92>
 8005204:	290a      	cmp	r1, #10
 8005206:	d014      	beq.n	8005232 <_puts_r+0x92>
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	6022      	str	r2, [r4, #0]
 800520e:	7019      	strb	r1, [r3, #0]
 8005210:	68a3      	ldr	r3, [r4, #8]
 8005212:	7831      	ldrb	r1, [r6, #0]
 8005214:	3b01      	subs	r3, #1
 8005216:	2900      	cmp	r1, #0
 8005218:	d1ed      	bne.n	80051f6 <_puts_r+0x56>
 800521a:	60a3      	str	r3, [r4, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	da0f      	bge.n	8005240 <_puts_r+0xa0>
 8005220:	0022      	movs	r2, r4
 8005222:	0028      	movs	r0, r5
 8005224:	310a      	adds	r1, #10
 8005226:	f000 f867 	bl	80052f8 <__swbuf_r>
 800522a:	3001      	adds	r0, #1
 800522c:	d0d6      	beq.n	80051dc <_puts_r+0x3c>
 800522e:	250a      	movs	r5, #10
 8005230:	e7d6      	b.n	80051e0 <_puts_r+0x40>
 8005232:	0022      	movs	r2, r4
 8005234:	0028      	movs	r0, r5
 8005236:	f000 f85f 	bl	80052f8 <__swbuf_r>
 800523a:	3001      	adds	r0, #1
 800523c:	d1e8      	bne.n	8005210 <_puts_r+0x70>
 800523e:	e7cd      	b.n	80051dc <_puts_r+0x3c>
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	6022      	str	r2, [r4, #0]
 8005246:	220a      	movs	r2, #10
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	e7f0      	b.n	800522e <_puts_r+0x8e>

0800524c <puts>:
 800524c:	b510      	push	{r4, lr}
 800524e:	4b03      	ldr	r3, [pc, #12]	@ (800525c <puts+0x10>)
 8005250:	0001      	movs	r1, r0
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	f7ff ffa4 	bl	80051a0 <_puts_r>
 8005258:	bd10      	pop	{r4, pc}
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	20000018 	.word	0x20000018

08005260 <__sread>:
 8005260:	b570      	push	{r4, r5, r6, lr}
 8005262:	000c      	movs	r4, r1
 8005264:	250e      	movs	r5, #14
 8005266:	5f49      	ldrsh	r1, [r1, r5]
 8005268:	f000 f914 	bl	8005494 <_read_r>
 800526c:	2800      	cmp	r0, #0
 800526e:	db03      	blt.n	8005278 <__sread+0x18>
 8005270:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005272:	181b      	adds	r3, r3, r0
 8005274:	6563      	str	r3, [r4, #84]	@ 0x54
 8005276:	bd70      	pop	{r4, r5, r6, pc}
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	4a02      	ldr	r2, [pc, #8]	@ (8005284 <__sread+0x24>)
 800527c:	4013      	ands	r3, r2
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	e7f9      	b.n	8005276 <__sread+0x16>
 8005282:	46c0      	nop			@ (mov r8, r8)
 8005284:	ffffefff 	.word	0xffffefff

08005288 <__swrite>:
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	001f      	movs	r7, r3
 800528c:	898b      	ldrh	r3, [r1, #12]
 800528e:	0005      	movs	r5, r0
 8005290:	000c      	movs	r4, r1
 8005292:	0016      	movs	r6, r2
 8005294:	05db      	lsls	r3, r3, #23
 8005296:	d505      	bpl.n	80052a4 <__swrite+0x1c>
 8005298:	230e      	movs	r3, #14
 800529a:	5ec9      	ldrsh	r1, [r1, r3]
 800529c:	2200      	movs	r2, #0
 800529e:	2302      	movs	r3, #2
 80052a0:	f000 f8e4 	bl	800546c <_lseek_r>
 80052a4:	89a3      	ldrh	r3, [r4, #12]
 80052a6:	4a05      	ldr	r2, [pc, #20]	@ (80052bc <__swrite+0x34>)
 80052a8:	0028      	movs	r0, r5
 80052aa:	4013      	ands	r3, r2
 80052ac:	81a3      	strh	r3, [r4, #12]
 80052ae:	0032      	movs	r2, r6
 80052b0:	230e      	movs	r3, #14
 80052b2:	5ee1      	ldrsh	r1, [r4, r3]
 80052b4:	003b      	movs	r3, r7
 80052b6:	f000 f901 	bl	80054bc <_write_r>
 80052ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052bc:	ffffefff 	.word	0xffffefff

080052c0 <__sseek>:
 80052c0:	b570      	push	{r4, r5, r6, lr}
 80052c2:	000c      	movs	r4, r1
 80052c4:	250e      	movs	r5, #14
 80052c6:	5f49      	ldrsh	r1, [r1, r5]
 80052c8:	f000 f8d0 	bl	800546c <_lseek_r>
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	1c42      	adds	r2, r0, #1
 80052d0:	d103      	bne.n	80052da <__sseek+0x1a>
 80052d2:	4a05      	ldr	r2, [pc, #20]	@ (80052e8 <__sseek+0x28>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	81a3      	strh	r3, [r4, #12]
 80052d8:	bd70      	pop	{r4, r5, r6, pc}
 80052da:	2280      	movs	r2, #128	@ 0x80
 80052dc:	0152      	lsls	r2, r2, #5
 80052de:	4313      	orrs	r3, r2
 80052e0:	81a3      	strh	r3, [r4, #12]
 80052e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80052e4:	e7f8      	b.n	80052d8 <__sseek+0x18>
 80052e6:	46c0      	nop			@ (mov r8, r8)
 80052e8:	ffffefff 	.word	0xffffefff

080052ec <__sclose>:
 80052ec:	b510      	push	{r4, lr}
 80052ee:	230e      	movs	r3, #14
 80052f0:	5ec9      	ldrsh	r1, [r1, r3]
 80052f2:	f000 f8a9 	bl	8005448 <_close_r>
 80052f6:	bd10      	pop	{r4, pc}

080052f8 <__swbuf_r>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	0006      	movs	r6, r0
 80052fc:	000d      	movs	r5, r1
 80052fe:	0014      	movs	r4, r2
 8005300:	2800      	cmp	r0, #0
 8005302:	d004      	beq.n	800530e <__swbuf_r+0x16>
 8005304:	6a03      	ldr	r3, [r0, #32]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <__swbuf_r+0x16>
 800530a:	f7ff ff15 	bl	8005138 <__sinit>
 800530e:	69a3      	ldr	r3, [r4, #24]
 8005310:	60a3      	str	r3, [r4, #8]
 8005312:	89a3      	ldrh	r3, [r4, #12]
 8005314:	071b      	lsls	r3, r3, #28
 8005316:	d502      	bpl.n	800531e <__swbuf_r+0x26>
 8005318:	6923      	ldr	r3, [r4, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <__swbuf_r+0x3a>
 800531e:	0021      	movs	r1, r4
 8005320:	0030      	movs	r0, r6
 8005322:	f000 f82b 	bl	800537c <__swsetup_r>
 8005326:	2800      	cmp	r0, #0
 8005328:	d003      	beq.n	8005332 <__swbuf_r+0x3a>
 800532a:	2501      	movs	r5, #1
 800532c:	426d      	negs	r5, r5
 800532e:	0028      	movs	r0, r5
 8005330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005332:	6923      	ldr	r3, [r4, #16]
 8005334:	6820      	ldr	r0, [r4, #0]
 8005336:	b2ef      	uxtb	r7, r5
 8005338:	1ac0      	subs	r0, r0, r3
 800533a:	6963      	ldr	r3, [r4, #20]
 800533c:	b2ed      	uxtb	r5, r5
 800533e:	4283      	cmp	r3, r0
 8005340:	dc05      	bgt.n	800534e <__swbuf_r+0x56>
 8005342:	0021      	movs	r1, r4
 8005344:	0030      	movs	r0, r6
 8005346:	f000 fa7d 	bl	8005844 <_fflush_r>
 800534a:	2800      	cmp	r0, #0
 800534c:	d1ed      	bne.n	800532a <__swbuf_r+0x32>
 800534e:	68a3      	ldr	r3, [r4, #8]
 8005350:	3001      	adds	r0, #1
 8005352:	3b01      	subs	r3, #1
 8005354:	60a3      	str	r3, [r4, #8]
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	6022      	str	r2, [r4, #0]
 800535c:	701f      	strb	r7, [r3, #0]
 800535e:	6963      	ldr	r3, [r4, #20]
 8005360:	4283      	cmp	r3, r0
 8005362:	d004      	beq.n	800536e <__swbuf_r+0x76>
 8005364:	89a3      	ldrh	r3, [r4, #12]
 8005366:	07db      	lsls	r3, r3, #31
 8005368:	d5e1      	bpl.n	800532e <__swbuf_r+0x36>
 800536a:	2d0a      	cmp	r5, #10
 800536c:	d1df      	bne.n	800532e <__swbuf_r+0x36>
 800536e:	0021      	movs	r1, r4
 8005370:	0030      	movs	r0, r6
 8005372:	f000 fa67 	bl	8005844 <_fflush_r>
 8005376:	2800      	cmp	r0, #0
 8005378:	d0d9      	beq.n	800532e <__swbuf_r+0x36>
 800537a:	e7d6      	b.n	800532a <__swbuf_r+0x32>

0800537c <__swsetup_r>:
 800537c:	4b2d      	ldr	r3, [pc, #180]	@ (8005434 <__swsetup_r+0xb8>)
 800537e:	b570      	push	{r4, r5, r6, lr}
 8005380:	0005      	movs	r5, r0
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	000c      	movs	r4, r1
 8005386:	2800      	cmp	r0, #0
 8005388:	d004      	beq.n	8005394 <__swsetup_r+0x18>
 800538a:	6a03      	ldr	r3, [r0, #32]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <__swsetup_r+0x18>
 8005390:	f7ff fed2 	bl	8005138 <__sinit>
 8005394:	230c      	movs	r3, #12
 8005396:	5ee2      	ldrsh	r2, [r4, r3]
 8005398:	0713      	lsls	r3, r2, #28
 800539a:	d423      	bmi.n	80053e4 <__swsetup_r+0x68>
 800539c:	06d3      	lsls	r3, r2, #27
 800539e:	d407      	bmi.n	80053b0 <__swsetup_r+0x34>
 80053a0:	2309      	movs	r3, #9
 80053a2:	602b      	str	r3, [r5, #0]
 80053a4:	2340      	movs	r3, #64	@ 0x40
 80053a6:	2001      	movs	r0, #1
 80053a8:	4313      	orrs	r3, r2
 80053aa:	81a3      	strh	r3, [r4, #12]
 80053ac:	4240      	negs	r0, r0
 80053ae:	e03a      	b.n	8005426 <__swsetup_r+0xaa>
 80053b0:	0752      	lsls	r2, r2, #29
 80053b2:	d513      	bpl.n	80053dc <__swsetup_r+0x60>
 80053b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053b6:	2900      	cmp	r1, #0
 80053b8:	d008      	beq.n	80053cc <__swsetup_r+0x50>
 80053ba:	0023      	movs	r3, r4
 80053bc:	3344      	adds	r3, #68	@ 0x44
 80053be:	4299      	cmp	r1, r3
 80053c0:	d002      	beq.n	80053c8 <__swsetup_r+0x4c>
 80053c2:	0028      	movs	r0, r5
 80053c4:	f000 f8bc 	bl	8005540 <_free_r>
 80053c8:	2300      	movs	r3, #0
 80053ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80053cc:	2224      	movs	r2, #36	@ 0x24
 80053ce:	89a3      	ldrh	r3, [r4, #12]
 80053d0:	4393      	bics	r3, r2
 80053d2:	81a3      	strh	r3, [r4, #12]
 80053d4:	2300      	movs	r3, #0
 80053d6:	6063      	str	r3, [r4, #4]
 80053d8:	6923      	ldr	r3, [r4, #16]
 80053da:	6023      	str	r3, [r4, #0]
 80053dc:	2308      	movs	r3, #8
 80053de:	89a2      	ldrh	r2, [r4, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	81a3      	strh	r3, [r4, #12]
 80053e4:	6923      	ldr	r3, [r4, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10b      	bne.n	8005402 <__swsetup_r+0x86>
 80053ea:	21a0      	movs	r1, #160	@ 0xa0
 80053ec:	2280      	movs	r2, #128	@ 0x80
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	0089      	lsls	r1, r1, #2
 80053f2:	0092      	lsls	r2, r2, #2
 80053f4:	400b      	ands	r3, r1
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <__swsetup_r+0x86>
 80053fa:	0021      	movs	r1, r4
 80053fc:	0028      	movs	r0, r5
 80053fe:	f000 fa77 	bl	80058f0 <__smakebuf_r>
 8005402:	230c      	movs	r3, #12
 8005404:	5ee2      	ldrsh	r2, [r4, r3]
 8005406:	2101      	movs	r1, #1
 8005408:	0013      	movs	r3, r2
 800540a:	400b      	ands	r3, r1
 800540c:	420a      	tst	r2, r1
 800540e:	d00b      	beq.n	8005428 <__swsetup_r+0xac>
 8005410:	2300      	movs	r3, #0
 8005412:	60a3      	str	r3, [r4, #8]
 8005414:	6963      	ldr	r3, [r4, #20]
 8005416:	425b      	negs	r3, r3
 8005418:	61a3      	str	r3, [r4, #24]
 800541a:	2000      	movs	r0, #0
 800541c:	6923      	ldr	r3, [r4, #16]
 800541e:	4283      	cmp	r3, r0
 8005420:	d101      	bne.n	8005426 <__swsetup_r+0xaa>
 8005422:	0613      	lsls	r3, r2, #24
 8005424:	d4be      	bmi.n	80053a4 <__swsetup_r+0x28>
 8005426:	bd70      	pop	{r4, r5, r6, pc}
 8005428:	0791      	lsls	r1, r2, #30
 800542a:	d400      	bmi.n	800542e <__swsetup_r+0xb2>
 800542c:	6963      	ldr	r3, [r4, #20]
 800542e:	60a3      	str	r3, [r4, #8]
 8005430:	e7f3      	b.n	800541a <__swsetup_r+0x9e>
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	20000018 	.word	0x20000018

08005438 <memset>:
 8005438:	0003      	movs	r3, r0
 800543a:	1882      	adds	r2, r0, r2
 800543c:	4293      	cmp	r3, r2
 800543e:	d100      	bne.n	8005442 <memset+0xa>
 8005440:	4770      	bx	lr
 8005442:	7019      	strb	r1, [r3, #0]
 8005444:	3301      	adds	r3, #1
 8005446:	e7f9      	b.n	800543c <memset+0x4>

08005448 <_close_r>:
 8005448:	2300      	movs	r3, #0
 800544a:	b570      	push	{r4, r5, r6, lr}
 800544c:	4d06      	ldr	r5, [pc, #24]	@ (8005468 <_close_r+0x20>)
 800544e:	0004      	movs	r4, r0
 8005450:	0008      	movs	r0, r1
 8005452:	602b      	str	r3, [r5, #0]
 8005454:	f7fb fc55 	bl	8000d02 <_close>
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d103      	bne.n	8005464 <_close_r+0x1c>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d000      	beq.n	8005464 <_close_r+0x1c>
 8005462:	6023      	str	r3, [r4, #0]
 8005464:	bd70      	pop	{r4, r5, r6, pc}
 8005466:	46c0      	nop			@ (mov r8, r8)
 8005468:	20004778 	.word	0x20004778

0800546c <_lseek_r>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	0004      	movs	r4, r0
 8005470:	0008      	movs	r0, r1
 8005472:	0011      	movs	r1, r2
 8005474:	001a      	movs	r2, r3
 8005476:	2300      	movs	r3, #0
 8005478:	4d05      	ldr	r5, [pc, #20]	@ (8005490 <_lseek_r+0x24>)
 800547a:	602b      	str	r3, [r5, #0]
 800547c:	f7fb fc62 	bl	8000d44 <_lseek>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d103      	bne.n	800548c <_lseek_r+0x20>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d000      	beq.n	800548c <_lseek_r+0x20>
 800548a:	6023      	str	r3, [r4, #0]
 800548c:	bd70      	pop	{r4, r5, r6, pc}
 800548e:	46c0      	nop			@ (mov r8, r8)
 8005490:	20004778 	.word	0x20004778

08005494 <_read_r>:
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	0004      	movs	r4, r0
 8005498:	0008      	movs	r0, r1
 800549a:	0011      	movs	r1, r2
 800549c:	001a      	movs	r2, r3
 800549e:	2300      	movs	r3, #0
 80054a0:	4d05      	ldr	r5, [pc, #20]	@ (80054b8 <_read_r+0x24>)
 80054a2:	602b      	str	r3, [r5, #0]
 80054a4:	f7fb fbf4 	bl	8000c90 <_read>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	d103      	bne.n	80054b4 <_read_r+0x20>
 80054ac:	682b      	ldr	r3, [r5, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d000      	beq.n	80054b4 <_read_r+0x20>
 80054b2:	6023      	str	r3, [r4, #0]
 80054b4:	bd70      	pop	{r4, r5, r6, pc}
 80054b6:	46c0      	nop			@ (mov r8, r8)
 80054b8:	20004778 	.word	0x20004778

080054bc <_write_r>:
 80054bc:	b570      	push	{r4, r5, r6, lr}
 80054be:	0004      	movs	r4, r0
 80054c0:	0008      	movs	r0, r1
 80054c2:	0011      	movs	r1, r2
 80054c4:	001a      	movs	r2, r3
 80054c6:	2300      	movs	r3, #0
 80054c8:	4d05      	ldr	r5, [pc, #20]	@ (80054e0 <_write_r+0x24>)
 80054ca:	602b      	str	r3, [r5, #0]
 80054cc:	f7fb fbfd 	bl	8000cca <_write>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d103      	bne.n	80054dc <_write_r+0x20>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d000      	beq.n	80054dc <_write_r+0x20>
 80054da:	6023      	str	r3, [r4, #0]
 80054dc:	bd70      	pop	{r4, r5, r6, pc}
 80054de:	46c0      	nop			@ (mov r8, r8)
 80054e0:	20004778 	.word	0x20004778

080054e4 <__errno>:
 80054e4:	4b01      	ldr	r3, [pc, #4]	@ (80054ec <__errno+0x8>)
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	4770      	bx	lr
 80054ea:	46c0      	nop			@ (mov r8, r8)
 80054ec:	20000018 	.word	0x20000018

080054f0 <__libc_init_array>:
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	2600      	movs	r6, #0
 80054f4:	4c0c      	ldr	r4, [pc, #48]	@ (8005528 <__libc_init_array+0x38>)
 80054f6:	4d0d      	ldr	r5, [pc, #52]	@ (800552c <__libc_init_array+0x3c>)
 80054f8:	1b64      	subs	r4, r4, r5
 80054fa:	10a4      	asrs	r4, r4, #2
 80054fc:	42a6      	cmp	r6, r4
 80054fe:	d109      	bne.n	8005514 <__libc_init_array+0x24>
 8005500:	2600      	movs	r6, #0
 8005502:	f000 fa6d 	bl	80059e0 <_init>
 8005506:	4c0a      	ldr	r4, [pc, #40]	@ (8005530 <__libc_init_array+0x40>)
 8005508:	4d0a      	ldr	r5, [pc, #40]	@ (8005534 <__libc_init_array+0x44>)
 800550a:	1b64      	subs	r4, r4, r5
 800550c:	10a4      	asrs	r4, r4, #2
 800550e:	42a6      	cmp	r6, r4
 8005510:	d105      	bne.n	800551e <__libc_init_array+0x2e>
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	00b3      	lsls	r3, r6, #2
 8005516:	58eb      	ldr	r3, [r5, r3]
 8005518:	4798      	blx	r3
 800551a:	3601      	adds	r6, #1
 800551c:	e7ee      	b.n	80054fc <__libc_init_array+0xc>
 800551e:	00b3      	lsls	r3, r6, #2
 8005520:	58eb      	ldr	r3, [r5, r3]
 8005522:	4798      	blx	r3
 8005524:	3601      	adds	r6, #1
 8005526:	e7f2      	b.n	800550e <__libc_init_array+0x1e>
 8005528:	08005ab0 	.word	0x08005ab0
 800552c:	08005ab0 	.word	0x08005ab0
 8005530:	08005ab4 	.word	0x08005ab4
 8005534:	08005ab0 	.word	0x08005ab0

08005538 <__retarget_lock_init_recursive>:
 8005538:	4770      	bx	lr

0800553a <__retarget_lock_acquire_recursive>:
 800553a:	4770      	bx	lr

0800553c <__retarget_lock_release_recursive>:
 800553c:	4770      	bx	lr
	...

08005540 <_free_r>:
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	0005      	movs	r5, r0
 8005544:	1e0c      	subs	r4, r1, #0
 8005546:	d010      	beq.n	800556a <_free_r+0x2a>
 8005548:	3c04      	subs	r4, #4
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	da00      	bge.n	8005552 <_free_r+0x12>
 8005550:	18e4      	adds	r4, r4, r3
 8005552:	0028      	movs	r0, r5
 8005554:	f000 f8e0 	bl	8005718 <__malloc_lock>
 8005558:	4a1d      	ldr	r2, [pc, #116]	@ (80055d0 <_free_r+0x90>)
 800555a:	6813      	ldr	r3, [r2, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d105      	bne.n	800556c <_free_r+0x2c>
 8005560:	6063      	str	r3, [r4, #4]
 8005562:	6014      	str	r4, [r2, #0]
 8005564:	0028      	movs	r0, r5
 8005566:	f000 f8df 	bl	8005728 <__malloc_unlock>
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	42a3      	cmp	r3, r4
 800556e:	d908      	bls.n	8005582 <_free_r+0x42>
 8005570:	6820      	ldr	r0, [r4, #0]
 8005572:	1821      	adds	r1, r4, r0
 8005574:	428b      	cmp	r3, r1
 8005576:	d1f3      	bne.n	8005560 <_free_r+0x20>
 8005578:	6819      	ldr	r1, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	1809      	adds	r1, r1, r0
 800557e:	6021      	str	r1, [r4, #0]
 8005580:	e7ee      	b.n	8005560 <_free_r+0x20>
 8005582:	001a      	movs	r2, r3
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <_free_r+0x4e>
 800558a:	42a3      	cmp	r3, r4
 800558c:	d9f9      	bls.n	8005582 <_free_r+0x42>
 800558e:	6811      	ldr	r1, [r2, #0]
 8005590:	1850      	adds	r0, r2, r1
 8005592:	42a0      	cmp	r0, r4
 8005594:	d10b      	bne.n	80055ae <_free_r+0x6e>
 8005596:	6820      	ldr	r0, [r4, #0]
 8005598:	1809      	adds	r1, r1, r0
 800559a:	1850      	adds	r0, r2, r1
 800559c:	6011      	str	r1, [r2, #0]
 800559e:	4283      	cmp	r3, r0
 80055a0:	d1e0      	bne.n	8005564 <_free_r+0x24>
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	1841      	adds	r1, r0, r1
 80055a8:	6011      	str	r1, [r2, #0]
 80055aa:	6053      	str	r3, [r2, #4]
 80055ac:	e7da      	b.n	8005564 <_free_r+0x24>
 80055ae:	42a0      	cmp	r0, r4
 80055b0:	d902      	bls.n	80055b8 <_free_r+0x78>
 80055b2:	230c      	movs	r3, #12
 80055b4:	602b      	str	r3, [r5, #0]
 80055b6:	e7d5      	b.n	8005564 <_free_r+0x24>
 80055b8:	6820      	ldr	r0, [r4, #0]
 80055ba:	1821      	adds	r1, r4, r0
 80055bc:	428b      	cmp	r3, r1
 80055be:	d103      	bne.n	80055c8 <_free_r+0x88>
 80055c0:	6819      	ldr	r1, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	1809      	adds	r1, r1, r0
 80055c6:	6021      	str	r1, [r4, #0]
 80055c8:	6063      	str	r3, [r4, #4]
 80055ca:	6054      	str	r4, [r2, #4]
 80055cc:	e7ca      	b.n	8005564 <_free_r+0x24>
 80055ce:	46c0      	nop			@ (mov r8, r8)
 80055d0:	20004784 	.word	0x20004784

080055d4 <sbrk_aligned>:
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	4e0f      	ldr	r6, [pc, #60]	@ (8005614 <sbrk_aligned+0x40>)
 80055d8:	000d      	movs	r5, r1
 80055da:	6831      	ldr	r1, [r6, #0]
 80055dc:	0004      	movs	r4, r0
 80055de:	2900      	cmp	r1, #0
 80055e0:	d102      	bne.n	80055e8 <sbrk_aligned+0x14>
 80055e2:	f000 f9eb 	bl	80059bc <_sbrk_r>
 80055e6:	6030      	str	r0, [r6, #0]
 80055e8:	0029      	movs	r1, r5
 80055ea:	0020      	movs	r0, r4
 80055ec:	f000 f9e6 	bl	80059bc <_sbrk_r>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d103      	bne.n	80055fc <sbrk_aligned+0x28>
 80055f4:	2501      	movs	r5, #1
 80055f6:	426d      	negs	r5, r5
 80055f8:	0028      	movs	r0, r5
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
 80055fc:	2303      	movs	r3, #3
 80055fe:	1cc5      	adds	r5, r0, #3
 8005600:	439d      	bics	r5, r3
 8005602:	42a8      	cmp	r0, r5
 8005604:	d0f8      	beq.n	80055f8 <sbrk_aligned+0x24>
 8005606:	1a29      	subs	r1, r5, r0
 8005608:	0020      	movs	r0, r4
 800560a:	f000 f9d7 	bl	80059bc <_sbrk_r>
 800560e:	3001      	adds	r0, #1
 8005610:	d1f2      	bne.n	80055f8 <sbrk_aligned+0x24>
 8005612:	e7ef      	b.n	80055f4 <sbrk_aligned+0x20>
 8005614:	20004780 	.word	0x20004780

08005618 <_malloc_r>:
 8005618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800561a:	2203      	movs	r2, #3
 800561c:	1ccb      	adds	r3, r1, #3
 800561e:	4393      	bics	r3, r2
 8005620:	3308      	adds	r3, #8
 8005622:	0005      	movs	r5, r0
 8005624:	001f      	movs	r7, r3
 8005626:	2b0c      	cmp	r3, #12
 8005628:	d234      	bcs.n	8005694 <_malloc_r+0x7c>
 800562a:	270c      	movs	r7, #12
 800562c:	42b9      	cmp	r1, r7
 800562e:	d833      	bhi.n	8005698 <_malloc_r+0x80>
 8005630:	0028      	movs	r0, r5
 8005632:	f000 f871 	bl	8005718 <__malloc_lock>
 8005636:	4e37      	ldr	r6, [pc, #220]	@ (8005714 <_malloc_r+0xfc>)
 8005638:	6833      	ldr	r3, [r6, #0]
 800563a:	001c      	movs	r4, r3
 800563c:	2c00      	cmp	r4, #0
 800563e:	d12f      	bne.n	80056a0 <_malloc_r+0x88>
 8005640:	0039      	movs	r1, r7
 8005642:	0028      	movs	r0, r5
 8005644:	f7ff ffc6 	bl	80055d4 <sbrk_aligned>
 8005648:	0004      	movs	r4, r0
 800564a:	1c43      	adds	r3, r0, #1
 800564c:	d15f      	bne.n	800570e <_malloc_r+0xf6>
 800564e:	6834      	ldr	r4, [r6, #0]
 8005650:	9400      	str	r4, [sp, #0]
 8005652:	9b00      	ldr	r3, [sp, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d14a      	bne.n	80056ee <_malloc_r+0xd6>
 8005658:	2c00      	cmp	r4, #0
 800565a:	d052      	beq.n	8005702 <_malloc_r+0xea>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	0028      	movs	r0, r5
 8005660:	18e3      	adds	r3, r4, r3
 8005662:	9900      	ldr	r1, [sp, #0]
 8005664:	9301      	str	r3, [sp, #4]
 8005666:	f000 f9a9 	bl	80059bc <_sbrk_r>
 800566a:	9b01      	ldr	r3, [sp, #4]
 800566c:	4283      	cmp	r3, r0
 800566e:	d148      	bne.n	8005702 <_malloc_r+0xea>
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	0028      	movs	r0, r5
 8005674:	1aff      	subs	r7, r7, r3
 8005676:	0039      	movs	r1, r7
 8005678:	f7ff ffac 	bl	80055d4 <sbrk_aligned>
 800567c:	3001      	adds	r0, #1
 800567e:	d040      	beq.n	8005702 <_malloc_r+0xea>
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	19db      	adds	r3, r3, r7
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	6833      	ldr	r3, [r6, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	2a00      	cmp	r2, #0
 800568c:	d133      	bne.n	80056f6 <_malloc_r+0xde>
 800568e:	9b00      	ldr	r3, [sp, #0]
 8005690:	6033      	str	r3, [r6, #0]
 8005692:	e019      	b.n	80056c8 <_malloc_r+0xb0>
 8005694:	2b00      	cmp	r3, #0
 8005696:	dac9      	bge.n	800562c <_malloc_r+0x14>
 8005698:	230c      	movs	r3, #12
 800569a:	602b      	str	r3, [r5, #0]
 800569c:	2000      	movs	r0, #0
 800569e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056a0:	6821      	ldr	r1, [r4, #0]
 80056a2:	1bc9      	subs	r1, r1, r7
 80056a4:	d420      	bmi.n	80056e8 <_malloc_r+0xd0>
 80056a6:	290b      	cmp	r1, #11
 80056a8:	d90a      	bls.n	80056c0 <_malloc_r+0xa8>
 80056aa:	19e2      	adds	r2, r4, r7
 80056ac:	6027      	str	r7, [r4, #0]
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	d104      	bne.n	80056bc <_malloc_r+0xa4>
 80056b2:	6032      	str	r2, [r6, #0]
 80056b4:	6863      	ldr	r3, [r4, #4]
 80056b6:	6011      	str	r1, [r2, #0]
 80056b8:	6053      	str	r3, [r2, #4]
 80056ba:	e005      	b.n	80056c8 <_malloc_r+0xb0>
 80056bc:	605a      	str	r2, [r3, #4]
 80056be:	e7f9      	b.n	80056b4 <_malloc_r+0x9c>
 80056c0:	6862      	ldr	r2, [r4, #4]
 80056c2:	42a3      	cmp	r3, r4
 80056c4:	d10e      	bne.n	80056e4 <_malloc_r+0xcc>
 80056c6:	6032      	str	r2, [r6, #0]
 80056c8:	0028      	movs	r0, r5
 80056ca:	f000 f82d 	bl	8005728 <__malloc_unlock>
 80056ce:	0020      	movs	r0, r4
 80056d0:	2207      	movs	r2, #7
 80056d2:	300b      	adds	r0, #11
 80056d4:	1d23      	adds	r3, r4, #4
 80056d6:	4390      	bics	r0, r2
 80056d8:	1ac2      	subs	r2, r0, r3
 80056da:	4298      	cmp	r0, r3
 80056dc:	d0df      	beq.n	800569e <_malloc_r+0x86>
 80056de:	1a1b      	subs	r3, r3, r0
 80056e0:	50a3      	str	r3, [r4, r2]
 80056e2:	e7dc      	b.n	800569e <_malloc_r+0x86>
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	e7ef      	b.n	80056c8 <_malloc_r+0xb0>
 80056e8:	0023      	movs	r3, r4
 80056ea:	6864      	ldr	r4, [r4, #4]
 80056ec:	e7a6      	b.n	800563c <_malloc_r+0x24>
 80056ee:	9c00      	ldr	r4, [sp, #0]
 80056f0:	6863      	ldr	r3, [r4, #4]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	e7ad      	b.n	8005652 <_malloc_r+0x3a>
 80056f6:	001a      	movs	r2, r3
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	42a3      	cmp	r3, r4
 80056fc:	d1fb      	bne.n	80056f6 <_malloc_r+0xde>
 80056fe:	2300      	movs	r3, #0
 8005700:	e7da      	b.n	80056b8 <_malloc_r+0xa0>
 8005702:	230c      	movs	r3, #12
 8005704:	0028      	movs	r0, r5
 8005706:	602b      	str	r3, [r5, #0]
 8005708:	f000 f80e 	bl	8005728 <__malloc_unlock>
 800570c:	e7c6      	b.n	800569c <_malloc_r+0x84>
 800570e:	6007      	str	r7, [r0, #0]
 8005710:	e7da      	b.n	80056c8 <_malloc_r+0xb0>
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	20004784 	.word	0x20004784

08005718 <__malloc_lock>:
 8005718:	b510      	push	{r4, lr}
 800571a:	4802      	ldr	r0, [pc, #8]	@ (8005724 <__malloc_lock+0xc>)
 800571c:	f7ff ff0d 	bl	800553a <__retarget_lock_acquire_recursive>
 8005720:	bd10      	pop	{r4, pc}
 8005722:	46c0      	nop			@ (mov r8, r8)
 8005724:	2000477c 	.word	0x2000477c

08005728 <__malloc_unlock>:
 8005728:	b510      	push	{r4, lr}
 800572a:	4802      	ldr	r0, [pc, #8]	@ (8005734 <__malloc_unlock+0xc>)
 800572c:	f7ff ff06 	bl	800553c <__retarget_lock_release_recursive>
 8005730:	bd10      	pop	{r4, pc}
 8005732:	46c0      	nop			@ (mov r8, r8)
 8005734:	2000477c 	.word	0x2000477c

08005738 <__sflush_r>:
 8005738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800573a:	220c      	movs	r2, #12
 800573c:	5e8b      	ldrsh	r3, [r1, r2]
 800573e:	0005      	movs	r5, r0
 8005740:	000c      	movs	r4, r1
 8005742:	071a      	lsls	r2, r3, #28
 8005744:	d456      	bmi.n	80057f4 <__sflush_r+0xbc>
 8005746:	684a      	ldr	r2, [r1, #4]
 8005748:	2a00      	cmp	r2, #0
 800574a:	dc02      	bgt.n	8005752 <__sflush_r+0x1a>
 800574c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800574e:	2a00      	cmp	r2, #0
 8005750:	dd4e      	ble.n	80057f0 <__sflush_r+0xb8>
 8005752:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005754:	2f00      	cmp	r7, #0
 8005756:	d04b      	beq.n	80057f0 <__sflush_r+0xb8>
 8005758:	2200      	movs	r2, #0
 800575a:	2080      	movs	r0, #128	@ 0x80
 800575c:	682e      	ldr	r6, [r5, #0]
 800575e:	602a      	str	r2, [r5, #0]
 8005760:	001a      	movs	r2, r3
 8005762:	0140      	lsls	r0, r0, #5
 8005764:	6a21      	ldr	r1, [r4, #32]
 8005766:	4002      	ands	r2, r0
 8005768:	4203      	tst	r3, r0
 800576a:	d033      	beq.n	80057d4 <__sflush_r+0x9c>
 800576c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	075b      	lsls	r3, r3, #29
 8005772:	d506      	bpl.n	8005782 <__sflush_r+0x4a>
 8005774:	6863      	ldr	r3, [r4, #4]
 8005776:	1ad2      	subs	r2, r2, r3
 8005778:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <__sflush_r+0x4a>
 800577e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005780:	1ad2      	subs	r2, r2, r3
 8005782:	2300      	movs	r3, #0
 8005784:	0028      	movs	r0, r5
 8005786:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005788:	6a21      	ldr	r1, [r4, #32]
 800578a:	47b8      	blx	r7
 800578c:	89a2      	ldrh	r2, [r4, #12]
 800578e:	1c43      	adds	r3, r0, #1
 8005790:	d106      	bne.n	80057a0 <__sflush_r+0x68>
 8005792:	6829      	ldr	r1, [r5, #0]
 8005794:	291d      	cmp	r1, #29
 8005796:	d846      	bhi.n	8005826 <__sflush_r+0xee>
 8005798:	4b29      	ldr	r3, [pc, #164]	@ (8005840 <__sflush_r+0x108>)
 800579a:	410b      	asrs	r3, r1
 800579c:	07db      	lsls	r3, r3, #31
 800579e:	d442      	bmi.n	8005826 <__sflush_r+0xee>
 80057a0:	2300      	movs	r3, #0
 80057a2:	6063      	str	r3, [r4, #4]
 80057a4:	6923      	ldr	r3, [r4, #16]
 80057a6:	6023      	str	r3, [r4, #0]
 80057a8:	04d2      	lsls	r2, r2, #19
 80057aa:	d505      	bpl.n	80057b8 <__sflush_r+0x80>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d102      	bne.n	80057b6 <__sflush_r+0x7e>
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d100      	bne.n	80057b8 <__sflush_r+0x80>
 80057b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80057b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057ba:	602e      	str	r6, [r5, #0]
 80057bc:	2900      	cmp	r1, #0
 80057be:	d017      	beq.n	80057f0 <__sflush_r+0xb8>
 80057c0:	0023      	movs	r3, r4
 80057c2:	3344      	adds	r3, #68	@ 0x44
 80057c4:	4299      	cmp	r1, r3
 80057c6:	d002      	beq.n	80057ce <__sflush_r+0x96>
 80057c8:	0028      	movs	r0, r5
 80057ca:	f7ff feb9 	bl	8005540 <_free_r>
 80057ce:	2300      	movs	r3, #0
 80057d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80057d2:	e00d      	b.n	80057f0 <__sflush_r+0xb8>
 80057d4:	2301      	movs	r3, #1
 80057d6:	0028      	movs	r0, r5
 80057d8:	47b8      	blx	r7
 80057da:	0002      	movs	r2, r0
 80057dc:	1c43      	adds	r3, r0, #1
 80057de:	d1c6      	bne.n	800576e <__sflush_r+0x36>
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0c3      	beq.n	800576e <__sflush_r+0x36>
 80057e6:	2b1d      	cmp	r3, #29
 80057e8:	d001      	beq.n	80057ee <__sflush_r+0xb6>
 80057ea:	2b16      	cmp	r3, #22
 80057ec:	d11a      	bne.n	8005824 <__sflush_r+0xec>
 80057ee:	602e      	str	r6, [r5, #0]
 80057f0:	2000      	movs	r0, #0
 80057f2:	e01e      	b.n	8005832 <__sflush_r+0xfa>
 80057f4:	690e      	ldr	r6, [r1, #16]
 80057f6:	2e00      	cmp	r6, #0
 80057f8:	d0fa      	beq.n	80057f0 <__sflush_r+0xb8>
 80057fa:	680f      	ldr	r7, [r1, #0]
 80057fc:	600e      	str	r6, [r1, #0]
 80057fe:	1bba      	subs	r2, r7, r6
 8005800:	9201      	str	r2, [sp, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	079b      	lsls	r3, r3, #30
 8005806:	d100      	bne.n	800580a <__sflush_r+0xd2>
 8005808:	694a      	ldr	r2, [r1, #20]
 800580a:	60a2      	str	r2, [r4, #8]
 800580c:	9b01      	ldr	r3, [sp, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	ddee      	ble.n	80057f0 <__sflush_r+0xb8>
 8005812:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005814:	0032      	movs	r2, r6
 8005816:	001f      	movs	r7, r3
 8005818:	0028      	movs	r0, r5
 800581a:	9b01      	ldr	r3, [sp, #4]
 800581c:	6a21      	ldr	r1, [r4, #32]
 800581e:	47b8      	blx	r7
 8005820:	2800      	cmp	r0, #0
 8005822:	dc07      	bgt.n	8005834 <__sflush_r+0xfc>
 8005824:	89a2      	ldrh	r2, [r4, #12]
 8005826:	2340      	movs	r3, #64	@ 0x40
 8005828:	2001      	movs	r0, #1
 800582a:	4313      	orrs	r3, r2
 800582c:	b21b      	sxth	r3, r3
 800582e:	81a3      	strh	r3, [r4, #12]
 8005830:	4240      	negs	r0, r0
 8005832:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005834:	9b01      	ldr	r3, [sp, #4]
 8005836:	1836      	adds	r6, r6, r0
 8005838:	1a1b      	subs	r3, r3, r0
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	e7e6      	b.n	800580c <__sflush_r+0xd4>
 800583e:	46c0      	nop			@ (mov r8, r8)
 8005840:	dfbffffe 	.word	0xdfbffffe

08005844 <_fflush_r>:
 8005844:	690b      	ldr	r3, [r1, #16]
 8005846:	b570      	push	{r4, r5, r6, lr}
 8005848:	0005      	movs	r5, r0
 800584a:	000c      	movs	r4, r1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d102      	bne.n	8005856 <_fflush_r+0x12>
 8005850:	2500      	movs	r5, #0
 8005852:	0028      	movs	r0, r5
 8005854:	bd70      	pop	{r4, r5, r6, pc}
 8005856:	2800      	cmp	r0, #0
 8005858:	d004      	beq.n	8005864 <_fflush_r+0x20>
 800585a:	6a03      	ldr	r3, [r0, #32]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <_fflush_r+0x20>
 8005860:	f7ff fc6a 	bl	8005138 <__sinit>
 8005864:	220c      	movs	r2, #12
 8005866:	5ea3      	ldrsh	r3, [r4, r2]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0f1      	beq.n	8005850 <_fflush_r+0xc>
 800586c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800586e:	07d2      	lsls	r2, r2, #31
 8005870:	d404      	bmi.n	800587c <_fflush_r+0x38>
 8005872:	059b      	lsls	r3, r3, #22
 8005874:	d402      	bmi.n	800587c <_fflush_r+0x38>
 8005876:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005878:	f7ff fe5f 	bl	800553a <__retarget_lock_acquire_recursive>
 800587c:	0028      	movs	r0, r5
 800587e:	0021      	movs	r1, r4
 8005880:	f7ff ff5a 	bl	8005738 <__sflush_r>
 8005884:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005886:	0005      	movs	r5, r0
 8005888:	07db      	lsls	r3, r3, #31
 800588a:	d4e2      	bmi.n	8005852 <_fflush_r+0xe>
 800588c:	89a3      	ldrh	r3, [r4, #12]
 800588e:	059b      	lsls	r3, r3, #22
 8005890:	d4df      	bmi.n	8005852 <_fflush_r+0xe>
 8005892:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005894:	f7ff fe52 	bl	800553c <__retarget_lock_release_recursive>
 8005898:	e7db      	b.n	8005852 <_fflush_r+0xe>
	...

0800589c <__swhatbuf_r>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	000e      	movs	r6, r1
 80058a0:	001d      	movs	r5, r3
 80058a2:	230e      	movs	r3, #14
 80058a4:	5ec9      	ldrsh	r1, [r1, r3]
 80058a6:	0014      	movs	r4, r2
 80058a8:	b096      	sub	sp, #88	@ 0x58
 80058aa:	2900      	cmp	r1, #0
 80058ac:	da0c      	bge.n	80058c8 <__swhatbuf_r+0x2c>
 80058ae:	89b2      	ldrh	r2, [r6, #12]
 80058b0:	2380      	movs	r3, #128	@ 0x80
 80058b2:	0011      	movs	r1, r2
 80058b4:	4019      	ands	r1, r3
 80058b6:	421a      	tst	r2, r3
 80058b8:	d114      	bne.n	80058e4 <__swhatbuf_r+0x48>
 80058ba:	2380      	movs	r3, #128	@ 0x80
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	2000      	movs	r0, #0
 80058c0:	6029      	str	r1, [r5, #0]
 80058c2:	6023      	str	r3, [r4, #0]
 80058c4:	b016      	add	sp, #88	@ 0x58
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
 80058c8:	466a      	mov	r2, sp
 80058ca:	f000 f853 	bl	8005974 <_fstat_r>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	dbed      	blt.n	80058ae <__swhatbuf_r+0x12>
 80058d2:	23f0      	movs	r3, #240	@ 0xf0
 80058d4:	9901      	ldr	r1, [sp, #4]
 80058d6:	021b      	lsls	r3, r3, #8
 80058d8:	4019      	ands	r1, r3
 80058da:	4b04      	ldr	r3, [pc, #16]	@ (80058ec <__swhatbuf_r+0x50>)
 80058dc:	18c9      	adds	r1, r1, r3
 80058de:	424b      	negs	r3, r1
 80058e0:	4159      	adcs	r1, r3
 80058e2:	e7ea      	b.n	80058ba <__swhatbuf_r+0x1e>
 80058e4:	2100      	movs	r1, #0
 80058e6:	2340      	movs	r3, #64	@ 0x40
 80058e8:	e7e9      	b.n	80058be <__swhatbuf_r+0x22>
 80058ea:	46c0      	nop			@ (mov r8, r8)
 80058ec:	ffffe000 	.word	0xffffe000

080058f0 <__smakebuf_r>:
 80058f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058f2:	2602      	movs	r6, #2
 80058f4:	898b      	ldrh	r3, [r1, #12]
 80058f6:	0005      	movs	r5, r0
 80058f8:	000c      	movs	r4, r1
 80058fa:	b085      	sub	sp, #20
 80058fc:	4233      	tst	r3, r6
 80058fe:	d007      	beq.n	8005910 <__smakebuf_r+0x20>
 8005900:	0023      	movs	r3, r4
 8005902:	3347      	adds	r3, #71	@ 0x47
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	6123      	str	r3, [r4, #16]
 8005908:	2301      	movs	r3, #1
 800590a:	6163      	str	r3, [r4, #20]
 800590c:	b005      	add	sp, #20
 800590e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005910:	ab03      	add	r3, sp, #12
 8005912:	aa02      	add	r2, sp, #8
 8005914:	f7ff ffc2 	bl	800589c <__swhatbuf_r>
 8005918:	9f02      	ldr	r7, [sp, #8]
 800591a:	9001      	str	r0, [sp, #4]
 800591c:	0039      	movs	r1, r7
 800591e:	0028      	movs	r0, r5
 8005920:	f7ff fe7a 	bl	8005618 <_malloc_r>
 8005924:	2800      	cmp	r0, #0
 8005926:	d108      	bne.n	800593a <__smakebuf_r+0x4a>
 8005928:	220c      	movs	r2, #12
 800592a:	5ea3      	ldrsh	r3, [r4, r2]
 800592c:	059a      	lsls	r2, r3, #22
 800592e:	d4ed      	bmi.n	800590c <__smakebuf_r+0x1c>
 8005930:	2203      	movs	r2, #3
 8005932:	4393      	bics	r3, r2
 8005934:	431e      	orrs	r6, r3
 8005936:	81a6      	strh	r6, [r4, #12]
 8005938:	e7e2      	b.n	8005900 <__smakebuf_r+0x10>
 800593a:	2380      	movs	r3, #128	@ 0x80
 800593c:	89a2      	ldrh	r2, [r4, #12]
 800593e:	6020      	str	r0, [r4, #0]
 8005940:	4313      	orrs	r3, r2
 8005942:	81a3      	strh	r3, [r4, #12]
 8005944:	9b03      	ldr	r3, [sp, #12]
 8005946:	6120      	str	r0, [r4, #16]
 8005948:	6167      	str	r7, [r4, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00c      	beq.n	8005968 <__smakebuf_r+0x78>
 800594e:	0028      	movs	r0, r5
 8005950:	230e      	movs	r3, #14
 8005952:	5ee1      	ldrsh	r1, [r4, r3]
 8005954:	f000 f820 	bl	8005998 <_isatty_r>
 8005958:	2800      	cmp	r0, #0
 800595a:	d005      	beq.n	8005968 <__smakebuf_r+0x78>
 800595c:	2303      	movs	r3, #3
 800595e:	89a2      	ldrh	r2, [r4, #12]
 8005960:	439a      	bics	r2, r3
 8005962:	3b02      	subs	r3, #2
 8005964:	4313      	orrs	r3, r2
 8005966:	81a3      	strh	r3, [r4, #12]
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	9a01      	ldr	r2, [sp, #4]
 800596c:	4313      	orrs	r3, r2
 800596e:	81a3      	strh	r3, [r4, #12]
 8005970:	e7cc      	b.n	800590c <__smakebuf_r+0x1c>
	...

08005974 <_fstat_r>:
 8005974:	2300      	movs	r3, #0
 8005976:	b570      	push	{r4, r5, r6, lr}
 8005978:	4d06      	ldr	r5, [pc, #24]	@ (8005994 <_fstat_r+0x20>)
 800597a:	0004      	movs	r4, r0
 800597c:	0008      	movs	r0, r1
 800597e:	0011      	movs	r1, r2
 8005980:	602b      	str	r3, [r5, #0]
 8005982:	f7fb f9c8 	bl	8000d16 <_fstat>
 8005986:	1c43      	adds	r3, r0, #1
 8005988:	d103      	bne.n	8005992 <_fstat_r+0x1e>
 800598a:	682b      	ldr	r3, [r5, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d000      	beq.n	8005992 <_fstat_r+0x1e>
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	20004778 	.word	0x20004778

08005998 <_isatty_r>:
 8005998:	2300      	movs	r3, #0
 800599a:	b570      	push	{r4, r5, r6, lr}
 800599c:	4d06      	ldr	r5, [pc, #24]	@ (80059b8 <_isatty_r+0x20>)
 800599e:	0004      	movs	r4, r0
 80059a0:	0008      	movs	r0, r1
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	f7fb f9c5 	bl	8000d32 <_isatty>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d103      	bne.n	80059b4 <_isatty_r+0x1c>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d000      	beq.n	80059b4 <_isatty_r+0x1c>
 80059b2:	6023      	str	r3, [r4, #0]
 80059b4:	bd70      	pop	{r4, r5, r6, pc}
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	20004778 	.word	0x20004778

080059bc <_sbrk_r>:
 80059bc:	2300      	movs	r3, #0
 80059be:	b570      	push	{r4, r5, r6, lr}
 80059c0:	4d06      	ldr	r5, [pc, #24]	@ (80059dc <_sbrk_r+0x20>)
 80059c2:	0004      	movs	r4, r0
 80059c4:	0008      	movs	r0, r1
 80059c6:	602b      	str	r3, [r5, #0]
 80059c8:	f7fb f9c8 	bl	8000d5c <_sbrk>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d103      	bne.n	80059d8 <_sbrk_r+0x1c>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d000      	beq.n	80059d8 <_sbrk_r+0x1c>
 80059d6:	6023      	str	r3, [r4, #0]
 80059d8:	bd70      	pop	{r4, r5, r6, pc}
 80059da:	46c0      	nop			@ (mov r8, r8)
 80059dc:	20004778 	.word	0x20004778

080059e0 <_init>:
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e2:	46c0      	nop			@ (mov r8, r8)
 80059e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e6:	bc08      	pop	{r3}
 80059e8:	469e      	mov	lr, r3
 80059ea:	4770      	bx	lr

080059ec <_fini>:
 80059ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ee:	46c0      	nop			@ (mov r8, r8)
 80059f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f2:	bc08      	pop	{r3}
 80059f4:	469e      	mov	lr, r3
 80059f6:	4770      	bx	lr
