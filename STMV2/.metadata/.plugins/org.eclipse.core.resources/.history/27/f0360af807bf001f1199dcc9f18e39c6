/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    stm32l0xx_it.c
  * @brief   Interrupt Service Routines.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32l0xx_it.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */

/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define BUFFERSIZE 8192
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t l_amplitudeSpecter[1024]  = {0} ;
bool FlagEndExtraction =  false;
uint16_t l_BufferSpecter[BUFFERSIZE] = {0};
uint16_t l_nObservedPixel;
uint8_t l_nObservedBit;
uint32_t l_CycleCount = 0;
enum S10077_CONVERSIONSTEP { IDLE, START_LOWSTEP, START_HIGHSTEP, CONVERTING,EXTRACTING, SENDING};
enum S10077_CONVERSIONSTEP l_S10077_CONVERSIONSTEP = IDLE;
uint32_t l_ReferenceTimings = 0;
uint32_t l_HighStepTime = 0;
uint32_t l_IntegrationTime = 0;
uint32_t l_SendingStep = 0;

int iBcl2 = 0;

/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/
extern DMA_HandleTypeDef hdma_tim2_ch2;
extern TIM_HandleTypeDef htim21;
/* USER CODE BEGIN EV */
extern TIM_HandleTypeDef htim2;
/* USER CODE END EV */

/******************************************************************************/
/*           Cortex-M0+ Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVC_IRQn 0 */

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}

/******************************************************************************/
/* STM32L0xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l0xx.s).                    */
/******************************************************************************/

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */
  if (__HAL_TIM_GET_COUNTER(&htim2) >= 13500) {
	  HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);
  }
  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
  /* USER CODE BEGIN TIM21_IRQn 1 */


  /* USER CODE END TIM21_IRQn 1 */
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM21) {

    	l_CycleCount++;
    	S10077_Conversion();
    }
    if (htim->Instance == TIM2) {




    }

}
void S10077_Conversion(){


	switch(l_S10077_CONVERSIONSTEP){

	case IDLE :

		HAL_GPIO_WritePin(S10077_START_GPIO_Port, S10077_START_Pin,GPIO_PIN_SET );
		break;


	case START_LOWSTEP :

		//attend que la duree a l'etat bas se termine
		if((l_CycleCount - l_ReferenceTimings) > 1){

			l_S10077_CONVERSIONSTEP = START_HIGHSTEP;

			HAL_GPIO_WritePin(S10077_START_GPIO_Port, S10077_START_Pin,GPIO_PIN_SET );

		}
		break;

	case START_HIGHSTEP :

		if((l_CycleCount - l_ReferenceTimings) > l_IntegrationTime  ){


			//printf("Debut de la conversion  %i \r\n",(l_CycleCount - l_ReferenceTimings));

			HAL_GPIO_WritePin(S10077_START_GPIO_Port, S10077_START_Pin,GPIO_PIN_RESET );

			l_S10077_CONVERSIONSTEP = CONVERTING;


			}
		break;
	case CONVERTING :
		//printf("HighstepTime %i \r\n",debug2-debug1);

		if(HAL_GPIO_ReadPin(S10077_ENDSCAN_GPIO_Port, S10077_ENDSCAN_Pin)){

			HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);
			HAL_TIM_IC_DeInit(&htim2);

			l_ReferenceTimings = l_CycleCount;
			l_SendingStep = 0;
			iBcl2 = 0;
			FlagEndExtraction = false;
			l_S10077_CONVERSIONSTEP = EXTRACTING;
			ExtractAmplitude();


		//printf("Fin de la conversion : %i \r\n",(l_CycleCount - l_ReferenceTimings));

		}

		break;
	case EXTRACTING :

		if (FlagEndExtraction){
		//	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
			l_S10077_CONVERSIONSTEP = SENDING;
			HAL_GPIO_WritePin(S10077_START_GPIO_Port, S10077_START_Pin,GPIO_PIN_SET );

		}
		break;
	case SENDING :

			if(FlagEndExtraction == true){




			l_S10077_CONVERSIONSTEP = IDLE;

		//	printf("Back to waiting \r\n");

		}

		break;
	default :


		break;
	}
}

void S10077_StartConversion(uint32_t x_Intergrationtime){

	//printf("heyehey3 \r\n");
	if(l_S10077_CONVERSIONSTEP == IDLE){
		//printf("heyehey2 \r\n");
		if(x_Intergrationtime > 12300 && x_Intergrationtime < 120000){
			//printf("heyehey1 \r\n");

			for (int i = 0; i < BUFFERSIZE; i++) {

		     l_BufferSpecter[i] = 0;

			}

			for (int i = 0; i < 1024; i++) {
			l_amplitudeSpecter[i]  =0 ;
			}
			// printf("heyehey0 \r\n");
			//code debut de conversion


			l_nObservedPixel = 0;
			l_nObservedBit = 0;
			l_ReferenceTimings = l_CycleCount;
			l_IntegrationTime = (x_Intergrationtime/50);
			HAL_TIM_IC_Init(&htim2);
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2,(uint32_t *) l_BufferSpecter, BUFFERSIZE);
			l_S10077_CONVERSIONSTEP = START_LOWSTEP;
			// Démarrer le timer en mode Input Capture avec DMA


			HAL_GPIO_WritePin(S10077_START_GPIO_Port, S10077_START_Pin,GPIO_PIN_RESET );
		//printf("Debut de la phase LOWSTEP %i \r\n",(l_CycleCount - l_ReferenceTimings));


		}
		else{
	printf("erreur : temps d'integration trop cours \r\n");
}
	}
	else{

	//printf("erreur integration deja en cours \r\n");

	}
}


void SendPixelData(uint16_t pixelNumber, uint16_t amplitude)
{
    uint8_t data[3];


    if (pixelNumber >= 1024) pixelNumber = 1024;  // Limiter à la résolution max
    if (amplitude >= 255) amplitude = 255;        // Limiter l'amplitude max

    // Fractionner le numéro du pixel (16 bits) en deux octets
    data[0] = (uint8_t)((pixelNumber >> 8) & 0xFF);  // Octet de poids fort
    data[1] = (uint8_t)(pixelNumber & 0xFF);         // Octet de poids faible

    // Ajouter l'amplitude (8 bits)
    data[2] = amplitude;

    // Envoyer les 3 octets sur l'UART
    HAL_UART_Transmit(USART2, data, 3, HAL_MAX_DELAY);
}

void ExtractAmplitude (void){
	//Debut
	bool OctetRead[8] = {false};
	uint16_t PixelRead = 0;

	bool TrammeState = false;

	 uint16_t BufferReadOrder = 0;



	while( l_BufferSpecter[BufferReadOrder] < (14000)){



		for (int BitRead = 0;BitRead <12; BitRead++){


			if (l_BufferSpecter[BufferReadOrder] == (PixelRead * 12 + BitRead )){ //45 : temps entre le premier front et l'activation du DMA.
				TrammeState = !TrammeState;

				BufferReadOrder++;

				}
		if( BitRead < 8 ){
			OctetRead[BitRead] = TrammeState;
			//printf("%i      %i \r\n",l_BufferSpecter[BufferReadOrder],(1 + PixelRead*12 + BitRead) );
			}
		}


		for (int i = 0;i <8; i++){
		l_amplitudeSpecter[PixelRead] |= OctetRead[i] << (7-i);
		}
		PixelRead ++;



}


//FIN
	for (int i = 0;i <100; i++){
		if(i % 1== 0){
	 printf("Index %i Timing %i \r\n",i, 	l_BufferSpecter[i]);


  //printf("Index %i amplitude %i \r\n",i, 	l_amplitudeSpecter[i]);


		}

	}


	FlagEndExtraction = true;

}
/* USER CODE END 1 */
