
Spectrographe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b44  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08005c04  08005c04  00006c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d48  08005d48  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005d48  08005d48  00006d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d50  08005d50  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d50  08005d50  00006d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d54  08005d54  00006d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005d58  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002664  20000068  08005dc0  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026cc  08005dc0  000076cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d723  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002078  00000000  00000000  000147b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00016830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000994  00000000  00000000  00017488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160ab  00000000  00000000  00017e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e998  00000000  00000000  0002dec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ad8  00000000  00000000  0003c85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3337  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c8  00000000  00000000  000c337c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000c6744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005bec 	.word	0x08005bec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005bec 	.word	0x08005bec

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fea2 	bl	8001208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f82c 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 fa36 	bl	8000938 <MX_GPIO_Init>
  MX_DMA_Init();
 80004cc:	f000 fa16 	bl	80008fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f9e4 	bl	800089c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004d4:	f000 f88c 	bl	80005f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004d8:	f000 f904 	bl	80006e4 <MX_TIM3_Init>
  MX_TIM21_Init();
 80004dc:	f000 f98a 	bl	80007f4 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004e0:	4b0a      	ldr	r3, [pc, #40]	@ (800050c <main+0x50>)
 80004e2:	0018      	movs	r0, r3
 80004e4:	f002 fbae 	bl	8002c44 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim3);
 80004e8:	4b09      	ldr	r3, [pc, #36]	@ (8000510 <main+0x54>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f002 fbaa 	bl	8002c44 <HAL_TIM_Base_Start_IT>
  	 HAL_TIM_Base_Start_IT(&htim21);
 80004f0:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <main+0x58>)
 80004f2:	0018      	movs	r0, r3
 80004f4:	f002 fba6 	bl	8002c44 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */
		//f(!HAL_GPIO_ReadPin(S10077_ENDSCAN_GPIO_Port, S10077_ENDSCAN_Pin)){
		//	printf("nadddd \r\n");
		//}

 TEMOINLED(3000);
 80004f8:	4b07      	ldr	r3, [pc, #28]	@ (8000518 <main+0x5c>)
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 fac8 	bl	8000a90 <TEMOINLED>
 S10077_StartConversion(14000);
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <main+0x60>)
 8000502:	0018      	movs	r0, r3
 8000504:	f000 fcfa 	bl	8000efc <S10077_StartConversion>
  {
 8000508:	46c0      	nop			@ (mov r8, r8)
 800050a:	e7f5      	b.n	80004f8 <main+0x3c>
 800050c:	20000084 	.word	0x20000084
 8000510:	200000c4 	.word	0x200000c4
 8000514:	20000104 	.word	0x20000104
 8000518:	00000bb8 	.word	0x00000bb8
 800051c:	000036b0 	.word	0x000036b0

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b09f      	sub	sp, #124	@ 0x7c
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	2440      	movs	r4, #64	@ 0x40
 8000528:	193b      	adds	r3, r7, r4
 800052a:	0018      	movs	r0, r3
 800052c:	2338      	movs	r3, #56	@ 0x38
 800052e:	001a      	movs	r2, r3
 8000530:	2100      	movs	r1, #0
 8000532:	f004 fdb9 	bl	80050a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000536:	232c      	movs	r3, #44	@ 0x2c
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	0018      	movs	r0, r3
 800053c:	2314      	movs	r3, #20
 800053e:	001a      	movs	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	f004 fdb1 	bl	80050a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	0018      	movs	r0, r3
 800054a:	2328      	movs	r3, #40	@ 0x28
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f004 fdaa 	bl	80050a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	4b24      	ldr	r3, [pc, #144]	@ (80005e8 <SystemClock_Config+0xc8>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a24      	ldr	r2, [pc, #144]	@ (80005ec <SystemClock_Config+0xcc>)
 800055a:	401a      	ands	r2, r3
 800055c:	4b22      	ldr	r3, [pc, #136]	@ (80005e8 <SystemClock_Config+0xc8>)
 800055e:	2180      	movs	r1, #128	@ 0x80
 8000560:	0109      	lsls	r1, r1, #4
 8000562:	430a      	orrs	r2, r1
 8000564:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000566:	0021      	movs	r1, r4
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2202      	movs	r2, #2
 800056c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2201      	movs	r2, #1
 8000572:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2210      	movs	r2, #16
 8000578:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2200      	movs	r2, #0
 800057e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	187b      	adds	r3, r7, r1
 8000582:	0018      	movs	r0, r3
 8000584:	f001 fb88 	bl	8001c98 <HAL_RCC_OscConfig>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800058c:	f000 fa92 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	212c      	movs	r1, #44	@ 0x2c
 8000592:	187b      	adds	r3, r7, r1
 8000594:	220f      	movs	r2, #15
 8000596:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2201      	movs	r2, #1
 800059c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2100      	movs	r1, #0
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 ff43 	bl	8002440 <HAL_RCC_ClockConfig>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005be:	f000 fa79 	bl	8000ab4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2202      	movs	r2, #2
 80005c6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	0018      	movs	r0, r3
 80005d2:	f002 f959 	bl	8002888 <HAL_RCCEx_PeriphCLKConfig>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005da:	f000 fa6b 	bl	8000ab4 <Error_Handler>
  }
}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b01f      	add	sp, #124	@ 0x7c
 80005e4:	bd90      	pop	{r4, r7, pc}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	40007000 	.word	0x40007000
 80005ec:	ffffe7ff 	.word	0xffffe7ff

080005f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	@ 0x28
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005f6:	2318      	movs	r3, #24
 80005f8:	18fb      	adds	r3, r7, r3
 80005fa:	0018      	movs	r0, r3
 80005fc:	2310      	movs	r3, #16
 80005fe:	001a      	movs	r2, r3
 8000600:	2100      	movs	r1, #0
 8000602:	f004 fd51 	bl	80050a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000606:	2310      	movs	r3, #16
 8000608:	18fb      	adds	r3, r7, r3
 800060a:	0018      	movs	r0, r3
 800060c:	2308      	movs	r3, #8
 800060e:	001a      	movs	r2, r3
 8000610:	2100      	movs	r1, #0
 8000612:	f004 fd49 	bl	80050a8 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000616:	003b      	movs	r3, r7
 8000618:	0018      	movs	r0, r3
 800061a:	2310      	movs	r3, #16
 800061c:	001a      	movs	r2, r3
 800061e:	2100      	movs	r1, #0
 8000620:	f004 fd42 	bl	80050a8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000624:	4b2e      	ldr	r3, [pc, #184]	@ (80006e0 <MX_TIM2_Init+0xf0>)
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	05d2      	lsls	r2, r2, #23
 800062a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800062c:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <MX_TIM2_Init+0xf0>)
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000632:	4b2b      	ldr	r3, [pc, #172]	@ (80006e0 <MX_TIM2_Init+0xf0>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000638:	4b29      	ldr	r3, [pc, #164]	@ (80006e0 <MX_TIM2_Init+0xf0>)
 800063a:	2201      	movs	r2, #1
 800063c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063e:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <MX_TIM2_Init+0xf0>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000644:	4b26      	ldr	r3, [pc, #152]	@ (80006e0 <MX_TIM2_Init+0xf0>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800064a:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <MX_TIM2_Init+0xf0>)
 800064c:	0018      	movs	r0, r3
 800064e:	f002 fab9 	bl	8002bc4 <HAL_TIM_Base_Init>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d001      	beq.n	800065a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000656:	f000 fa2d 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065a:	2118      	movs	r1, #24
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2280      	movs	r2, #128	@ 0x80
 8000660:	0152      	lsls	r2, r2, #5
 8000662:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000664:	187a      	adds	r2, r7, r1
 8000666:	4b1e      	ldr	r3, [pc, #120]	@ (80006e0 <MX_TIM2_Init+0xf0>)
 8000668:	0011      	movs	r1, r2
 800066a:	0018      	movs	r0, r3
 800066c:	f002 ffa8 	bl	80035c0 <HAL_TIM_ConfigClockSource>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000674:	f000 fa1e 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000678:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <MX_TIM2_Init+0xf0>)
 800067a:	0018      	movs	r0, r3
 800067c:	f002 fb7c 	bl	8002d78 <HAL_TIM_IC_Init>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000684:	f000 fa16 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000688:	2110      	movs	r1, #16
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000696:	187a      	adds	r2, r7, r1
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <MX_TIM2_Init+0xf0>)
 800069a:	0011      	movs	r1, r2
 800069c:	0018      	movs	r0, r3
 800069e:	f003 fcab 	bl	8003ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80006a6:	f000 fa05 	bl	8000ab4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80006aa:	003b      	movs	r3, r7
 80006ac:	220a      	movs	r2, #10
 80006ae:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006b0:	003b      	movs	r3, r7
 80006b2:	2201      	movs	r2, #1
 80006b4:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006b6:	003b      	movs	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80006bc:	003b      	movs	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80006c2:	0039      	movs	r1, r7
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <MX_TIM2_Init+0xf0>)
 80006c6:	2204      	movs	r2, #4
 80006c8:	0018      	movs	r0, r3
 80006ca:	f002 fed5 	bl	8003478 <HAL_TIM_IC_ConfigChannel>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80006d2:	f000 f9ef 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b00a      	add	sp, #40	@ 0x28
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	20000084 	.word	0x20000084

080006e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	@ 0x28
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ea:	2318      	movs	r3, #24
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	0018      	movs	r0, r3
 80006f0:	2310      	movs	r3, #16
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f004 fcd7 	bl	80050a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fa:	2310      	movs	r3, #16
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	0018      	movs	r0, r3
 8000700:	2308      	movs	r3, #8
 8000702:	001a      	movs	r2, r3
 8000704:	2100      	movs	r1, #0
 8000706:	f004 fccf 	bl	80050a8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070a:	003b      	movs	r3, r7
 800070c:	0018      	movs	r0, r3
 800070e:	2310      	movs	r3, #16
 8000710:	001a      	movs	r2, r3
 8000712:	2100      	movs	r1, #0
 8000714:	f004 fcc8 	bl	80050a8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000718:	4b34      	ldr	r3, [pc, #208]	@ (80007ec <MX_TIM3_Init+0x108>)
 800071a:	4a35      	ldr	r2, [pc, #212]	@ (80007f0 <MX_TIM3_Init+0x10c>)
 800071c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 800071e:	4b33      	ldr	r3, [pc, #204]	@ (80007ec <MX_TIM3_Init+0x108>)
 8000720:	2203      	movs	r2, #3
 8000722:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b31      	ldr	r3, [pc, #196]	@ (80007ec <MX_TIM3_Init+0x108>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3;
 800072a:	4b30      	ldr	r3, [pc, #192]	@ (80007ec <MX_TIM3_Init+0x108>)
 800072c:	2203      	movs	r2, #3
 800072e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b2e      	ldr	r3, [pc, #184]	@ (80007ec <MX_TIM3_Init+0x108>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b2d      	ldr	r3, [pc, #180]	@ (80007ec <MX_TIM3_Init+0x108>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800073c:	4b2b      	ldr	r3, [pc, #172]	@ (80007ec <MX_TIM3_Init+0x108>)
 800073e:	0018      	movs	r0, r3
 8000740:	f002 fa40 	bl	8002bc4 <HAL_TIM_Base_Init>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000748:	f000 f9b4 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074c:	2118      	movs	r1, #24
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2280      	movs	r2, #128	@ 0x80
 8000752:	0152      	lsls	r2, r2, #5
 8000754:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000756:	187a      	adds	r2, r7, r1
 8000758:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <MX_TIM3_Init+0x108>)
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f002 ff2f 	bl	80035c0 <HAL_TIM_ConfigClockSource>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000766:	f000 f9a5 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800076a:	4b20      	ldr	r3, [pc, #128]	@ (80007ec <MX_TIM3_Init+0x108>)
 800076c:	0018      	movs	r0, r3
 800076e:	f002 fabb 	bl	8002ce8 <HAL_TIM_OC_Init>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000776:	f000 f99d 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077a:	2110      	movs	r1, #16
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000788:	187a      	adds	r2, r7, r1
 800078a:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <MX_TIM3_Init+0x108>)
 800078c:	0011      	movs	r1, r2
 800078e:	0018      	movs	r0, r3
 8000790:	f003 fc32 	bl	8003ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000798:	f000 f98c 	bl	8000ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 800079c:	003b      	movs	r3, r7
 800079e:	2250      	movs	r2, #80	@ 0x50
 80007a0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007a2:	003b      	movs	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a8:	003b      	movs	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ae:	003b      	movs	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b4:	0039      	movs	r1, r7
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <MX_TIM3_Init+0x108>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	0018      	movs	r0, r3
 80007bc:	f002 fe04 	bl	80033c8 <HAL_TIM_OC_ConfigChannel>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80007c4:	f000 f976 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80007c8:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_TIM3_Init+0x108>)
 80007ca:	2104      	movs	r1, #4
 80007cc:	0018      	movs	r0, r3
 80007ce:	f003 fc71 	bl	80040b4 <HAL_TIMEx_RemapConfig>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 80007d6:	f000 f96d 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007da:	4b04      	ldr	r3, [pc, #16]	@ (80007ec <MX_TIM3_Init+0x108>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 fa17 	bl	8000c10 <HAL_TIM_MspPostInit>

}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b00a      	add	sp, #40	@ 0x28
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	200000c4 	.word	0x200000c4
 80007f0:	40000400 	.word	0x40000400

080007f4 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fa:	2308      	movs	r3, #8
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	0018      	movs	r0, r3
 8000800:	2310      	movs	r3, #16
 8000802:	001a      	movs	r2, r3
 8000804:	2100      	movs	r1, #0
 8000806:	f004 fc4f 	bl	80050a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080a:	003b      	movs	r3, r7
 800080c:	0018      	movs	r0, r3
 800080e:	2308      	movs	r3, #8
 8000810:	001a      	movs	r2, r3
 8000812:	2100      	movs	r1, #0
 8000814:	f004 fc48 	bl	80050a8 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000818:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_TIM21_Init+0xa0>)
 800081a:	4a1f      	ldr	r2, [pc, #124]	@ (8000898 <MX_TIM21_Init+0xa4>)
 800081c:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 19;
 800081e:	4b1d      	ldr	r3, [pc, #116]	@ (8000894 <MX_TIM21_Init+0xa0>)
 8000820:	2213      	movs	r2, #19
 8000822:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000824:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_TIM21_Init+0xa0>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 39;
 800082a:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_TIM21_Init+0xa0>)
 800082c:	2227      	movs	r2, #39	@ 0x27
 800082e:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000830:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <MX_TIM21_Init+0xa0>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000836:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <MX_TIM21_Init+0xa0>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 800083c:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <MX_TIM21_Init+0xa0>)
 800083e:	0018      	movs	r0, r3
 8000840:	f002 f9c0 	bl	8002bc4 <HAL_TIM_Base_Init>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000848:	f000 f934 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084c:	2108      	movs	r1, #8
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2280      	movs	r2, #128	@ 0x80
 8000852:	0152      	lsls	r2, r2, #5
 8000854:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000856:	187a      	adds	r2, r7, r1
 8000858:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_TIM21_Init+0xa0>)
 800085a:	0011      	movs	r1, r2
 800085c:	0018      	movs	r0, r3
 800085e:	f002 feaf 	bl	80035c0 <HAL_TIM_ConfigClockSource>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8000866:	f000 f925 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086a:	003b      	movs	r3, r7
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000870:	003b      	movs	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000876:	003a      	movs	r2, r7
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_TIM21_Init+0xa0>)
 800087a:	0011      	movs	r1, r2
 800087c:	0018      	movs	r0, r3
 800087e:	f003 fbbb 	bl	8003ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8000886:	f000 f915 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b006      	add	sp, #24
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	20000104 	.word	0x20000104
 8000898:	40010800 	.word	0x40010800

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008a2:	4a15      	ldr	r2, [pc, #84]	@ (80008f8 <MX_USART2_UART_Init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008a6:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008a8:	2296      	movs	r2, #150	@ 0x96
 80008aa:	0192      	lsls	r2, r2, #6
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008de:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008e0:	0018      	movs	r0, r3
 80008e2:	f003 fc05 	bl	80040f0 <HAL_UART_Init>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ea:	f000 f8e3 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000018c 	.word	0x2000018c
 80008f8:	40004400 	.word	0x40004400

080008fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <MX_DMA_Init+0x38>)
 8000904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <MX_DMA_Init+0x38>)
 8000908:	2101      	movs	r1, #1
 800090a:	430a      	orrs	r2, r1
 800090c:	631a      	str	r2, [r3, #48]	@ 0x30
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <MX_DMA_Init+0x38>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	2201      	movs	r2, #1
 8000914:	4013      	ands	r3, r2
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	200a      	movs	r0, #10
 8000920:	f000 fdb2 	bl	8001488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000924:	200a      	movs	r0, #10
 8000926:	f000 fdc4 	bl	80014b2 <HAL_NVIC_EnableIRQ>

}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b002      	add	sp, #8
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	40021000 	.word	0x40021000

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b08b      	sub	sp, #44	@ 0x2c
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	2414      	movs	r4, #20
 8000940:	193b      	adds	r3, r7, r4
 8000942:	0018      	movs	r0, r3
 8000944:	2314      	movs	r3, #20
 8000946:	001a      	movs	r2, r3
 8000948:	2100      	movs	r1, #0
 800094a:	f004 fbad 	bl	80050a8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b43      	ldr	r3, [pc, #268]	@ (8000a5c <MX_GPIO_Init+0x124>)
 8000950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000952:	4b42      	ldr	r3, [pc, #264]	@ (8000a5c <MX_GPIO_Init+0x124>)
 8000954:	2104      	movs	r1, #4
 8000956:	430a      	orrs	r2, r1
 8000958:	62da      	str	r2, [r3, #44]	@ 0x2c
 800095a:	4b40      	ldr	r3, [pc, #256]	@ (8000a5c <MX_GPIO_Init+0x124>)
 800095c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800095e:	2204      	movs	r2, #4
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000966:	4b3d      	ldr	r3, [pc, #244]	@ (8000a5c <MX_GPIO_Init+0x124>)
 8000968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800096a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a5c <MX_GPIO_Init+0x124>)
 800096c:	2180      	movs	r1, #128	@ 0x80
 800096e:	430a      	orrs	r2, r1
 8000970:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000972:	4b3a      	ldr	r3, [pc, #232]	@ (8000a5c <MX_GPIO_Init+0x124>)
 8000974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000976:	2280      	movs	r2, #128	@ 0x80
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b37      	ldr	r3, [pc, #220]	@ (8000a5c <MX_GPIO_Init+0x124>)
 8000980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000982:	4b36      	ldr	r3, [pc, #216]	@ (8000a5c <MX_GPIO_Init+0x124>)
 8000984:	2101      	movs	r1, #1
 8000986:	430a      	orrs	r2, r1
 8000988:	62da      	str	r2, [r3, #44]	@ 0x2c
 800098a:	4b34      	ldr	r3, [pc, #208]	@ (8000a5c <MX_GPIO_Init+0x124>)
 800098c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800098e:	2201      	movs	r2, #1
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	4b31      	ldr	r3, [pc, #196]	@ (8000a5c <MX_GPIO_Init+0x124>)
 8000998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800099a:	4b30      	ldr	r3, [pc, #192]	@ (8000a5c <MX_GPIO_Init+0x124>)
 800099c:	2102      	movs	r1, #2
 800099e:	430a      	orrs	r2, r1
 80009a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009a2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a5c <MX_GPIO_Init+0x124>)
 80009a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009a6:	2202      	movs	r2, #2
 80009a8:	4013      	ands	r3, r2
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ae:	23a0      	movs	r3, #160	@ 0xa0
 80009b0:	05db      	lsls	r3, r3, #23
 80009b2:	2200      	movs	r2, #0
 80009b4:	2120      	movs	r1, #32
 80009b6:	0018      	movs	r0, r3
 80009b8:	f001 f935 	bl	8001c26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S10077_START_GPIO_Port, S10077_START_Pin, GPIO_PIN_RESET);
 80009bc:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <MX_GPIO_Init+0x128>)
 80009be:	2200      	movs	r2, #0
 80009c0:	2140      	movs	r1, #64	@ 0x40
 80009c2:	0018      	movs	r0, r3
 80009c4:	f001 f92f 	bl	8001c26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2280      	movs	r2, #128	@ 0x80
 80009cc:	0192      	lsls	r2, r2, #6
 80009ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	2284      	movs	r2, #132	@ 0x84
 80009d4:	0392      	lsls	r2, r2, #14
 80009d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	4a20      	ldr	r2, [pc, #128]	@ (8000a64 <MX_GPIO_Init+0x12c>)
 80009e2:	0019      	movs	r1, r3
 80009e4:	0010      	movs	r0, r2
 80009e6:	f000 ff83 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : S10077_ENDSCAN_Pin */
  GPIO_InitStruct.Pin = S10077_ENDSCAN_Pin;
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	2202      	movs	r2, #2
 80009ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	2200      	movs	r2, #0
 80009f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(S10077_ENDSCAN_GPIO_Port, &GPIO_InitStruct);
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	4a19      	ldr	r2, [pc, #100]	@ (8000a64 <MX_GPIO_Init+0x12c>)
 8000a00:	0019      	movs	r1, r3
 8000a02:	0010      	movs	r0, r2
 8000a04:	f000 ff74 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2220      	movs	r2, #32
 8000a0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	2201      	movs	r2, #1
 8000a12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a20:	193a      	adds	r2, r7, r4
 8000a22:	23a0      	movs	r3, #160	@ 0xa0
 8000a24:	05db      	lsls	r3, r3, #23
 8000a26:	0011      	movs	r1, r2
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f000 ff61 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : S10077_START_Pin */
  GPIO_InitStruct.Pin = S10077_START_Pin;
 8000a2e:	0021      	movs	r1, r4
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2240      	movs	r2, #64	@ 0x40
 8000a34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2201      	movs	r2, #1
 8000a3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2201      	movs	r2, #1
 8000a40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(S10077_START_GPIO_Port, &GPIO_InitStruct);
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <MX_GPIO_Init+0x128>)
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0010      	movs	r0, r2
 8000a50:	f000 ff4e 	bl	80018f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b00b      	add	sp, #44	@ 0x2c
 8000a5a:	bd90      	pop	{r4, r7, pc}
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	50000400 	.word	0x50000400
 8000a64:	50000800 	.word	0x50000800

08000a68 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
/* Custom implementation of fputc here */
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000a70:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <__io_putchar+0x20>)
 8000a72:	1d39      	adds	r1, r7, #4
 8000a74:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <__io_putchar+0x24>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	f003 fb8e 	bl	8004198 <HAL_UART_Transmit>
return ch;
 8000a7c:	687b      	ldr	r3, [r7, #4]
}
 8000a7e:	0018      	movs	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	0000ffff 	.word	0x0000ffff
 8000a8c:	2000018c 	.word	0x2000018c

08000a90 <TEMOINLED>:

void TEMOINLED(int x_blinktime){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a98:	23a0      	movs	r3, #160	@ 0xa0
 8000a9a:	05db      	lsls	r3, r3, #23
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f001 f8de 	bl	8001c60 <HAL_GPIO_TogglePin>
	HAL_Delay(x_blinktime);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 fc1e 	bl	80012e8 <HAL_Delay>

}
 8000aac:	46c0      	nop			@ (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b002      	add	sp, #8
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	46c0      	nop			@ (mov r8, r8)
 8000abe:	e7fd      	b.n	8000abc <Error_Handler+0x8>

08000ac0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac4:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <HAL_MspInit+0x24>)
 8000ac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_MspInit+0x24>)
 8000aca:	2101      	movs	r1, #1
 8000acc:	430a      	orrs	r2, r1
 8000ace:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad0:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <HAL_MspInit+0x24>)
 8000ad2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <HAL_MspInit+0x24>)
 8000ad6:	2180      	movs	r1, #128	@ 0x80
 8000ad8:	0549      	lsls	r1, r1, #21
 8000ada:	430a      	orrs	r2, r1
 8000adc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b089      	sub	sp, #36	@ 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	240c      	movs	r4, #12
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	0018      	movs	r0, r3
 8000af6:	2314      	movs	r3, #20
 8000af8:	001a      	movs	r2, r3
 8000afa:	2100      	movs	r1, #0
 8000afc:	f004 fad4 	bl	80050a8 <memset>
  if(htim_base->Instance==TIM2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	2380      	movs	r3, #128	@ 0x80
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d154      	bne.n	8000bb6 <HAL_TIM_Base_MspInit+0xce>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000bfc <HAL_TIM_Base_MspInit+0x114>)
 8000b0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b10:	4b3a      	ldr	r3, [pc, #232]	@ (8000bfc <HAL_TIM_Base_MspInit+0x114>)
 8000b12:	2101      	movs	r1, #1
 8000b14:	430a      	orrs	r2, r1
 8000b16:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b38      	ldr	r3, [pc, #224]	@ (8000bfc <HAL_TIM_Base_MspInit+0x114>)
 8000b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b1c:	4b37      	ldr	r3, [pc, #220]	@ (8000bfc <HAL_TIM_Base_MspInit+0x114>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	430a      	orrs	r2, r1
 8000b22:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b24:	4b35      	ldr	r3, [pc, #212]	@ (8000bfc <HAL_TIM_Base_MspInit+0x114>)
 8000b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = S10077_DO_Pin;
 8000b30:	0021      	movs	r1, r4
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2202      	movs	r2, #2
 8000b36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(S10077_DO_GPIO_Port, &GPIO_InitStruct);
 8000b50:	187a      	adds	r2, r7, r1
 8000b52:	23a0      	movs	r3, #160	@ 0xa0
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	0011      	movs	r1, r2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 fec9 	bl	80018f0 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel3;
 8000b5e:	4b28      	ldr	r3, [pc, #160]	@ (8000c00 <HAL_TIM_Base_MspInit+0x118>)
 8000b60:	4a28      	ldr	r2, [pc, #160]	@ (8000c04 <HAL_TIM_Base_MspInit+0x11c>)
 8000b62:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_8;
 8000b64:	4b26      	ldr	r3, [pc, #152]	@ (8000c00 <HAL_TIM_Base_MspInit+0x118>)
 8000b66:	2208      	movs	r2, #8
 8000b68:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6a:	4b25      	ldr	r3, [pc, #148]	@ (8000c00 <HAL_TIM_Base_MspInit+0x118>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b70:	4b23      	ldr	r3, [pc, #140]	@ (8000c00 <HAL_TIM_Base_MspInit+0x118>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000b76:	4b22      	ldr	r3, [pc, #136]	@ (8000c00 <HAL_TIM_Base_MspInit+0x118>)
 8000b78:	2280      	movs	r2, #128	@ 0x80
 8000b7a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b7c:	4b20      	ldr	r3, [pc, #128]	@ (8000c00 <HAL_TIM_Base_MspInit+0x118>)
 8000b7e:	2280      	movs	r2, #128	@ 0x80
 8000b80:	0052      	lsls	r2, r2, #1
 8000b82:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b84:	4b1e      	ldr	r3, [pc, #120]	@ (8000c00 <HAL_TIM_Base_MspInit+0x118>)
 8000b86:	2280      	movs	r2, #128	@ 0x80
 8000b88:	00d2      	lsls	r2, r2, #3
 8000b8a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <HAL_TIM_Base_MspInit+0x118>)
 8000b8e:	2220      	movs	r2, #32
 8000b90:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000b92:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <HAL_TIM_Base_MspInit+0x118>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8000b98:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <HAL_TIM_Base_MspInit+0x118>)
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 fca6 	bl	80014ec <HAL_DMA_Init>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_TIM_Base_MspInit+0xc0>
    {
      Error_Handler();
 8000ba4:	f7ff ff86 	bl	8000ab4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a15      	ldr	r2, [pc, #84]	@ (8000c00 <HAL_TIM_Base_MspInit+0x118>)
 8000bac:	625a      	str	r2, [r3, #36]	@ 0x24
 8000bae:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <HAL_TIM_Base_MspInit+0x118>)
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8000bb4:	e01e      	b.n	8000bf4 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM3)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a13      	ldr	r2, [pc, #76]	@ (8000c08 <HAL_TIM_Base_MspInit+0x120>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d106      	bne.n	8000bce <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <HAL_TIM_Base_MspInit+0x114>)
 8000bc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <HAL_TIM_Base_MspInit+0x114>)
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000bcc:	e012      	b.n	8000bf4 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM21)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c0c <HAL_TIM_Base_MspInit+0x124>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d10d      	bne.n	8000bf4 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <HAL_TIM_Base_MspInit+0x114>)
 8000bda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bdc:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <HAL_TIM_Base_MspInit+0x114>)
 8000bde:	2104      	movs	r1, #4
 8000be0:	430a      	orrs	r2, r1
 8000be2:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	2014      	movs	r0, #20
 8000bea:	f000 fc4d 	bl	8001488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000bee:	2014      	movs	r0, #20
 8000bf0:	f000 fc5f 	bl	80014b2 <HAL_NVIC_EnableIRQ>
}
 8000bf4:	46c0      	nop			@ (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b009      	add	sp, #36	@ 0x24
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	20000144 	.word	0x20000144
 8000c04:	40020030 	.word	0x40020030
 8000c08:	40000400 	.word	0x40000400
 8000c0c:	40010800 	.word	0x40010800

08000c10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b089      	sub	sp, #36	@ 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	240c      	movs	r4, #12
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	2314      	movs	r3, #20
 8000c20:	001a      	movs	r2, r3
 8000c22:	2100      	movs	r1, #0
 8000c24:	f004 fa40 	bl	80050a8 <memset>
  if(htim->Instance==TIM3)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a14      	ldr	r2, [pc, #80]	@ (8000c80 <HAL_TIM_MspPostInit+0x70>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d122      	bne.n	8000c78 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <HAL_TIM_MspPostInit+0x74>)
 8000c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c36:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <HAL_TIM_MspPostInit+0x74>)
 8000c38:	2101      	movs	r1, #1
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <HAL_TIM_MspPostInit+0x74>)
 8000c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c42:	2201      	movs	r2, #1
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = S10077_CLK_Pin;
 8000c4a:	0021      	movs	r1, r4
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2240      	movs	r2, #64	@ 0x40
 8000c50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2202      	movs	r2, #2
 8000c56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2202      	movs	r2, #2
 8000c68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(S10077_CLK_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	187a      	adds	r2, r7, r1
 8000c6c:	23a0      	movs	r3, #160	@ 0xa0
 8000c6e:	05db      	lsls	r3, r3, #23
 8000c70:	0011      	movs	r1, r2
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 fe3c 	bl	80018f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c78:	46c0      	nop			@ (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b009      	add	sp, #36	@ 0x24
 8000c7e:	bd90      	pop	{r4, r7, pc}
 8000c80:	40000400 	.word	0x40000400
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b089      	sub	sp, #36	@ 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	240c      	movs	r4, #12
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	0018      	movs	r0, r3
 8000c96:	2314      	movs	r3, #20
 8000c98:	001a      	movs	r2, r3
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	f004 fa04 	bl	80050a8 <memset>
  if(huart->Instance==USART2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a18      	ldr	r2, [pc, #96]	@ (8000d08 <HAL_UART_MspInit+0x80>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d129      	bne.n	8000cfe <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000caa:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <HAL_UART_MspInit+0x84>)
 8000cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cae:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <HAL_UART_MspInit+0x84>)
 8000cb0:	2180      	movs	r1, #128	@ 0x80
 8000cb2:	0289      	lsls	r1, r1, #10
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <HAL_UART_MspInit+0x84>)
 8000cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cbc:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <HAL_UART_MspInit+0x84>)
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <HAL_UART_MspInit+0x84>)
 8000cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4013      	ands	r3, r2
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cd0:	0021      	movs	r1, r4
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	220c      	movs	r2, #12
 8000cd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2202      	movs	r2, #2
 8000cdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2204      	movs	r2, #4
 8000cee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	187a      	adds	r2, r7, r1
 8000cf2:	23a0      	movs	r3, #160	@ 0xa0
 8000cf4:	05db      	lsls	r3, r3, #23
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f000 fdf9 	bl	80018f0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b009      	add	sp, #36	@ 0x24
 8000d04:	bd90      	pop	{r4, r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	40004400 	.word	0x40004400
 8000d0c:	40021000 	.word	0x40021000

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d14:	46c0      	nop			@ (mov r8, r8)
 8000d16:	e7fd      	b.n	8000d14 <NMI_Handler+0x4>

08000d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1c:	46c0      	nop			@ (mov r8, r8)
 8000d1e:	e7fd      	b.n	8000d1c <HardFault_Handler+0x4>

08000d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f000 faba 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	46c0      	nop			@ (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 fcf3 	bl	8001736 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	20000144 	.word	0x20000144

08000d5c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8000d60:	4b03      	ldr	r3, [pc, #12]	@ (8000d70 <TIM21_IRQHandler+0x14>)
 8000d62:	0018      	movs	r0, r3
 8000d64:	f002 fa48 	bl	80031f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000d68:	46c0      	nop			@ (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	20000104 	.word	0x20000104

08000d74 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM21) {
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a06      	ldr	r2, [pc, #24]	@ (8000d9c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d106      	bne.n	8000d94 <HAL_TIM_PeriodElapsedCallback+0x20>

    	l_CycleCount++;
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d8e:	601a      	str	r2, [r3, #0]
    	S10077_Conversion();
 8000d90:	f000 f808 	bl	8000da4 <S10077_Conversion>
    }

}
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b002      	add	sp, #8
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40010800 	.word	0x40010800
 8000da0:	2000255c 	.word	0x2000255c

08000da4 <S10077_Conversion>:
void S10077_Conversion(){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0


	switch(l_S10077_CONVERSIONSTEP){
 8000da8:	4b46      	ldr	r3, [pc, #280]	@ (8000ec4 <S10077_Conversion+0x120>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b05      	cmp	r3, #5
 8000dae:	d900      	bls.n	8000db2 <S10077_Conversion+0xe>
 8000db0:	e079      	b.n	8000ea6 <S10077_Conversion+0x102>
 8000db2:	009a      	lsls	r2, r3, #2
 8000db4:	4b44      	ldr	r3, [pc, #272]	@ (8000ec8 <S10077_Conversion+0x124>)
 8000db6:	18d3      	adds	r3, r2, r3
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	469f      	mov	pc, r3

	case IDLE :

		HAL_GPIO_WritePin(S10077_START_GPIO_Port, S10077_START_Pin,GPIO_PIN_SET );
 8000dbc:	4b43      	ldr	r3, [pc, #268]	@ (8000ecc <S10077_Conversion+0x128>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2140      	movs	r1, #64	@ 0x40
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 ff2f 	bl	8001c26 <HAL_GPIO_WritePin>
		break;
 8000dc8:	e078      	b.n	8000ebc <S10077_Conversion+0x118>


	case START_LOWSTEP :

		//attend que la duree a l'etat bas se termine
		if((l_CycleCount - l_ReferenceTimings) > 1){
 8000dca:	4b41      	ldr	r3, [pc, #260]	@ (8000ed0 <S10077_Conversion+0x12c>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	4b41      	ldr	r3, [pc, #260]	@ (8000ed4 <S10077_Conversion+0x130>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d968      	bls.n	8000eaa <S10077_Conversion+0x106>

			l_S10077_CONVERSIONSTEP = START_HIGHSTEP;
 8000dd8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ec4 <S10077_Conversion+0x120>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(S10077_START_GPIO_Port, S10077_START_Pin,GPIO_PIN_SET );
 8000dde:	4b3b      	ldr	r3, [pc, #236]	@ (8000ecc <S10077_Conversion+0x128>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	2140      	movs	r1, #64	@ 0x40
 8000de4:	0018      	movs	r0, r3
 8000de6:	f000 ff1e 	bl	8001c26 <HAL_GPIO_WritePin>
			debug1 = l_CycleCount;
 8000dea:	4b39      	ldr	r3, [pc, #228]	@ (8000ed0 <S10077_Conversion+0x12c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b39      	ldr	r3, [pc, #228]	@ (8000ed8 <S10077_Conversion+0x134>)
 8000df2:	801a      	strh	r2, [r3, #0]
		}
		break;
 8000df4:	e059      	b.n	8000eaa <S10077_Conversion+0x106>

	case START_HIGHSTEP :

		if((l_CycleCount - l_ReferenceTimings) > l_IntegrationTime  ){
 8000df6:	4b36      	ldr	r3, [pc, #216]	@ (8000ed0 <S10077_Conversion+0x12c>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b36      	ldr	r3, [pc, #216]	@ (8000ed4 <S10077_Conversion+0x130>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	1ad2      	subs	r2, r2, r3
 8000e00:	4b36      	ldr	r3, [pc, #216]	@ (8000edc <S10077_Conversion+0x138>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d952      	bls.n	8000eae <S10077_Conversion+0x10a>
			debug2 = l_CycleCount;
 8000e08:	4b31      	ldr	r3, [pc, #196]	@ (8000ed0 <S10077_Conversion+0x12c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ee0 <S10077_Conversion+0x13c>)
 8000e10:	801a      	strh	r2, [r3, #0]

			//printf("Debut de la conversion  %i \r\n",(l_CycleCount - l_ReferenceTimings));
			HAL_GPIO_WritePin(S10077_START_GPIO_Port, S10077_START_Pin,GPIO_PIN_RESET );
 8000e12:	4b2e      	ldr	r3, [pc, #184]	@ (8000ecc <S10077_Conversion+0x128>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	2140      	movs	r1, #64	@ 0x40
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f000 ff04 	bl	8001c26 <HAL_GPIO_WritePin>

			l_S10077_CONVERSIONSTEP = CONVERTING;
 8000e1e:	4b29      	ldr	r3, [pc, #164]	@ (8000ec4 <S10077_Conversion+0x120>)
 8000e20:	2203      	movs	r2, #3
 8000e22:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000e24:	e043      	b.n	8000eae <S10077_Conversion+0x10a>
	case CONVERTING :
		printf("HighstepTime %i \r\n",debug2-debug1);
 8000e26:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee0 <S10077_Conversion+0x13c>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed8 <S10077_Conversion+0x134>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	1ad2      	subs	r2, r2, r3
 8000e32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <S10077_Conversion+0x140>)
 8000e34:	0011      	movs	r1, r2
 8000e36:	0018      	movs	r0, r3
 8000e38:	f003 ffda 	bl	8004df0 <iprintf>

		if(HAL_GPIO_ReadPin(S10077_ENDSCAN_GPIO_Port, S10077_ENDSCAN_Pin)){
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee8 <S10077_Conversion+0x144>)
 8000e3e:	2102      	movs	r1, #2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f000 fed3 	bl	8001bec <HAL_GPIO_ReadPin>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d033      	beq.n	8000eb2 <S10077_Conversion+0x10e>

			HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);
 8000e4a:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <S10077_Conversion+0x148>)
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f002 f932 	bl	80030b8 <HAL_TIM_IC_Stop_DMA>
			l_ReferenceTimings = l_CycleCount;
 8000e54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <S10077_Conversion+0x12c>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <S10077_Conversion+0x130>)
 8000e5a:	601a      	str	r2, [r3, #0]
			l_SendingStep = 0;
 8000e5c:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <S10077_Conversion+0x14c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
			iBcl2 = 0;
 8000e62:	4b24      	ldr	r3, [pc, #144]	@ (8000ef4 <S10077_Conversion+0x150>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
			FlagEndExtraction = false;
 8000e68:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <S10077_Conversion+0x154>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
			l_S10077_CONVERSIONSTEP = EXTRACTING;
 8000e6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <S10077_Conversion+0x120>)
 8000e70:	2204      	movs	r2, #4
 8000e72:	701a      	strb	r2, [r3, #0]
			ExtractAmplitude();
 8000e74:	f000 f8b8 	bl	8000fe8 <ExtractAmplitude>

		//printf("Fin de la conversion : %i \r\n",(l_CycleCount - l_ReferenceTimings));

		}

		break;
 8000e78:	e01b      	b.n	8000eb2 <S10077_Conversion+0x10e>
	case EXTRACTING :

		if (FlagEndExtraction){
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <S10077_Conversion+0x154>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d019      	beq.n	8000eb6 <S10077_Conversion+0x112>
		//	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
			l_S10077_CONVERSIONSTEP = SENDING;
 8000e82:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <S10077_Conversion+0x120>)
 8000e84:	2205      	movs	r2, #5
 8000e86:	701a      	strb	r2, [r3, #0]

		}
		break;
 8000e88:	e015      	b.n	8000eb6 <S10077_Conversion+0x112>
	case SENDING :

			if(FlagEndExtraction == true){
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <S10077_Conversion+0x154>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d013      	beq.n	8000eba <S10077_Conversion+0x116>

			HAL_GPIO_WritePin(S10077_START_GPIO_Port, S10077_START_Pin,GPIO_PIN_SET );
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <S10077_Conversion+0x128>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	2140      	movs	r1, #64	@ 0x40
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f000 fec4 	bl	8001c26 <HAL_GPIO_WritePin>


			l_S10077_CONVERSIONSTEP = IDLE;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <S10077_Conversion+0x120>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]

		//	printf("Back to waiting \r\n");

		}

		break;
 8000ea4:	e009      	b.n	8000eba <S10077_Conversion+0x116>
	default :


		break;
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	e008      	b.n	8000ebc <S10077_Conversion+0x118>
		break;
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	e006      	b.n	8000ebc <S10077_Conversion+0x118>
		break;
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	e004      	b.n	8000ebc <S10077_Conversion+0x118>
		break;
 8000eb2:	46c0      	nop			@ (mov r8, r8)
 8000eb4:	e002      	b.n	8000ebc <S10077_Conversion+0x118>
		break;
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	e000      	b.n	8000ebc <S10077_Conversion+0x118>
		break;
 8000eba:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	20002560 	.word	0x20002560
 8000ec8:	08005c90 	.word	0x08005c90
 8000ecc:	50000400 	.word	0x50000400
 8000ed0:	2000255c 	.word	0x2000255c
 8000ed4:	20002564 	.word	0x20002564
 8000ed8:	20002574 	.word	0x20002574
 8000edc:	20002568 	.word	0x20002568
 8000ee0:	20002576 	.word	0x20002576
 8000ee4:	08005c04 	.word	0x08005c04
 8000ee8:	50000800 	.word	0x50000800
 8000eec:	20000084 	.word	0x20000084
 8000ef0:	2000256c 	.word	0x2000256c
 8000ef4:	20002570 	.word	0x20002570
 8000ef8:	20000614 	.word	0x20000614

08000efc <S10077_StartConversion>:

void S10077_StartConversion(uint32_t x_Intergrationtime){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

	//printf("heyehey3 \r\n");
	if(l_S10077_CONVERSIONSTEP == IDLE){
 8000f04:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb4 <S10077_StartConversion+0xb8>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d14f      	bne.n	8000fac <S10077_StartConversion+0xb0>
		//printf("heyehey2 \r\n");
		if(x_Intergrationtime > 12300 && x_Intergrationtime < 120000){
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8000fb8 <S10077_StartConversion+0xbc>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d947      	bls.n	8000fa4 <S10077_StartConversion+0xa8>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a29      	ldr	r2, [pc, #164]	@ (8000fbc <S10077_StartConversion+0xc0>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d843      	bhi.n	8000fa4 <S10077_StartConversion+0xa8>
			//printf("heyehey1 \r\n");
			for (int i = 0; i < 1024; i++) {
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e007      	b.n	8000f32 <S10077_StartConversion+0x36>
			    l_amplitudeSpecter[i] = 0;
 8000f22:	4a27      	ldr	r2, [pc, #156]	@ (8000fc0 <S10077_StartConversion+0xc4>)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	18d3      	adds	r3, r2, r3
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 1024; i++) {
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	2380      	movs	r3, #128	@ 0x80
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	dbf2      	blt.n	8000f22 <S10077_StartConversion+0x26>
			}
			for (int i = 0; i < 4000; i++) {
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	e007      	b.n	8000f52 <S10077_StartConversion+0x56>

			     l_BufferSpecter[i] = 0;
 8000f42:	4b20      	ldr	r3, [pc, #128]	@ (8000fc4 <S10077_StartConversion+0xc8>)
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	0052      	lsls	r2, r2, #1
 8000f48:	2100      	movs	r1, #0
 8000f4a:	52d1      	strh	r1, [r2, r3]
			for (int i = 0; i < 4000; i++) {
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	23fa      	movs	r3, #250	@ 0xfa
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	dbf2      	blt.n	8000f42 <S10077_StartConversion+0x46>

			}
			// printf("heyehey0 \r\n");
			//code debut de conversion
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2,(uint32_t *) l_BufferSpecter, 4000);
 8000f5c:	23fa      	movs	r3, #250	@ 0xfa
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	4a18      	ldr	r2, [pc, #96]	@ (8000fc4 <S10077_StartConversion+0xc8>)
 8000f62:	4819      	ldr	r0, [pc, #100]	@ (8000fc8 <S10077_StartConversion+0xcc>)
 8000f64:	2104      	movs	r1, #4
 8000f66:	f001 ff4f 	bl	8002e08 <HAL_TIM_IC_Start_DMA>
			l_nObservedPixel = 0;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <S10077_StartConversion+0xd0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	801a      	strh	r2, [r3, #0]
			l_nObservedBit = 0;
 8000f70:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <S10077_StartConversion+0xd4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
			l_ReferenceTimings = l_CycleCount;
 8000f76:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <S10077_StartConversion+0xd8>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <S10077_StartConversion+0xdc>)
 8000f7c:	601a      	str	r2, [r3, #0]
			l_IntegrationTime = (x_Intergrationtime/50);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2132      	movs	r1, #50	@ 0x32
 8000f82:	0018      	movs	r0, r3
 8000f84:	f7ff f8ca 	bl	800011c <__udivsi3>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <S10077_StartConversion+0xe0>)
 8000f8e:	601a      	str	r2, [r3, #0]
			l_S10077_CONVERSIONSTEP = START_LOWSTEP;
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <S10077_StartConversion+0xb8>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
			// Démarrer le timer en mode Input Capture avec DMA


			HAL_GPIO_WritePin(S10077_START_GPIO_Port, S10077_START_Pin,GPIO_PIN_RESET );
 8000f96:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <S10077_StartConversion+0xe4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2140      	movs	r1, #64	@ 0x40
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 fe42 	bl	8001c26 <HAL_GPIO_WritePin>
	else{

	//printf("erreur integration deja en cours \r\n");

	}
}
 8000fa2:	e003      	b.n	8000fac <S10077_StartConversion+0xb0>
	printf("erreur : temps d'integration trop cours \r\n");
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <S10077_StartConversion+0xe8>)
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f003 ff88 	bl	8004ebc <puts>
}
 8000fac:	46c0      	nop			@ (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b004      	add	sp, #16
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20002560 	.word	0x20002560
 8000fb8:	0000300c 	.word	0x0000300c
 8000fbc:	0001d4bf 	.word	0x0001d4bf
 8000fc0:	20000214 	.word	0x20000214
 8000fc4:	20000618 	.word	0x20000618
 8000fc8:	20000084 	.word	0x20000084
 8000fcc:	20002558 	.word	0x20002558
 8000fd0:	2000255a 	.word	0x2000255a
 8000fd4:	2000255c 	.word	0x2000255c
 8000fd8:	20002564 	.word	0x20002564
 8000fdc:	20002568 	.word	0x20002568
 8000fe0:	50000400 	.word	0x50000400
 8000fe4:	08005c18 	.word	0x08005c18

08000fe8 <ExtractAmplitude>:

    // Envoyer les 3 octets sur l'UART
    HAL_UART_Transmit(USART2, data, 3, HAL_MAX_DELAY);
}

void ExtractAmplitude (void){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0

//temps avant le premier pixel : 34us
//temps entre deux pixels : 12us
//taille de la trame : 12350
//etape 1 : reconstitution de la tramme
	 printf("heyeheyextractStep2 \r\n");
 8000fee:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <ExtractAmplitude+0x74>)
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f003 ff63 	bl	8004ebc <puts>
	for (uint32_t i = 0;i <1024; i++){
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	e00b      	b.n	8001014 <ExtractAmplitude+0x2c>
		for (int j = 0;j < 8; j++){
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	e002      	b.n	8001008 <ExtractAmplitude+0x20>
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	3301      	adds	r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	2b07      	cmp	r3, #7
 800100c:	ddf9      	ble.n	8001002 <ExtractAmplitude+0x1a>
	for (uint32_t i = 0;i <1024; i++){
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3301      	adds	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	2380      	movs	r3, #128	@ 0x80
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	429a      	cmp	r2, r3
 800101c:	d3ee      	bcc.n	8000ffc <ExtractAmplitude+0x14>

		}
	}
	  printf("heyeheyextractStep3 \r\n");
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <ExtractAmplitude+0x78>)
 8001020:	0018      	movs	r0, r3
 8001022:	f003 ff4b 	bl	8004ebc <puts>

	for (uint32_t i = 0;i <200; i++){
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	e00c      	b.n	8001046 <ExtractAmplitude+0x5e>
if(i % 1== 0){
printf("pixel %i amplitude %i \r\n",i,l_BufferSpecter[i]);
 800102c:	4b0d      	ldr	r3, [pc, #52]	@ (8001064 <ExtractAmplitude+0x7c>)
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	0052      	lsls	r2, r2, #1
 8001032:	5ad3      	ldrh	r3, [r2, r3]
 8001034:	001a      	movs	r2, r3
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <ExtractAmplitude+0x80>)
 800103a:	0018      	movs	r0, r3
 800103c:	f003 fed8 	bl	8004df0 <iprintf>
	for (uint32_t i = 0;i <200; i++){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3301      	adds	r3, #1
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2bc7      	cmp	r3, #199	@ 0xc7
 800104a:	d9ef      	bls.n	800102c <ExtractAmplitude+0x44>

}
	}

	FlagEndExtraction = true;
 800104c:	4b07      	ldr	r3, [pc, #28]	@ (800106c <ExtractAmplitude+0x84>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]

}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b004      	add	sp, #16
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	08005c44 	.word	0x08005c44
 8001060:	08005c5c 	.word	0x08005c5c
 8001064:	20000618 	.word	0x20000618
 8001068:	08005c74 	.word	0x08005c74
 800106c:	20000614 	.word	0x20000614

08001070 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e00a      	b.n	8001098 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001082:	e000      	b.n	8001086 <_read+0x16>
 8001084:	bf00      	nop
 8001086:	0001      	movs	r1, r0
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	60ba      	str	r2, [r7, #8]
 800108e:	b2ca      	uxtb	r2, r1
 8001090:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	429a      	cmp	r2, r3
 800109e:	dbf0      	blt.n	8001082 <_read+0x12>
  }

  return len;
 80010a0:	687b      	ldr	r3, [r7, #4]
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b006      	add	sp, #24
 80010a8:	bd80      	pop	{r7, pc}

080010aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	e009      	b.n	80010d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	60ba      	str	r2, [r7, #8]
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff fccf 	bl	8000a68 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dbf1      	blt.n	80010bc <_write+0x12>
  }
  return len;
 80010d8:	687b      	ldr	r3, [r7, #4]
}
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	b006      	add	sp, #24
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_close>:

int _close(int file)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	425b      	negs	r3, r3
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	2280      	movs	r2, #128	@ 0x80
 8001104:	0192      	lsls	r2, r2, #6
 8001106:	605a      	str	r2, [r3, #4]
  return 0;
 8001108:	2300      	movs	r3, #0
}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}

08001112 <_isatty>:

int _isatty(int file)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800111a:	2301      	movs	r3, #1
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}

08001124 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001130:	2300      	movs	r3, #0
}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b004      	add	sp, #16
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001144:	4a14      	ldr	r2, [pc, #80]	@ (8001198 <_sbrk+0x5c>)
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <_sbrk+0x60>)
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001150:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001158:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <_sbrk+0x64>)
 800115a:	4a12      	ldr	r2, [pc, #72]	@ (80011a4 <_sbrk+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	18d3      	adds	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	429a      	cmp	r2, r3
 800116a:	d207      	bcs.n	800117c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800116c:	f003 fff2 	bl	8005154 <__errno>
 8001170:	0003      	movs	r3, r0
 8001172:	220c      	movs	r2, #12
 8001174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001176:	2301      	movs	r3, #1
 8001178:	425b      	negs	r3, r3
 800117a:	e009      	b.n	8001190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001182:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	18d2      	adds	r2, r2, r3
 800118a:	4b05      	ldr	r3, [pc, #20]	@ (80011a0 <_sbrk+0x64>)
 800118c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b006      	add	sp, #24
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20005000 	.word	0x20005000
 800119c:	00000400 	.word	0x00000400
 80011a0:	20002578 	.word	0x20002578
 80011a4:	200026d0 	.word	0x200026d0

080011a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80011b4:	480d      	ldr	r0, [pc, #52]	@ (80011ec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80011b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011b8:	f7ff fff6 	bl	80011a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80011be:	490d      	ldr	r1, [pc, #52]	@ (80011f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c0:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <LoopForever+0xe>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001200 <LoopForever+0x16>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80011e2:	f003 ffbd 	bl	8005160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e6:	f7ff f969 	bl	80004bc <main>

080011ea <LoopForever>:

LoopForever:
    b LoopForever
 80011ea:	e7fe      	b.n	80011ea <LoopForever>
   ldr   r0, =_estack
 80011ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011f8:	08005d58 	.word	0x08005d58
  ldr r2, =_sbss
 80011fc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001200:	200026cc 	.word	0x200026cc

08001204 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC1_COMP_IRQHandler>
	...

08001208 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001214:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <HAL_Init+0x3c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <HAL_Init+0x3c>)
 800121a:	2140      	movs	r1, #64	@ 0x40
 800121c:	430a      	orrs	r2, r1
 800121e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001220:	2000      	movs	r0, #0
 8001222:	f000 f811 	bl	8001248 <HAL_InitTick>
 8001226:	1e03      	subs	r3, r0, #0
 8001228:	d003      	beq.n	8001232 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	e001      	b.n	8001236 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001232:	f7ff fc45 	bl	8000ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001236:	1dfb      	adds	r3, r7, #7
 8001238:	781b      	ldrb	r3, [r3, #0]
}
 800123a:	0018      	movs	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	40022000 	.word	0x40022000

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001250:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <HAL_InitTick+0x5c>)
 8001252:	681c      	ldr	r4, [r3, #0]
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <HAL_InitTick+0x60>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	0019      	movs	r1, r3
 800125a:	23fa      	movs	r3, #250	@ 0xfa
 800125c:	0098      	lsls	r0, r3, #2
 800125e:	f7fe ff5d 	bl	800011c <__udivsi3>
 8001262:	0003      	movs	r3, r0
 8001264:	0019      	movs	r1, r3
 8001266:	0020      	movs	r0, r4
 8001268:	f7fe ff58 	bl	800011c <__udivsi3>
 800126c:	0003      	movs	r3, r0
 800126e:	0018      	movs	r0, r3
 8001270:	f000 f92f 	bl	80014d2 <HAL_SYSTICK_Config>
 8001274:	1e03      	subs	r3, r0, #0
 8001276:	d001      	beq.n	800127c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e00f      	b.n	800129c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b03      	cmp	r3, #3
 8001280:	d80b      	bhi.n	800129a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	2301      	movs	r3, #1
 8001286:	425b      	negs	r3, r3
 8001288:	2200      	movs	r2, #0
 800128a:	0018      	movs	r0, r3
 800128c:	f000 f8fc 	bl	8001488 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_InitTick+0x64>)
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
}
 800129c:	0018      	movs	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	b003      	add	sp, #12
 80012a2:	bd90      	pop	{r4, r7, pc}
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000008 	.word	0x20000008
 80012ac:	20000004 	.word	0x20000004

080012b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <HAL_IncTick+0x1c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	001a      	movs	r2, r3
 80012ba:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <HAL_IncTick+0x20>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	18d2      	adds	r2, r2, r3
 80012c0:	4b03      	ldr	r3, [pc, #12]	@ (80012d0 <HAL_IncTick+0x20>)
 80012c2:	601a      	str	r2, [r3, #0]
}
 80012c4:	46c0      	nop			@ (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	20000008 	.word	0x20000008
 80012d0:	2000257c 	.word	0x2000257c

080012d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b02      	ldr	r3, [pc, #8]	@ (80012e4 <HAL_GetTick+0x10>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	0018      	movs	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	2000257c 	.word	0x2000257c

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff fff0 	bl	80012d4 <HAL_GetTick>
 80012f4:	0003      	movs	r3, r0
 80012f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3301      	adds	r3, #1
 8001300:	d005      	beq.n	800130e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001302:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <HAL_Delay+0x44>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	001a      	movs	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	189b      	adds	r3, r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	f7ff ffe0 	bl	80012d4 <HAL_GetTick>
 8001314:	0002      	movs	r2, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d8f7      	bhi.n	8001310 <HAL_Delay+0x28>
  {
  }
}
 8001320:	46c0      	nop			@ (mov r8, r8)
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	b004      	add	sp, #16
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	20000008 	.word	0x20000008

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	0002      	movs	r2, r0
 8001338:	1dfb      	adds	r3, r7, #7
 800133a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800133c:	1dfb      	adds	r3, r7, #7
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b7f      	cmp	r3, #127	@ 0x7f
 8001342:	d809      	bhi.n	8001358 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001344:	1dfb      	adds	r3, r7, #7
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	001a      	movs	r2, r3
 800134a:	231f      	movs	r3, #31
 800134c:	401a      	ands	r2, r3
 800134e:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <__NVIC_EnableIRQ+0x30>)
 8001350:	2101      	movs	r1, #1
 8001352:	4091      	lsls	r1, r2
 8001354:	000a      	movs	r2, r1
 8001356:	601a      	str	r2, [r3, #0]
  }
}
 8001358:	46c0      	nop			@ (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	b002      	add	sp, #8
 800135e:	bd80      	pop	{r7, pc}
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	0002      	movs	r2, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b7f      	cmp	r3, #127	@ 0x7f
 8001378:	d828      	bhi.n	80013cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800137a:	4a2f      	ldr	r2, [pc, #188]	@ (8001438 <__NVIC_SetPriority+0xd4>)
 800137c:	1dfb      	adds	r3, r7, #7
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b25b      	sxtb	r3, r3
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	33c0      	adds	r3, #192	@ 0xc0
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	589b      	ldr	r3, [r3, r2]
 800138a:	1dfa      	adds	r2, r7, #7
 800138c:	7812      	ldrb	r2, [r2, #0]
 800138e:	0011      	movs	r1, r2
 8001390:	2203      	movs	r2, #3
 8001392:	400a      	ands	r2, r1
 8001394:	00d2      	lsls	r2, r2, #3
 8001396:	21ff      	movs	r1, #255	@ 0xff
 8001398:	4091      	lsls	r1, r2
 800139a:	000a      	movs	r2, r1
 800139c:	43d2      	mvns	r2, r2
 800139e:	401a      	ands	r2, r3
 80013a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	019b      	lsls	r3, r3, #6
 80013a6:	22ff      	movs	r2, #255	@ 0xff
 80013a8:	401a      	ands	r2, r3
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	0018      	movs	r0, r3
 80013b0:	2303      	movs	r3, #3
 80013b2:	4003      	ands	r3, r0
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b8:	481f      	ldr	r0, [pc, #124]	@ (8001438 <__NVIC_SetPriority+0xd4>)
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	430a      	orrs	r2, r1
 80013c4:	33c0      	adds	r3, #192	@ 0xc0
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013ca:	e031      	b.n	8001430 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013cc:	4a1b      	ldr	r2, [pc, #108]	@ (800143c <__NVIC_SetPriority+0xd8>)
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	0019      	movs	r1, r3
 80013d4:	230f      	movs	r3, #15
 80013d6:	400b      	ands	r3, r1
 80013d8:	3b08      	subs	r3, #8
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3306      	adds	r3, #6
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	18d3      	adds	r3, r2, r3
 80013e2:	3304      	adds	r3, #4
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	1dfa      	adds	r2, r7, #7
 80013e8:	7812      	ldrb	r2, [r2, #0]
 80013ea:	0011      	movs	r1, r2
 80013ec:	2203      	movs	r2, #3
 80013ee:	400a      	ands	r2, r1
 80013f0:	00d2      	lsls	r2, r2, #3
 80013f2:	21ff      	movs	r1, #255	@ 0xff
 80013f4:	4091      	lsls	r1, r2
 80013f6:	000a      	movs	r2, r1
 80013f8:	43d2      	mvns	r2, r2
 80013fa:	401a      	ands	r2, r3
 80013fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	019b      	lsls	r3, r3, #6
 8001402:	22ff      	movs	r2, #255	@ 0xff
 8001404:	401a      	ands	r2, r3
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	0018      	movs	r0, r3
 800140c:	2303      	movs	r3, #3
 800140e:	4003      	ands	r3, r0
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001414:	4809      	ldr	r0, [pc, #36]	@ (800143c <__NVIC_SetPriority+0xd8>)
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	001c      	movs	r4, r3
 800141c:	230f      	movs	r3, #15
 800141e:	4023      	ands	r3, r4
 8001420:	3b08      	subs	r3, #8
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	430a      	orrs	r2, r1
 8001426:	3306      	adds	r3, #6
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	18c3      	adds	r3, r0, r3
 800142c:	3304      	adds	r3, #4
 800142e:	601a      	str	r2, [r3, #0]
}
 8001430:	46c0      	nop			@ (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b003      	add	sp, #12
 8001436:	bd90      	pop	{r4, r7, pc}
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	1e5a      	subs	r2, r3, #1
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	045b      	lsls	r3, r3, #17
 8001450:	429a      	cmp	r2, r3
 8001452:	d301      	bcc.n	8001458 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001454:	2301      	movs	r3, #1
 8001456:	e010      	b.n	800147a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001458:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <SysTick_Config+0x44>)
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	3a01      	subs	r2, #1
 800145e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001460:	2301      	movs	r3, #1
 8001462:	425b      	negs	r3, r3
 8001464:	2103      	movs	r1, #3
 8001466:	0018      	movs	r0, r3
 8001468:	f7ff ff7c 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <SysTick_Config+0x44>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <SysTick_Config+0x44>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	0018      	movs	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	b002      	add	sp, #8
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			@ (mov r8, r8)
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	210f      	movs	r1, #15
 8001494:	187b      	adds	r3, r7, r1
 8001496:	1c02      	adds	r2, r0, #0
 8001498:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	187b      	adds	r3, r7, r1
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	0011      	movs	r1, r2
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7ff ff5d 	bl	8001364 <__NVIC_SetPriority>
}
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b004      	add	sp, #16
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	0002      	movs	r2, r0
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff ff33 	bl	8001330 <__NVIC_EnableIRQ>
}
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b002      	add	sp, #8
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	0018      	movs	r0, r3
 80014de:	f7ff ffaf 	bl	8001440 <SysTick_Config>
 80014e2:	0003      	movs	r3, r0
}
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b002      	add	sp, #8
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e061      	b.n	80015c2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a32      	ldr	r2, [pc, #200]	@ (80015cc <HAL_DMA_Init+0xe0>)
 8001504:	4694      	mov	ip, r2
 8001506:	4463      	add	r3, ip
 8001508:	2114      	movs	r1, #20
 800150a:	0018      	movs	r0, r3
 800150c:	f7fe fe06 	bl	800011c <__udivsi3>
 8001510:	0003      	movs	r3, r0
 8001512:	009a      	lsls	r2, r3, #2
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a2d      	ldr	r2, [pc, #180]	@ (80015d0 <HAL_DMA_Init+0xe4>)
 800151c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2225      	movs	r2, #37	@ 0x25
 8001522:	2102      	movs	r1, #2
 8001524:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4a28      	ldr	r2, [pc, #160]	@ (80015d4 <HAL_DMA_Init+0xe8>)
 8001532:	4013      	ands	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800153e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001556:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4313      	orrs	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	2380      	movs	r3, #128	@ 0x80
 8001572:	01db      	lsls	r3, r3, #7
 8001574:	429a      	cmp	r2, r3
 8001576:	d018      	beq.n	80015aa <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001578:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <HAL_DMA_Init+0xec>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001580:	211c      	movs	r1, #28
 8001582:	400b      	ands	r3, r1
 8001584:	210f      	movs	r1, #15
 8001586:	4099      	lsls	r1, r3
 8001588:	000b      	movs	r3, r1
 800158a:	43d9      	mvns	r1, r3
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_DMA_Init+0xec>)
 800158e:	400a      	ands	r2, r1
 8001590:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <HAL_DMA_Init+0xec>)
 8001594:	6819      	ldr	r1, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	201c      	movs	r0, #28
 80015a0:	4003      	ands	r3, r0
 80015a2:	409a      	lsls	r2, r3
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <HAL_DMA_Init+0xec>)
 80015a6:	430a      	orrs	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2225      	movs	r2, #37	@ 0x25
 80015b4:	2101      	movs	r1, #1
 80015b6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2224      	movs	r2, #36	@ 0x24
 80015bc:	2100      	movs	r1, #0
 80015be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	0018      	movs	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b004      	add	sp, #16
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	bffdfff8 	.word	0xbffdfff8
 80015d0:	40020000 	.word	0x40020000
 80015d4:	ffff800f 	.word	0xffff800f
 80015d8:	400200a8 	.word	0x400200a8

080015dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ea:	2317      	movs	r3, #23
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2224      	movs	r2, #36	@ 0x24
 80015f6:	5c9b      	ldrb	r3, [r3, r2]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <HAL_DMA_Start_IT+0x24>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e04f      	b.n	80016a0 <HAL_DMA_Start_IT+0xc4>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2224      	movs	r2, #36	@ 0x24
 8001604:	2101      	movs	r1, #1
 8001606:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2225      	movs	r2, #37	@ 0x25
 800160c:	5c9b      	ldrb	r3, [r3, r2]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b01      	cmp	r3, #1
 8001612:	d13a      	bne.n	800168a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2225      	movs	r2, #37	@ 0x25
 8001618:	2102      	movs	r1, #2
 800161a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2101      	movs	r1, #1
 800162e:	438a      	bics	r2, r1
 8001630:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	68b9      	ldr	r1, [r7, #8]
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 f92a 	bl	8001892 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	2b00      	cmp	r3, #0
 8001644:	d008      	beq.n	8001658 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	210e      	movs	r1, #14
 8001652:	430a      	orrs	r2, r1
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	e00f      	b.n	8001678 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2104      	movs	r1, #4
 8001664:	438a      	bics	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	210a      	movs	r1, #10
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2101      	movs	r1, #1
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	e007      	b.n	800169a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2224      	movs	r2, #36	@ 0x24
 800168e:	2100      	movs	r1, #0
 8001690:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001692:	2317      	movs	r3, #23
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	2202      	movs	r2, #2
 8001698:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800169a:	2317      	movs	r3, #23
 800169c:	18fb      	adds	r3, r7, r3
 800169e:	781b      	ldrb	r3, [r3, #0]
}
 80016a0:	0018      	movs	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b006      	add	sp, #24
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b0:	210f      	movs	r1, #15
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2225      	movs	r2, #37	@ 0x25
 80016bc:	5c9b      	ldrb	r3, [r3, r2]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d006      	beq.n	80016d2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2204      	movs	r2, #4
 80016c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e02a      	b.n	8001728 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	210e      	movs	r1, #14
 80016de:	438a      	bics	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	438a      	bics	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f6:	221c      	movs	r2, #28
 80016f8:	401a      	ands	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	2101      	movs	r1, #1
 8001700:	4091      	lsls	r1, r2
 8001702:	000a      	movs	r2, r1
 8001704:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2225      	movs	r2, #37	@ 0x25
 800170a:	2101      	movs	r1, #1
 800170c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2224      	movs	r2, #36	@ 0x24
 8001712:	2100      	movs	r1, #0
 8001714:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800171a:	2b00      	cmp	r3, #0
 800171c:	d004      	beq.n	8001728 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	0010      	movs	r0, r2
 8001726:	4798      	blx	r3
    }
  }
  return status;
 8001728:	230f      	movs	r3, #15
 800172a:	18fb      	adds	r3, r7, r3
 800172c:	781b      	ldrb	r3, [r3, #0]
}
 800172e:	0018      	movs	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	b004      	add	sp, #16
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001752:	221c      	movs	r2, #28
 8001754:	4013      	ands	r3, r2
 8001756:	2204      	movs	r2, #4
 8001758:	409a      	lsls	r2, r3
 800175a:	0013      	movs	r3, r2
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	4013      	ands	r3, r2
 8001760:	d026      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x7a>
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2204      	movs	r2, #4
 8001766:	4013      	ands	r3, r2
 8001768:	d022      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2220      	movs	r2, #32
 8001772:	4013      	ands	r3, r2
 8001774:	d107      	bne.n	8001786 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2104      	movs	r1, #4
 8001782:	438a      	bics	r2, r1
 8001784:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	221c      	movs	r2, #28
 800178c:	401a      	ands	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	2104      	movs	r1, #4
 8001794:	4091      	lsls	r1, r2
 8001796:	000a      	movs	r2, r1
 8001798:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d100      	bne.n	80017a4 <HAL_DMA_IRQHandler+0x6e>
 80017a2:	e071      	b.n	8001888 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	0010      	movs	r0, r2
 80017ac:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80017ae:	e06b      	b.n	8001888 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b4:	221c      	movs	r2, #28
 80017b6:	4013      	ands	r3, r2
 80017b8:	2202      	movs	r2, #2
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4013      	ands	r3, r2
 80017c2:	d02d      	beq.n	8001820 <HAL_DMA_IRQHandler+0xea>
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2202      	movs	r2, #2
 80017c8:	4013      	ands	r3, r2
 80017ca:	d029      	beq.n	8001820 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2220      	movs	r2, #32
 80017d4:	4013      	ands	r3, r2
 80017d6:	d10b      	bne.n	80017f0 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	210a      	movs	r1, #10
 80017e4:	438a      	bics	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2225      	movs	r2, #37	@ 0x25
 80017ec:	2101      	movs	r1, #1
 80017ee:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f4:	221c      	movs	r2, #28
 80017f6:	401a      	ands	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	2102      	movs	r1, #2
 80017fe:	4091      	lsls	r1, r2
 8001800:	000a      	movs	r2, r1
 8001802:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2224      	movs	r2, #36	@ 0x24
 8001808:	2100      	movs	r1, #0
 800180a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001810:	2b00      	cmp	r3, #0
 8001812:	d039      	beq.n	8001888 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	0010      	movs	r0, r2
 800181c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800181e:	e033      	b.n	8001888 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001824:	221c      	movs	r2, #28
 8001826:	4013      	ands	r3, r2
 8001828:	2208      	movs	r2, #8
 800182a:	409a      	lsls	r2, r3
 800182c:	0013      	movs	r3, r2
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4013      	ands	r3, r2
 8001832:	d02a      	beq.n	800188a <HAL_DMA_IRQHandler+0x154>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2208      	movs	r2, #8
 8001838:	4013      	ands	r3, r2
 800183a:	d026      	beq.n	800188a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	210e      	movs	r1, #14
 8001848:	438a      	bics	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001850:	221c      	movs	r2, #28
 8001852:	401a      	ands	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	2101      	movs	r1, #1
 800185a:	4091      	lsls	r1, r2
 800185c:	000a      	movs	r2, r1
 800185e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2225      	movs	r2, #37	@ 0x25
 800186a:	2101      	movs	r1, #1
 800186c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2224      	movs	r2, #36	@ 0x24
 8001872:	2100      	movs	r1, #0
 8001874:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	0010      	movs	r0, r2
 8001886:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001888:	46c0      	nop			@ (mov r8, r8)
 800188a:	46c0      	nop			@ (mov r8, r8)
}
 800188c:	46bd      	mov	sp, r7
 800188e:	b004      	add	sp, #16
 8001890:	bd80      	pop	{r7, pc}

08001892 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a4:	221c      	movs	r2, #28
 80018a6:	401a      	ands	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	2101      	movs	r1, #1
 80018ae:	4091      	lsls	r1, r2
 80018b0:	000a      	movs	r2, r1
 80018b2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b10      	cmp	r3, #16
 80018c2:	d108      	bne.n	80018d6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018d4:	e007      	b.n	80018e6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	60da      	str	r2, [r3, #12]
}
 80018e6:	46c0      	nop			@ (mov r8, r8)
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b004      	add	sp, #16
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001906:	e155      	b.n	8001bb4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2101      	movs	r1, #1
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	4091      	lsls	r1, r2
 8001912:	000a      	movs	r2, r1
 8001914:	4013      	ands	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d100      	bne.n	8001920 <HAL_GPIO_Init+0x30>
 800191e:	e146      	b.n	8001bae <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2203      	movs	r2, #3
 8001926:	4013      	ands	r3, r2
 8001928:	2b01      	cmp	r3, #1
 800192a:	d005      	beq.n	8001938 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2203      	movs	r2, #3
 8001932:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001934:	2b02      	cmp	r3, #2
 8001936:	d130      	bne.n	800199a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	409a      	lsls	r2, r3
 8001946:	0013      	movs	r3, r2
 8001948:	43da      	mvns	r2, r3
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	409a      	lsls	r2, r3
 800195a:	0013      	movs	r3, r2
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800196e:	2201      	movs	r2, #1
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
 8001974:	0013      	movs	r3, r2
 8001976:	43da      	mvns	r2, r3
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	2201      	movs	r2, #1
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
 800198c:	0013      	movs	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2203      	movs	r2, #3
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d017      	beq.n	80019d6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	409a      	lsls	r2, r3
 80019b4:	0013      	movs	r3, r2
 80019b6:	43da      	mvns	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	409a      	lsls	r2, r3
 80019c8:	0013      	movs	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2203      	movs	r2, #3
 80019dc:	4013      	ands	r3, r2
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d123      	bne.n	8001a2a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	0092      	lsls	r2, r2, #2
 80019ec:	58d3      	ldr	r3, [r2, r3]
 80019ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	2207      	movs	r2, #7
 80019f4:	4013      	ands	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	220f      	movs	r2, #15
 80019fa:	409a      	lsls	r2, r3
 80019fc:	0013      	movs	r3, r2
 80019fe:	43da      	mvns	r2, r3
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	2107      	movs	r1, #7
 8001a0e:	400b      	ands	r3, r1
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	409a      	lsls	r2, r3
 8001a14:	0013      	movs	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	08da      	lsrs	r2, r3, #3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3208      	adds	r2, #8
 8001a24:	0092      	lsls	r2, r2, #2
 8001a26:	6939      	ldr	r1, [r7, #16]
 8001a28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	409a      	lsls	r2, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2203      	movs	r2, #3
 8001a48:	401a      	ands	r2, r3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	0013      	movs	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	23c0      	movs	r3, #192	@ 0xc0
 8001a64:	029b      	lsls	r3, r3, #10
 8001a66:	4013      	ands	r3, r2
 8001a68:	d100      	bne.n	8001a6c <HAL_GPIO_Init+0x17c>
 8001a6a:	e0a0      	b.n	8001bae <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6c:	4b57      	ldr	r3, [pc, #348]	@ (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001a6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a70:	4b56      	ldr	r3, [pc, #344]	@ (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001a72:	2101      	movs	r1, #1
 8001a74:	430a      	orrs	r2, r1
 8001a76:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a78:	4a55      	ldr	r2, [pc, #340]	@ (8001bd0 <HAL_GPIO_Init+0x2e0>)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	589b      	ldr	r3, [r3, r2]
 8001a84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	409a      	lsls	r2, r3
 8001a92:	0013      	movs	r3, r2
 8001a94:	43da      	mvns	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	23a0      	movs	r3, #160	@ 0xa0
 8001aa0:	05db      	lsls	r3, r3, #23
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d01f      	beq.n	8001ae6 <HAL_GPIO_Init+0x1f6>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4a      	ldr	r2, [pc, #296]	@ (8001bd4 <HAL_GPIO_Init+0x2e4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d019      	beq.n	8001ae2 <HAL_GPIO_Init+0x1f2>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a49      	ldr	r2, [pc, #292]	@ (8001bd8 <HAL_GPIO_Init+0x2e8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a48      	ldr	r2, [pc, #288]	@ (8001bdc <HAL_GPIO_Init+0x2ec>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00d      	beq.n	8001ada <HAL_GPIO_Init+0x1ea>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a47      	ldr	r2, [pc, #284]	@ (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d007      	beq.n	8001ad6 <HAL_GPIO_Init+0x1e6>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a46      	ldr	r2, [pc, #280]	@ (8001be4 <HAL_GPIO_Init+0x2f4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d101      	bne.n	8001ad2 <HAL_GPIO_Init+0x1e2>
 8001ace:	2305      	movs	r3, #5
 8001ad0:	e00a      	b.n	8001ae8 <HAL_GPIO_Init+0x1f8>
 8001ad2:	2306      	movs	r3, #6
 8001ad4:	e008      	b.n	8001ae8 <HAL_GPIO_Init+0x1f8>
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x1f8>
 8001ada:	2303      	movs	r3, #3
 8001adc:	e004      	b.n	8001ae8 <HAL_GPIO_Init+0x1f8>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e002      	b.n	8001ae8 <HAL_GPIO_Init+0x1f8>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_GPIO_Init+0x1f8>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	2103      	movs	r1, #3
 8001aec:	400a      	ands	r2, r1
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	4093      	lsls	r3, r2
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af8:	4935      	ldr	r1, [pc, #212]	@ (8001bd0 <HAL_GPIO_Init+0x2e0>)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b06:	4b38      	ldr	r3, [pc, #224]	@ (8001be8 <HAL_GPIO_Init+0x2f8>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	035b      	lsls	r3, r3, #13
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001be8 <HAL_GPIO_Init+0x2f8>)
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b30:	4b2d      	ldr	r3, [pc, #180]	@ (8001be8 <HAL_GPIO_Init+0x2f8>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	43da      	mvns	r2, r3
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	039b      	lsls	r3, r3, #14
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b54:	4b24      	ldr	r3, [pc, #144]	@ (8001be8 <HAL_GPIO_Init+0x2f8>)
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001b5a:	4b23      	ldr	r3, [pc, #140]	@ (8001be8 <HAL_GPIO_Init+0x2f8>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	43da      	mvns	r2, r3
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	2380      	movs	r3, #128	@ 0x80
 8001b70:	029b      	lsls	r3, r3, #10
 8001b72:	4013      	ands	r3, r2
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <HAL_GPIO_Init+0x2f8>)
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b84:	4b18      	ldr	r3, [pc, #96]	@ (8001be8 <HAL_GPIO_Init+0x2f8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	43da      	mvns	r2, r3
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	025b      	lsls	r3, r3, #9
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <HAL_GPIO_Init+0x2f8>)
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	40da      	lsrs	r2, r3
 8001bbc:	1e13      	subs	r3, r2, #0
 8001bbe:	d000      	beq.n	8001bc2 <HAL_GPIO_Init+0x2d2>
 8001bc0:	e6a2      	b.n	8001908 <HAL_GPIO_Init+0x18>
  }
}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	46c0      	nop			@ (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b006      	add	sp, #24
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	50000400 	.word	0x50000400
 8001bd8:	50000800 	.word	0x50000800
 8001bdc:	50000c00 	.word	0x50000c00
 8001be0:	50001000 	.word	0x50001000
 8001be4:	50001c00 	.word	0x50001c00
 8001be8:	40010400 	.word	0x40010400

08001bec <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	000a      	movs	r2, r1
 8001bf6:	1cbb      	adds	r3, r7, #2
 8001bf8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	1cba      	adds	r2, r7, #2
 8001c00:	8812      	ldrh	r2, [r2, #0]
 8001c02:	4013      	ands	r3, r2
 8001c04:	d004      	beq.n	8001c10 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001c06:	230f      	movs	r3, #15
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
 8001c0e:	e003      	b.n	8001c18 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c10:	230f      	movs	r3, #15
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001c18:	230f      	movs	r3, #15
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	781b      	ldrb	r3, [r3, #0]
}
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b004      	add	sp, #16
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	0008      	movs	r0, r1
 8001c30:	0011      	movs	r1, r2
 8001c32:	1cbb      	adds	r3, r7, #2
 8001c34:	1c02      	adds	r2, r0, #0
 8001c36:	801a      	strh	r2, [r3, #0]
 8001c38:	1c7b      	adds	r3, r7, #1
 8001c3a:	1c0a      	adds	r2, r1, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c3e:	1c7b      	adds	r3, r7, #1
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d004      	beq.n	8001c50 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c46:	1cbb      	adds	r3, r7, #2
 8001c48:	881a      	ldrh	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001c4e:	e003      	b.n	8001c58 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001c50:	1cbb      	adds	r3, r7, #2
 8001c52:	881a      	ldrh	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c58:	46c0      	nop			@ (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b002      	add	sp, #8
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	000a      	movs	r2, r1
 8001c6a:	1cbb      	adds	r3, r7, #2
 8001c6c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c74:	1cbb      	adds	r3, r7, #2
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	041a      	lsls	r2, r3, #16
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	1cb9      	adds	r1, r7, #2
 8001c84:	8809      	ldrh	r1, [r1, #0]
 8001c86:	400b      	ands	r3, r1
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	619a      	str	r2, [r3, #24]
}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b004      	add	sp, #16
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b5b0      	push	{r4, r5, r7, lr}
 8001c9a:	b08a      	sub	sp, #40	@ 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f000 fbbf 	bl	800242a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cac:	4bc9      	ldr	r3, [pc, #804]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	220c      	movs	r2, #12
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb6:	4bc7      	ldr	r3, [pc, #796]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	2380      	movs	r3, #128	@ 0x80
 8001cbc:	025b      	lsls	r3, r3, #9
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d100      	bne.n	8001cce <HAL_RCC_OscConfig+0x36>
 8001ccc:	e07e      	b.n	8001dcc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d007      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d112      	bne.n	8001d00 <HAL_RCC_OscConfig+0x68>
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	2380      	movs	r3, #128	@ 0x80
 8001cde:	025b      	lsls	r3, r3, #9
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d10d      	bne.n	8001d00 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	4bbb      	ldr	r3, [pc, #748]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	@ 0x80
 8001cea:	029b      	lsls	r3, r3, #10
 8001cec:	4013      	ands	r3, r2
 8001cee:	d100      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x5a>
 8001cf0:	e06b      	b.n	8001dca <HAL_RCC_OscConfig+0x132>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d167      	bne.n	8001dca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f000 fb95 	bl	800242a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	2380      	movs	r3, #128	@ 0x80
 8001d06:	025b      	lsls	r3, r3, #9
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_OscConfig+0x84>
 8001d0c:	4bb1      	ldr	r3, [pc, #708]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4bb0      	ldr	r3, [pc, #704]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001d12:	2180      	movs	r1, #128	@ 0x80
 8001d14:	0249      	lsls	r1, r1, #9
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	e027      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	23a0      	movs	r3, #160	@ 0xa0
 8001d22:	02db      	lsls	r3, r3, #11
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d10e      	bne.n	8001d46 <HAL_RCC_OscConfig+0xae>
 8001d28:	4baa      	ldr	r3, [pc, #680]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4ba9      	ldr	r3, [pc, #676]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001d2e:	2180      	movs	r1, #128	@ 0x80
 8001d30:	02c9      	lsls	r1, r1, #11
 8001d32:	430a      	orrs	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	4ba7      	ldr	r3, [pc, #668]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4ba6      	ldr	r3, [pc, #664]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001d3c:	2180      	movs	r1, #128	@ 0x80
 8001d3e:	0249      	lsls	r1, r1, #9
 8001d40:	430a      	orrs	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e012      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d46:	4ba3      	ldr	r3, [pc, #652]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4ba2      	ldr	r3, [pc, #648]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001d4c:	49a2      	ldr	r1, [pc, #648]	@ (8001fd8 <HAL_RCC_OscConfig+0x340>)
 8001d4e:	400a      	ands	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	4ba0      	ldr	r3, [pc, #640]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	2380      	movs	r3, #128	@ 0x80
 8001d58:	025b      	lsls	r3, r3, #9
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4b9c      	ldr	r3, [pc, #624]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b9b      	ldr	r3, [pc, #620]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001d66:	499d      	ldr	r1, [pc, #628]	@ (8001fdc <HAL_RCC_OscConfig+0x344>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d015      	beq.n	8001da0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff faae 	bl	80012d4 <HAL_GetTick>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d7c:	e009      	b.n	8001d92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d7e:	f7ff faa9 	bl	80012d4 <HAL_GetTick>
 8001d82:	0002      	movs	r2, r0
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b64      	cmp	r3, #100	@ 0x64
 8001d8a:	d902      	bls.n	8001d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	f000 fb4c 	bl	800242a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d92:	4b90      	ldr	r3, [pc, #576]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	2380      	movs	r3, #128	@ 0x80
 8001d98:	029b      	lsls	r3, r3, #10
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d0ef      	beq.n	8001d7e <HAL_RCC_OscConfig+0xe6>
 8001d9e:	e015      	b.n	8001dcc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7ff fa98 	bl	80012d4 <HAL_GetTick>
 8001da4:	0003      	movs	r3, r0
 8001da6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001daa:	f7ff fa93 	bl	80012d4 <HAL_GetTick>
 8001dae:	0002      	movs	r2, r0
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b64      	cmp	r3, #100	@ 0x64
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e336      	b.n	800242a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dbc:	4b85      	ldr	r3, [pc, #532]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	029b      	lsls	r3, r3, #10
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x112>
 8001dc8:	e000      	b.n	8001dcc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dca:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d100      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x140>
 8001dd6:	e099      	b.n	8001f0c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de0:	2220      	movs	r2, #32
 8001de2:	4013      	ands	r3, r2
 8001de4:	d009      	beq.n	8001dfa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001de6:	4b7b      	ldr	r3, [pc, #492]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b7a      	ldr	r3, [pc, #488]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001dec:	2120      	movs	r1, #32
 8001dee:	430a      	orrs	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	2220      	movs	r2, #32
 8001df6:	4393      	bics	r3, r2
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d13e      	bne.n	8001e84 <HAL_RCC_OscConfig+0x1ec>
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d13b      	bne.n	8001e84 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001e0c:	4b71      	ldr	r3, [pc, #452]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2204      	movs	r2, #4
 8001e12:	4013      	ands	r3, r2
 8001e14:	d004      	beq.n	8001e20 <HAL_RCC_OscConfig+0x188>
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e304      	b.n	800242a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e20:	4b6c      	ldr	r3, [pc, #432]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4a6e      	ldr	r2, [pc, #440]	@ (8001fe0 <HAL_RCC_OscConfig+0x348>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	021a      	lsls	r2, r3, #8
 8001e30:	4b68      	ldr	r3, [pc, #416]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001e32:	430a      	orrs	r2, r1
 8001e34:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e36:	4b67      	ldr	r3, [pc, #412]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2209      	movs	r2, #9
 8001e3c:	4393      	bics	r3, r2
 8001e3e:	0019      	movs	r1, r3
 8001e40:	4b64      	ldr	r3, [pc, #400]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e48:	f000 fc42 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8001e4c:	0001      	movs	r1, r0
 8001e4e:	4b61      	ldr	r3, [pc, #388]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	220f      	movs	r2, #15
 8001e56:	4013      	ands	r3, r2
 8001e58:	4a62      	ldr	r2, [pc, #392]	@ (8001fe4 <HAL_RCC_OscConfig+0x34c>)
 8001e5a:	5cd3      	ldrb	r3, [r2, r3]
 8001e5c:	000a      	movs	r2, r1
 8001e5e:	40da      	lsrs	r2, r3
 8001e60:	4b61      	ldr	r3, [pc, #388]	@ (8001fe8 <HAL_RCC_OscConfig+0x350>)
 8001e62:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001e64:	4b61      	ldr	r3, [pc, #388]	@ (8001fec <HAL_RCC_OscConfig+0x354>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2513      	movs	r5, #19
 8001e6a:	197c      	adds	r4, r7, r5
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7ff f9eb 	bl	8001248 <HAL_InitTick>
 8001e72:	0003      	movs	r3, r0
 8001e74:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001e76:	197b      	adds	r3, r7, r5
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d046      	beq.n	8001f0c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001e7e:	197b      	adds	r3, r7, r5
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	e2d2      	b.n	800242a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d027      	beq.n	8001eda <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e8a:	4b52      	ldr	r3, [pc, #328]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2209      	movs	r2, #9
 8001e90:	4393      	bics	r3, r2
 8001e92:	0019      	movs	r1, r3
 8001e94:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fa1a 	bl	80012d4 <HAL_GetTick>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea6:	f7ff fa15 	bl	80012d4 <HAL_GetTick>
 8001eaa:	0002      	movs	r2, r0
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e2b8      	b.n	800242a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eb8:	4b46      	ldr	r3, [pc, #280]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d0f1      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec2:	4b44      	ldr	r3, [pc, #272]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4a46      	ldr	r2, [pc, #280]	@ (8001fe0 <HAL_RCC_OscConfig+0x348>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	0019      	movs	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	021a      	lsls	r2, r3, #8
 8001ed2:	4b40      	ldr	r3, [pc, #256]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	e018      	b.n	8001f0c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eda:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	438a      	bics	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7ff f9f5 	bl	80012d4 <HAL_GetTick>
 8001eea:	0003      	movs	r3, r0
 8001eec:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef0:	f7ff f9f0 	bl	80012d4 <HAL_GetTick>
 8001ef4:	0002      	movs	r2, r0
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e293      	b.n	800242a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f02:	4b34      	ldr	r3, [pc, #208]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2204      	movs	r2, #4
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d1f1      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2210      	movs	r2, #16
 8001f12:	4013      	ands	r3, r2
 8001f14:	d100      	bne.n	8001f18 <HAL_RCC_OscConfig+0x280>
 8001f16:	e0a2      	b.n	800205e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d140      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	@ 0x80
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4013      	ands	r3, r2
 8001f28:	d005      	beq.n	8001f36 <HAL_RCC_OscConfig+0x29e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e279      	b.n	800242a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f36:	4b27      	ldr	r3, [pc, #156]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ff0 <HAL_RCC_OscConfig+0x358>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	0019      	movs	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f44:	4b23      	ldr	r3, [pc, #140]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001f46:	430a      	orrs	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f4a:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	0a19      	lsrs	r1, r3, #8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	061a      	lsls	r2, r3, #24
 8001f58:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f62:	0b5b      	lsrs	r3, r3, #13
 8001f64:	3301      	adds	r3, #1
 8001f66:	2280      	movs	r2, #128	@ 0x80
 8001f68:	0212      	lsls	r2, r2, #8
 8001f6a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f6c:	4b19      	ldr	r3, [pc, #100]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	210f      	movs	r1, #15
 8001f74:	400b      	ands	r3, r1
 8001f76:	491b      	ldr	r1, [pc, #108]	@ (8001fe4 <HAL_RCC_OscConfig+0x34c>)
 8001f78:	5ccb      	ldrb	r3, [r1, r3]
 8001f7a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe8 <HAL_RCC_OscConfig+0x350>)
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001f80:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <HAL_RCC_OscConfig+0x354>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2513      	movs	r5, #19
 8001f86:	197c      	adds	r4, r7, r5
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff f95d 	bl	8001248 <HAL_InitTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f92:	197b      	adds	r3, r7, r5
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d061      	beq.n	800205e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001f9a:	197b      	adds	r3, r7, r5
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	e244      	b.n	800242a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d040      	beq.n	800202a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001fae:	2180      	movs	r1, #128	@ 0x80
 8001fb0:	0049      	lsls	r1, r1, #1
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7ff f98d 	bl	80012d4 <HAL_GetTick>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fbe:	e019      	b.n	8001ff4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fc0:	f7ff f988 	bl	80012d4 <HAL_GetTick>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d912      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e22b      	b.n	800242a <HAL_RCC_OscConfig+0x792>
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	fffeffff 	.word	0xfffeffff
 8001fdc:	fffbffff 	.word	0xfffbffff
 8001fe0:	ffffe0ff 	.word	0xffffe0ff
 8001fe4:	08005ca8 	.word	0x08005ca8
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004
 8001ff0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ff4:	4bca      	ldr	r3, [pc, #808]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2380      	movs	r3, #128	@ 0x80
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d0df      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002000:	4bc7      	ldr	r3, [pc, #796]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4ac7      	ldr	r2, [pc, #796]	@ (8002324 <HAL_RCC_OscConfig+0x68c>)
 8002006:	4013      	ands	r3, r2
 8002008:	0019      	movs	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800200e:	4bc4      	ldr	r3, [pc, #784]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002010:	430a      	orrs	r2, r1
 8002012:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002014:	4bc2      	ldr	r3, [pc, #776]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	0a19      	lsrs	r1, r3, #8
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	061a      	lsls	r2, r3, #24
 8002022:	4bbf      	ldr	r3, [pc, #764]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002024:	430a      	orrs	r2, r1
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	e019      	b.n	800205e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800202a:	4bbd      	ldr	r3, [pc, #756]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4bbc      	ldr	r3, [pc, #752]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002030:	49bd      	ldr	r1, [pc, #756]	@ (8002328 <HAL_RCC_OscConfig+0x690>)
 8002032:	400a      	ands	r2, r1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff f94d 	bl	80012d4 <HAL_GetTick>
 800203a:	0003      	movs	r3, r0
 800203c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002040:	f7ff f948 	bl	80012d4 <HAL_GetTick>
 8002044:	0002      	movs	r2, r0
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e1eb      	b.n	800242a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002052:	4bb3      	ldr	r3, [pc, #716]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	2380      	movs	r3, #128	@ 0x80
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4013      	ands	r3, r2
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2208      	movs	r2, #8
 8002064:	4013      	ands	r3, r2
 8002066:	d036      	beq.n	80020d6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d019      	beq.n	80020a4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002070:	4bab      	ldr	r3, [pc, #684]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002072:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002074:	4baa      	ldr	r3, [pc, #680]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002076:	2101      	movs	r1, #1
 8002078:	430a      	orrs	r2, r1
 800207a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207c:	f7ff f92a 	bl	80012d4 <HAL_GetTick>
 8002080:	0003      	movs	r3, r0
 8002082:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002086:	f7ff f925 	bl	80012d4 <HAL_GetTick>
 800208a:	0002      	movs	r2, r0
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e1c8      	b.n	800242a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002098:	4ba1      	ldr	r3, [pc, #644]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 800209a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800209c:	2202      	movs	r2, #2
 800209e:	4013      	ands	r3, r2
 80020a0:	d0f1      	beq.n	8002086 <HAL_RCC_OscConfig+0x3ee>
 80020a2:	e018      	b.n	80020d6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a4:	4b9e      	ldr	r3, [pc, #632]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80020a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020a8:	4b9d      	ldr	r3, [pc, #628]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80020aa:	2101      	movs	r1, #1
 80020ac:	438a      	bics	r2, r1
 80020ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7ff f910 	bl	80012d4 <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ba:	f7ff f90b 	bl	80012d4 <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e1ae      	b.n	800242a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020cc:	4b94      	ldr	r3, [pc, #592]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80020ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020d0:	2202      	movs	r2, #2
 80020d2:	4013      	ands	r3, r2
 80020d4:	d1f1      	bne.n	80020ba <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2204      	movs	r2, #4
 80020dc:	4013      	ands	r3, r2
 80020de:	d100      	bne.n	80020e2 <HAL_RCC_OscConfig+0x44a>
 80020e0:	e0ae      	b.n	8002240 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e2:	2023      	movs	r0, #35	@ 0x23
 80020e4:	183b      	adds	r3, r7, r0
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ea:	4b8d      	ldr	r3, [pc, #564]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80020ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020ee:	2380      	movs	r3, #128	@ 0x80
 80020f0:	055b      	lsls	r3, r3, #21
 80020f2:	4013      	ands	r3, r2
 80020f4:	d109      	bne.n	800210a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	4b8a      	ldr	r3, [pc, #552]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80020f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020fa:	4b89      	ldr	r3, [pc, #548]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80020fc:	2180      	movs	r1, #128	@ 0x80
 80020fe:	0549      	lsls	r1, r1, #21
 8002100:	430a      	orrs	r2, r1
 8002102:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002104:	183b      	adds	r3, r7, r0
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b88      	ldr	r3, [pc, #544]	@ (800232c <HAL_RCC_OscConfig+0x694>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	2380      	movs	r3, #128	@ 0x80
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4013      	ands	r3, r2
 8002114:	d11a      	bne.n	800214c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002116:	4b85      	ldr	r3, [pc, #532]	@ (800232c <HAL_RCC_OscConfig+0x694>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4b84      	ldr	r3, [pc, #528]	@ (800232c <HAL_RCC_OscConfig+0x694>)
 800211c:	2180      	movs	r1, #128	@ 0x80
 800211e:	0049      	lsls	r1, r1, #1
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002124:	f7ff f8d6 	bl	80012d4 <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7ff f8d1 	bl	80012d4 <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b64      	cmp	r3, #100	@ 0x64
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e174      	b.n	800242a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b7a      	ldr	r3, [pc, #488]	@ (800232c <HAL_RCC_OscConfig+0x694>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2380      	movs	r3, #128	@ 0x80
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4013      	ands	r3, r2
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	2380      	movs	r3, #128	@ 0x80
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	429a      	cmp	r2, r3
 8002156:	d107      	bne.n	8002168 <HAL_RCC_OscConfig+0x4d0>
 8002158:	4b71      	ldr	r3, [pc, #452]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 800215a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800215c:	4b70      	ldr	r3, [pc, #448]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 800215e:	2180      	movs	r1, #128	@ 0x80
 8002160:	0049      	lsls	r1, r1, #1
 8002162:	430a      	orrs	r2, r1
 8002164:	651a      	str	r2, [r3, #80]	@ 0x50
 8002166:	e031      	b.n	80021cc <HAL_RCC_OscConfig+0x534>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10c      	bne.n	800218a <HAL_RCC_OscConfig+0x4f2>
 8002170:	4b6b      	ldr	r3, [pc, #428]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002172:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002174:	4b6a      	ldr	r3, [pc, #424]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002176:	496c      	ldr	r1, [pc, #432]	@ (8002328 <HAL_RCC_OscConfig+0x690>)
 8002178:	400a      	ands	r2, r1
 800217a:	651a      	str	r2, [r3, #80]	@ 0x50
 800217c:	4b68      	ldr	r3, [pc, #416]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 800217e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002180:	4b67      	ldr	r3, [pc, #412]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002182:	496b      	ldr	r1, [pc, #428]	@ (8002330 <HAL_RCC_OscConfig+0x698>)
 8002184:	400a      	ands	r2, r1
 8002186:	651a      	str	r2, [r3, #80]	@ 0x50
 8002188:	e020      	b.n	80021cc <HAL_RCC_OscConfig+0x534>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	23a0      	movs	r3, #160	@ 0xa0
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	429a      	cmp	r2, r3
 8002194:	d10e      	bne.n	80021b4 <HAL_RCC_OscConfig+0x51c>
 8002196:	4b62      	ldr	r3, [pc, #392]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002198:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800219a:	4b61      	ldr	r3, [pc, #388]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 800219c:	2180      	movs	r1, #128	@ 0x80
 800219e:	00c9      	lsls	r1, r1, #3
 80021a0:	430a      	orrs	r2, r1
 80021a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80021a4:	4b5e      	ldr	r3, [pc, #376]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80021a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021a8:	4b5d      	ldr	r3, [pc, #372]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80021aa:	2180      	movs	r1, #128	@ 0x80
 80021ac:	0049      	lsls	r1, r1, #1
 80021ae:	430a      	orrs	r2, r1
 80021b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0x534>
 80021b4:	4b5a      	ldr	r3, [pc, #360]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80021b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021b8:	4b59      	ldr	r3, [pc, #356]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80021ba:	495b      	ldr	r1, [pc, #364]	@ (8002328 <HAL_RCC_OscConfig+0x690>)
 80021bc:	400a      	ands	r2, r1
 80021be:	651a      	str	r2, [r3, #80]	@ 0x50
 80021c0:	4b57      	ldr	r3, [pc, #348]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80021c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021c4:	4b56      	ldr	r3, [pc, #344]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80021c6:	495a      	ldr	r1, [pc, #360]	@ (8002330 <HAL_RCC_OscConfig+0x698>)
 80021c8:	400a      	ands	r2, r1
 80021ca:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d015      	beq.n	8002200 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d4:	f7ff f87e 	bl	80012d4 <HAL_GetTick>
 80021d8:	0003      	movs	r3, r0
 80021da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021dc:	e009      	b.n	80021f2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7ff f879 	bl	80012d4 <HAL_GetTick>
 80021e2:	0002      	movs	r2, r0
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	4a52      	ldr	r2, [pc, #328]	@ (8002334 <HAL_RCC_OscConfig+0x69c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e11b      	b.n	800242a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80021f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021f6:	2380      	movs	r3, #128	@ 0x80
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4013      	ands	r3, r2
 80021fc:	d0ef      	beq.n	80021de <HAL_RCC_OscConfig+0x546>
 80021fe:	e014      	b.n	800222a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002200:	f7ff f868 	bl	80012d4 <HAL_GetTick>
 8002204:	0003      	movs	r3, r0
 8002206:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002208:	e009      	b.n	800221e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7ff f863 	bl	80012d4 <HAL_GetTick>
 800220e:	0002      	movs	r2, r0
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	4a47      	ldr	r2, [pc, #284]	@ (8002334 <HAL_RCC_OscConfig+0x69c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e105      	b.n	800242a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800221e:	4b40      	ldr	r3, [pc, #256]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002220:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002222:	2380      	movs	r3, #128	@ 0x80
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4013      	ands	r3, r2
 8002228:	d1ef      	bne.n	800220a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800222a:	2323      	movs	r3, #35	@ 0x23
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d105      	bne.n	8002240 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002234:	4b3a      	ldr	r3, [pc, #232]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002238:	4b39      	ldr	r3, [pc, #228]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 800223a:	493f      	ldr	r1, [pc, #252]	@ (8002338 <HAL_RCC_OscConfig+0x6a0>)
 800223c:	400a      	ands	r2, r1
 800223e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2220      	movs	r2, #32
 8002246:	4013      	ands	r3, r2
 8002248:	d049      	beq.n	80022de <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d026      	beq.n	80022a0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002252:	4b33      	ldr	r3, [pc, #204]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	4b32      	ldr	r3, [pc, #200]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002258:	2101      	movs	r1, #1
 800225a:	430a      	orrs	r2, r1
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	4b30      	ldr	r3, [pc, #192]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002262:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002264:	2101      	movs	r1, #1
 8002266:	430a      	orrs	r2, r1
 8002268:	635a      	str	r2, [r3, #52]	@ 0x34
 800226a:	4b34      	ldr	r3, [pc, #208]	@ (800233c <HAL_RCC_OscConfig+0x6a4>)
 800226c:	6a1a      	ldr	r2, [r3, #32]
 800226e:	4b33      	ldr	r3, [pc, #204]	@ (800233c <HAL_RCC_OscConfig+0x6a4>)
 8002270:	2180      	movs	r1, #128	@ 0x80
 8002272:	0189      	lsls	r1, r1, #6
 8002274:	430a      	orrs	r2, r1
 8002276:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff f82c 	bl	80012d4 <HAL_GetTick>
 800227c:	0003      	movs	r3, r0
 800227e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002282:	f7ff f827 	bl	80012d4 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e0ca      	b.n	800242a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002294:	4b22      	ldr	r3, [pc, #136]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2202      	movs	r2, #2
 800229a:	4013      	ands	r3, r2
 800229c:	d0f1      	beq.n	8002282 <HAL_RCC_OscConfig+0x5ea>
 800229e:	e01e      	b.n	80022de <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80022a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80022a6:	2101      	movs	r1, #1
 80022a8:	438a      	bics	r2, r1
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	4b23      	ldr	r3, [pc, #140]	@ (800233c <HAL_RCC_OscConfig+0x6a4>)
 80022ae:	6a1a      	ldr	r2, [r3, #32]
 80022b0:	4b22      	ldr	r3, [pc, #136]	@ (800233c <HAL_RCC_OscConfig+0x6a4>)
 80022b2:	4923      	ldr	r1, [pc, #140]	@ (8002340 <HAL_RCC_OscConfig+0x6a8>)
 80022b4:	400a      	ands	r2, r1
 80022b6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff f80c 	bl	80012d4 <HAL_GetTick>
 80022bc:	0003      	movs	r3, r0
 80022be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022c2:	f7ff f807 	bl	80012d4 <HAL_GetTick>
 80022c6:	0002      	movs	r2, r0
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e0aa      	b.n	800242a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022d4:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2202      	movs	r2, #2
 80022da:	4013      	ands	r3, r2
 80022dc:	d1f1      	bne.n	80022c2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d100      	bne.n	80022e8 <HAL_RCC_OscConfig+0x650>
 80022e6:	e09f      	b.n	8002428 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	2b0c      	cmp	r3, #12
 80022ec:	d100      	bne.n	80022f0 <HAL_RCC_OscConfig+0x658>
 80022ee:	e078      	b.n	80023e2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d159      	bne.n	80023ac <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f8:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <HAL_RCC_OscConfig+0x688>)
 80022fe:	4911      	ldr	r1, [pc, #68]	@ (8002344 <HAL_RCC_OscConfig+0x6ac>)
 8002300:	400a      	ands	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7fe ffe6 	bl	80012d4 <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800230c:	e01c      	b.n	8002348 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800230e:	f7fe ffe1 	bl	80012d4 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d915      	bls.n	8002348 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e084      	b.n	800242a <HAL_RCC_OscConfig+0x792>
 8002320:	40021000 	.word	0x40021000
 8002324:	ffff1fff 	.word	0xffff1fff
 8002328:	fffffeff 	.word	0xfffffeff
 800232c:	40007000 	.word	0x40007000
 8002330:	fffffbff 	.word	0xfffffbff
 8002334:	00001388 	.word	0x00001388
 8002338:	efffffff 	.word	0xefffffff
 800233c:	40010000 	.word	0x40010000
 8002340:	ffffdfff 	.word	0xffffdfff
 8002344:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002348:	4b3a      	ldr	r3, [pc, #232]	@ (8002434 <HAL_RCC_OscConfig+0x79c>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	@ 0x80
 800234e:	049b      	lsls	r3, r3, #18
 8002350:	4013      	ands	r3, r2
 8002352:	d1dc      	bne.n	800230e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002354:	4b37      	ldr	r3, [pc, #220]	@ (8002434 <HAL_RCC_OscConfig+0x79c>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a37      	ldr	r2, [pc, #220]	@ (8002438 <HAL_RCC_OscConfig+0x7a0>)
 800235a:	4013      	ands	r3, r2
 800235c:	0019      	movs	r1, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236c:	431a      	orrs	r2, r3
 800236e:	4b31      	ldr	r3, [pc, #196]	@ (8002434 <HAL_RCC_OscConfig+0x79c>)
 8002370:	430a      	orrs	r2, r1
 8002372:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002374:	4b2f      	ldr	r3, [pc, #188]	@ (8002434 <HAL_RCC_OscConfig+0x79c>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b2e      	ldr	r3, [pc, #184]	@ (8002434 <HAL_RCC_OscConfig+0x79c>)
 800237a:	2180      	movs	r1, #128	@ 0x80
 800237c:	0449      	lsls	r1, r1, #17
 800237e:	430a      	orrs	r2, r1
 8002380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002382:	f7fe ffa7 	bl	80012d4 <HAL_GetTick>
 8002386:	0003      	movs	r3, r0
 8002388:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe ffa2 	bl	80012d4 <HAL_GetTick>
 8002390:	0002      	movs	r2, r0
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e045      	b.n	800242a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800239e:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <HAL_RCC_OscConfig+0x79c>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	2380      	movs	r3, #128	@ 0x80
 80023a4:	049b      	lsls	r3, r3, #18
 80023a6:	4013      	ands	r3, r2
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x6f4>
 80023aa:	e03d      	b.n	8002428 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b21      	ldr	r3, [pc, #132]	@ (8002434 <HAL_RCC_OscConfig+0x79c>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b20      	ldr	r3, [pc, #128]	@ (8002434 <HAL_RCC_OscConfig+0x79c>)
 80023b2:	4922      	ldr	r1, [pc, #136]	@ (800243c <HAL_RCC_OscConfig+0x7a4>)
 80023b4:	400a      	ands	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe ff8c 	bl	80012d4 <HAL_GetTick>
 80023bc:	0003      	movs	r3, r0
 80023be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c2:	f7fe ff87 	bl	80012d4 <HAL_GetTick>
 80023c6:	0002      	movs	r2, r0
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e02a      	b.n	800242a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023d4:	4b17      	ldr	r3, [pc, #92]	@ (8002434 <HAL_RCC_OscConfig+0x79c>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2380      	movs	r3, #128	@ 0x80
 80023da:	049b      	lsls	r3, r3, #18
 80023dc:	4013      	ands	r3, r2
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x72a>
 80023e0:	e022      	b.n	8002428 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e01d      	b.n	800242a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023ee:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <HAL_RCC_OscConfig+0x79c>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	2380      	movs	r3, #128	@ 0x80
 80023f8:	025b      	lsls	r3, r3, #9
 80023fa:	401a      	ands	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	429a      	cmp	r2, r3
 8002402:	d10f      	bne.n	8002424 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	23f0      	movs	r3, #240	@ 0xf0
 8002408:	039b      	lsls	r3, r3, #14
 800240a:	401a      	ands	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d107      	bne.n	8002424 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	23c0      	movs	r3, #192	@ 0xc0
 8002418:	041b      	lsls	r3, r3, #16
 800241a:	401a      	ands	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b00a      	add	sp, #40	@ 0x28
 8002430:	bdb0      	pop	{r4, r5, r7, pc}
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	40021000 	.word	0x40021000
 8002438:	ff02ffff 	.word	0xff02ffff
 800243c:	feffffff 	.word	0xfeffffff

08002440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b5b0      	push	{r4, r5, r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e128      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b96      	ldr	r3, [pc, #600]	@ (80026b0 <HAL_RCC_ClockConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2201      	movs	r2, #1
 800245a:	4013      	ands	r3, r2
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d91e      	bls.n	80024a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b93      	ldr	r3, [pc, #588]	@ (80026b0 <HAL_RCC_ClockConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2201      	movs	r2, #1
 8002468:	4393      	bics	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	4b90      	ldr	r3, [pc, #576]	@ (80026b0 <HAL_RCC_ClockConfig+0x270>)
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002474:	f7fe ff2e 	bl	80012d4 <HAL_GetTick>
 8002478:	0003      	movs	r3, r0
 800247a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247c:	e009      	b.n	8002492 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247e:	f7fe ff29 	bl	80012d4 <HAL_GetTick>
 8002482:	0002      	movs	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	4a8a      	ldr	r2, [pc, #552]	@ (80026b4 <HAL_RCC_ClockConfig+0x274>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e109      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	4b87      	ldr	r3, [pc, #540]	@ (80026b0 <HAL_RCC_ClockConfig+0x270>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2201      	movs	r2, #1
 8002498:	4013      	ands	r3, r2
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d1ee      	bne.n	800247e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2202      	movs	r2, #2
 80024a6:	4013      	ands	r3, r2
 80024a8:	d009      	beq.n	80024be <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024aa:	4b83      	ldr	r3, [pc, #524]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	22f0      	movs	r2, #240	@ 0xf0
 80024b0:	4393      	bics	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	4b7f      	ldr	r3, [pc, #508]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 80024ba:	430a      	orrs	r2, r1
 80024bc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2201      	movs	r2, #1
 80024c4:	4013      	ands	r3, r2
 80024c6:	d100      	bne.n	80024ca <HAL_RCC_ClockConfig+0x8a>
 80024c8:	e089      	b.n	80025de <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024d2:	4b79      	ldr	r3, [pc, #484]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	2380      	movs	r3, #128	@ 0x80
 80024d8:	029b      	lsls	r3, r3, #10
 80024da:	4013      	ands	r3, r2
 80024dc:	d120      	bne.n	8002520 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0e1      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024ea:	4b73      	ldr	r3, [pc, #460]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	2380      	movs	r3, #128	@ 0x80
 80024f0:	049b      	lsls	r3, r3, #18
 80024f2:	4013      	ands	r3, r2
 80024f4:	d114      	bne.n	8002520 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0d5      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d106      	bne.n	8002510 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002502:	4b6d      	ldr	r3, [pc, #436]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2204      	movs	r2, #4
 8002508:	4013      	ands	r3, r2
 800250a:	d109      	bne.n	8002520 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0ca      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002510:	4b69      	ldr	r3, [pc, #420]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2380      	movs	r3, #128	@ 0x80
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4013      	ands	r3, r2
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0c2      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002520:	4b65      	ldr	r3, [pc, #404]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2203      	movs	r2, #3
 8002526:	4393      	bics	r3, r2
 8002528:	0019      	movs	r1, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4b62      	ldr	r3, [pc, #392]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002530:	430a      	orrs	r2, r1
 8002532:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002534:	f7fe fece 	bl	80012d4 <HAL_GetTick>
 8002538:	0003      	movs	r3, r0
 800253a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d111      	bne.n	8002568 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002544:	e009      	b.n	800255a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002546:	f7fe fec5 	bl	80012d4 <HAL_GetTick>
 800254a:	0002      	movs	r2, r0
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	4a58      	ldr	r2, [pc, #352]	@ (80026b4 <HAL_RCC_ClockConfig+0x274>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e0a5      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800255a:	4b57      	ldr	r3, [pc, #348]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	220c      	movs	r2, #12
 8002560:	4013      	ands	r3, r2
 8002562:	2b08      	cmp	r3, #8
 8002564:	d1ef      	bne.n	8002546 <HAL_RCC_ClockConfig+0x106>
 8002566:	e03a      	b.n	80025de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d111      	bne.n	8002594 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002570:	e009      	b.n	8002586 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002572:	f7fe feaf 	bl	80012d4 <HAL_GetTick>
 8002576:	0002      	movs	r2, r0
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	4a4d      	ldr	r2, [pc, #308]	@ (80026b4 <HAL_RCC_ClockConfig+0x274>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e08f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002586:	4b4c      	ldr	r3, [pc, #304]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	220c      	movs	r2, #12
 800258c:	4013      	ands	r3, r2
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d1ef      	bne.n	8002572 <HAL_RCC_ClockConfig+0x132>
 8002592:	e024      	b.n	80025de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d11b      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800259c:	e009      	b.n	80025b2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259e:	f7fe fe99 	bl	80012d4 <HAL_GetTick>
 80025a2:	0002      	movs	r2, r0
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	4a42      	ldr	r2, [pc, #264]	@ (80026b4 <HAL_RCC_ClockConfig+0x274>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e079      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025b2:	4b41      	ldr	r3, [pc, #260]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	220c      	movs	r2, #12
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d1ef      	bne.n	800259e <HAL_RCC_ClockConfig+0x15e>
 80025be:	e00e      	b.n	80025de <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c0:	f7fe fe88 	bl	80012d4 <HAL_GetTick>
 80025c4:	0002      	movs	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	4a3a      	ldr	r2, [pc, #232]	@ (80026b4 <HAL_RCC_ClockConfig+0x274>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e068      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80025d4:	4b38      	ldr	r3, [pc, #224]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	220c      	movs	r2, #12
 80025da:	4013      	ands	r3, r2
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025de:	4b34      	ldr	r3, [pc, #208]	@ (80026b0 <HAL_RCC_ClockConfig+0x270>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2201      	movs	r2, #1
 80025e4:	4013      	ands	r3, r2
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d21e      	bcs.n	800262a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ec:	4b30      	ldr	r3, [pc, #192]	@ (80026b0 <HAL_RCC_ClockConfig+0x270>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2201      	movs	r2, #1
 80025f2:	4393      	bics	r3, r2
 80025f4:	0019      	movs	r1, r3
 80025f6:	4b2e      	ldr	r3, [pc, #184]	@ (80026b0 <HAL_RCC_ClockConfig+0x270>)
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025fe:	f7fe fe69 	bl	80012d4 <HAL_GetTick>
 8002602:	0003      	movs	r3, r0
 8002604:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	e009      	b.n	800261c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002608:	f7fe fe64 	bl	80012d4 <HAL_GetTick>
 800260c:	0002      	movs	r2, r0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	4a28      	ldr	r2, [pc, #160]	@ (80026b4 <HAL_RCC_ClockConfig+0x274>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d901      	bls.n	800261c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e044      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261c:	4b24      	ldr	r3, [pc, #144]	@ (80026b0 <HAL_RCC_ClockConfig+0x270>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2201      	movs	r2, #1
 8002622:	4013      	ands	r3, r2
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d1ee      	bne.n	8002608 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2204      	movs	r2, #4
 8002630:	4013      	ands	r3, r2
 8002632:	d009      	beq.n	8002648 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002634:	4b20      	ldr	r3, [pc, #128]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4a20      	ldr	r2, [pc, #128]	@ (80026bc <HAL_RCC_ClockConfig+0x27c>)
 800263a:	4013      	ands	r3, r2
 800263c:	0019      	movs	r1, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002644:	430a      	orrs	r2, r1
 8002646:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2208      	movs	r2, #8
 800264e:	4013      	ands	r3, r2
 8002650:	d00a      	beq.n	8002668 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002652:	4b19      	ldr	r3, [pc, #100]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4a1a      	ldr	r2, [pc, #104]	@ (80026c0 <HAL_RCC_ClockConfig+0x280>)
 8002658:	4013      	ands	r3, r2
 800265a:	0019      	movs	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	00da      	lsls	r2, r3, #3
 8002662:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002664:	430a      	orrs	r2, r1
 8002666:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002668:	f000 f832 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 800266c:	0001      	movs	r1, r0
 800266e:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <HAL_RCC_ClockConfig+0x278>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	220f      	movs	r2, #15
 8002676:	4013      	ands	r3, r2
 8002678:	4a12      	ldr	r2, [pc, #72]	@ (80026c4 <HAL_RCC_ClockConfig+0x284>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	000a      	movs	r2, r1
 800267e:	40da      	lsrs	r2, r3
 8002680:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <HAL_RCC_ClockConfig+0x288>)
 8002682:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002684:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <HAL_RCC_ClockConfig+0x28c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	250b      	movs	r5, #11
 800268a:	197c      	adds	r4, r7, r5
 800268c:	0018      	movs	r0, r3
 800268e:	f7fe fddb 	bl	8001248 <HAL_InitTick>
 8002692:	0003      	movs	r3, r0
 8002694:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002696:	197b      	adds	r3, r7, r5
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800269e:	197b      	adds	r3, r7, r5
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b004      	add	sp, #16
 80026ac:	bdb0      	pop	{r4, r5, r7, pc}
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	40022000 	.word	0x40022000
 80026b4:	00001388 	.word	0x00001388
 80026b8:	40021000 	.word	0x40021000
 80026bc:	fffff8ff 	.word	0xfffff8ff
 80026c0:	ffffc7ff 	.word	0xffffc7ff
 80026c4:	08005ca8 	.word	0x08005ca8
 80026c8:	20000000 	.word	0x20000000
 80026cc:	20000004 	.word	0x20000004

080026d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d0:	b5b0      	push	{r4, r5, r7, lr}
 80026d2:	b08e      	sub	sp, #56	@ 0x38
 80026d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80026d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x138>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026de:	230c      	movs	r3, #12
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b0c      	cmp	r3, #12
 80026e4:	d014      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x40>
 80026e6:	d900      	bls.n	80026ea <HAL_RCC_GetSysClockFreq+0x1a>
 80026e8:	e07b      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x112>
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d002      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x24>
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d00b      	beq.n	800270a <HAL_RCC_GetSysClockFreq+0x3a>
 80026f2:	e076      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026f4:	4b44      	ldr	r3, [pc, #272]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x138>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2210      	movs	r2, #16
 80026fa:	4013      	ands	r3, r2
 80026fc:	d002      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80026fe:	4b43      	ldr	r3, [pc, #268]	@ (800280c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002700:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002702:	e07c      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002704:	4b42      	ldr	r3, [pc, #264]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x140>)
 8002706:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002708:	e079      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800270a:	4b42      	ldr	r3, [pc, #264]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x144>)
 800270c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800270e:	e076      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002712:	0c9a      	lsrs	r2, r3, #18
 8002714:	230f      	movs	r3, #15
 8002716:	401a      	ands	r2, r3
 8002718:	4b3f      	ldr	r3, [pc, #252]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x148>)
 800271a:	5c9b      	ldrb	r3, [r3, r2]
 800271c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800271e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002720:	0d9a      	lsrs	r2, r3, #22
 8002722:	2303      	movs	r3, #3
 8002724:	4013      	ands	r3, r2
 8002726:	3301      	adds	r3, #1
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800272a:	4b37      	ldr	r3, [pc, #220]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x138>)
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	2380      	movs	r3, #128	@ 0x80
 8002730:	025b      	lsls	r3, r3, #9
 8002732:	4013      	ands	r3, r2
 8002734:	d01a      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	4a35      	ldr	r2, [pc, #212]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x144>)
 8002740:	2300      	movs	r3, #0
 8002742:	69b8      	ldr	r0, [r7, #24]
 8002744:	69f9      	ldr	r1, [r7, #28]
 8002746:	f7fd fd95 	bl	8000274 <__aeabi_lmul>
 800274a:	0002      	movs	r2, r0
 800274c:	000b      	movs	r3, r1
 800274e:	0010      	movs	r0, r2
 8002750:	0019      	movs	r1, r3
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f7fd fd69 	bl	8000234 <__aeabi_uldivmod>
 8002762:	0002      	movs	r2, r0
 8002764:	000b      	movs	r3, r1
 8002766:	0013      	movs	r3, r2
 8002768:	637b      	str	r3, [r7, #52]	@ 0x34
 800276a:	e037      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800276c:	4b26      	ldr	r3, [pc, #152]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x138>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2210      	movs	r2, #16
 8002772:	4013      	ands	r3, r2
 8002774:	d01a      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4a23      	ldr	r2, [pc, #140]	@ (800280c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002780:	2300      	movs	r3, #0
 8002782:	68b8      	ldr	r0, [r7, #8]
 8002784:	68f9      	ldr	r1, [r7, #12]
 8002786:	f7fd fd75 	bl	8000274 <__aeabi_lmul>
 800278a:	0002      	movs	r2, r0
 800278c:	000b      	movs	r3, r1
 800278e:	0010      	movs	r0, r2
 8002790:	0019      	movs	r1, r3
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f7fd fd49 	bl	8000234 <__aeabi_uldivmod>
 80027a2:	0002      	movs	r2, r0
 80027a4:	000b      	movs	r3, r1
 80027a6:	0013      	movs	r3, r2
 80027a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80027aa:	e017      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80027ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ae:	0018      	movs	r0, r3
 80027b0:	2300      	movs	r3, #0
 80027b2:	0019      	movs	r1, r3
 80027b4:	4a16      	ldr	r2, [pc, #88]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x140>)
 80027b6:	2300      	movs	r3, #0
 80027b8:	f7fd fd5c 	bl	8000274 <__aeabi_lmul>
 80027bc:	0002      	movs	r2, r0
 80027be:	000b      	movs	r3, r1
 80027c0:	0010      	movs	r0, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c6:	001c      	movs	r4, r3
 80027c8:	2300      	movs	r3, #0
 80027ca:	001d      	movs	r5, r3
 80027cc:	0022      	movs	r2, r4
 80027ce:	002b      	movs	r3, r5
 80027d0:	f7fd fd30 	bl	8000234 <__aeabi_uldivmod>
 80027d4:	0002      	movs	r2, r0
 80027d6:	000b      	movs	r3, r1
 80027d8:	0013      	movs	r3, r2
 80027da:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80027dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027de:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80027e0:	e00d      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80027e2:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x138>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	0b5b      	lsrs	r3, r3, #13
 80027e8:	2207      	movs	r2, #7
 80027ea:	4013      	ands	r3, r2
 80027ec:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	3301      	adds	r3, #1
 80027f2:	2280      	movs	r2, #128	@ 0x80
 80027f4:	0212      	lsls	r2, r2, #8
 80027f6:	409a      	lsls	r2, r3
 80027f8:	0013      	movs	r3, r2
 80027fa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80027fc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b00e      	add	sp, #56	@ 0x38
 8002806:	bdb0      	pop	{r4, r5, r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	003d0900 	.word	0x003d0900
 8002810:	00f42400 	.word	0x00f42400
 8002814:	007a1200 	.word	0x007a1200
 8002818:	08005cc0 	.word	0x08005cc0

0800281c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002820:	4b02      	ldr	r3, [pc, #8]	@ (800282c <HAL_RCC_GetHCLKFreq+0x10>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	46c0      	nop			@ (mov r8, r8)
 800282c:	20000000 	.word	0x20000000

08002830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002834:	f7ff fff2 	bl	800281c <HAL_RCC_GetHCLKFreq>
 8002838:	0001      	movs	r1, r0
 800283a:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <HAL_RCC_GetPCLK1Freq+0x24>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	2207      	movs	r2, #7
 8002842:	4013      	ands	r3, r2
 8002844:	4a04      	ldr	r2, [pc, #16]	@ (8002858 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	40d9      	lsrs	r1, r3
 800284a:	000b      	movs	r3, r1
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			@ (mov r8, r8)
 8002854:	40021000 	.word	0x40021000
 8002858:	08005cb8 	.word	0x08005cb8

0800285c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002860:	f7ff ffdc 	bl	800281c <HAL_RCC_GetHCLKFreq>
 8002864:	0001      	movs	r1, r0
 8002866:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	0adb      	lsrs	r3, r3, #11
 800286c:	2207      	movs	r2, #7
 800286e:	4013      	ands	r3, r2
 8002870:	4a04      	ldr	r2, [pc, #16]	@ (8002884 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	40d9      	lsrs	r1, r3
 8002876:	000b      	movs	r3, r1
}
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	40021000 	.word	0x40021000
 8002884:	08005cb8 	.word	0x08005cb8

08002888 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002890:	2317      	movs	r3, #23
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2220      	movs	r2, #32
 800289e:	4013      	ands	r3, r2
 80028a0:	d106      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	2380      	movs	r3, #128	@ 0x80
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	4013      	ands	r3, r2
 80028ac:	d100      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80028ae:	e104      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b0:	4bb9      	ldr	r3, [pc, #740]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028b4:	2380      	movs	r3, #128	@ 0x80
 80028b6:	055b      	lsls	r3, r3, #21
 80028b8:	4013      	ands	r3, r2
 80028ba:	d10a      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028bc:	4bb6      	ldr	r3, [pc, #728]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028c0:	4bb5      	ldr	r3, [pc, #724]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028c2:	2180      	movs	r1, #128	@ 0x80
 80028c4:	0549      	lsls	r1, r1, #21
 80028c6:	430a      	orrs	r2, r1
 80028c8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80028ca:	2317      	movs	r3, #23
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d2:	4bb2      	ldr	r3, [pc, #712]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	4013      	ands	r3, r2
 80028dc:	d11a      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028de:	4baf      	ldr	r3, [pc, #700]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4bae      	ldr	r3, [pc, #696]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80028e4:	2180      	movs	r1, #128	@ 0x80
 80028e6:	0049      	lsls	r1, r1, #1
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ec:	f7fe fcf2 	bl	80012d4 <HAL_GetTick>
 80028f0:	0003      	movs	r3, r0
 80028f2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	e008      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7fe fced 	bl	80012d4 <HAL_GetTick>
 80028fa:	0002      	movs	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b64      	cmp	r3, #100	@ 0x64
 8002902:	d901      	bls.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e143      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4ba4      	ldr	r3, [pc, #656]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4013      	ands	r3, r2
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002914:	4ba0      	ldr	r3, [pc, #640]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	23c0      	movs	r3, #192	@ 0xc0
 800291a:	039b      	lsls	r3, r3, #14
 800291c:	4013      	ands	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	23c0      	movs	r3, #192	@ 0xc0
 8002926:	039b      	lsls	r3, r3, #14
 8002928:	4013      	ands	r3, r2
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	429a      	cmp	r2, r3
 800292e:	d107      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	23c0      	movs	r3, #192	@ 0xc0
 8002936:	039b      	lsls	r3, r3, #14
 8002938:	4013      	ands	r3, r2
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d013      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	23c0      	movs	r3, #192	@ 0xc0
 8002946:	029b      	lsls	r3, r3, #10
 8002948:	401a      	ands	r2, r3
 800294a:	23c0      	movs	r3, #192	@ 0xc0
 800294c:	029b      	lsls	r3, r3, #10
 800294e:	429a      	cmp	r2, r3
 8002950:	d10a      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002952:	4b91      	ldr	r3, [pc, #580]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	2380      	movs	r3, #128	@ 0x80
 8002958:	029b      	lsls	r3, r3, #10
 800295a:	401a      	ands	r2, r3
 800295c:	2380      	movs	r3, #128	@ 0x80
 800295e:	029b      	lsls	r3, r3, #10
 8002960:	429a      	cmp	r2, r3
 8002962:	d101      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e113      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002968:	4b8b      	ldr	r3, [pc, #556]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800296a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800296c:	23c0      	movs	r3, #192	@ 0xc0
 800296e:	029b      	lsls	r3, r3, #10
 8002970:	4013      	ands	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d049      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	23c0      	movs	r3, #192	@ 0xc0
 8002980:	029b      	lsls	r3, r3, #10
 8002982:	4013      	ands	r3, r2
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	429a      	cmp	r2, r3
 8002988:	d004      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2220      	movs	r2, #32
 8002990:	4013      	ands	r3, r2
 8002992:	d10d      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	23c0      	movs	r3, #192	@ 0xc0
 800299a:	029b      	lsls	r3, r3, #10
 800299c:	4013      	ands	r3, r2
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d034      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	4013      	ands	r3, r2
 80029ae:	d02e      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80029b0:	4b79      	ldr	r3, [pc, #484]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b4:	4a7a      	ldr	r2, [pc, #488]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ba:	4b77      	ldr	r3, [pc, #476]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029be:	4b76      	ldr	r3, [pc, #472]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029c0:	2180      	movs	r1, #128	@ 0x80
 80029c2:	0309      	lsls	r1, r1, #12
 80029c4:	430a      	orrs	r2, r1
 80029c6:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029c8:	4b73      	ldr	r3, [pc, #460]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029cc:	4b72      	ldr	r3, [pc, #456]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029ce:	4975      	ldr	r1, [pc, #468]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80029d0:	400a      	ands	r2, r1
 80029d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80029d4:	4b70      	ldr	r3, [pc, #448]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	2380      	movs	r3, #128	@ 0x80
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4013      	ands	r3, r2
 80029e2:	d014      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7fe fc76 	bl	80012d4 <HAL_GetTick>
 80029e8:	0003      	movs	r3, r0
 80029ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029ec:	e009      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe fc71 	bl	80012d4 <HAL_GetTick>
 80029f2:	0002      	movs	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	4a6b      	ldr	r2, [pc, #428]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0c6      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a02:	4b65      	ldr	r3, [pc, #404]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a06:	2380      	movs	r3, #128	@ 0x80
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d0ef      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	2380      	movs	r3, #128	@ 0x80
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	4013      	ands	r3, r2
 8002a18:	d01f      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	23c0      	movs	r3, #192	@ 0xc0
 8002a20:	029b      	lsls	r3, r3, #10
 8002a22:	401a      	ands	r2, r3
 8002a24:	23c0      	movs	r3, #192	@ 0xc0
 8002a26:	029b      	lsls	r3, r3, #10
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d10c      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a5e      	ldr	r2, [pc, #376]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	0019      	movs	r1, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	23c0      	movs	r3, #192	@ 0xc0
 8002a3c:	039b      	lsls	r3, r3, #14
 8002a3e:	401a      	ands	r2, r3
 8002a40:	4b55      	ldr	r3, [pc, #340]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a42:	430a      	orrs	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	4b54      	ldr	r3, [pc, #336]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	23c0      	movs	r3, #192	@ 0xc0
 8002a50:	029b      	lsls	r3, r3, #10
 8002a52:	401a      	ands	r2, r3
 8002a54:	4b50      	ldr	r3, [pc, #320]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a56:	430a      	orrs	r2, r1
 8002a58:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	4013      	ands	r3, r2
 8002a62:	d01f      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	23c0      	movs	r3, #192	@ 0xc0
 8002a6a:	029b      	lsls	r3, r3, #10
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	23c0      	movs	r3, #192	@ 0xc0
 8002a70:	029b      	lsls	r3, r3, #10
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002a76:	4b48      	ldr	r3, [pc, #288]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a4c      	ldr	r2, [pc, #304]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	0019      	movs	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	23c0      	movs	r3, #192	@ 0xc0
 8002a86:	039b      	lsls	r3, r3, #14
 8002a88:	401a      	ands	r2, r3
 8002a8a:	4b43      	ldr	r3, [pc, #268]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	4b41      	ldr	r3, [pc, #260]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a92:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	23c0      	movs	r3, #192	@ 0xc0
 8002a9a:	029b      	lsls	r3, r3, #10
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002aa4:	2317      	movs	r3, #23
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d105      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aae:	4b3a      	ldr	r3, [pc, #232]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ab2:	4b39      	ldr	r3, [pc, #228]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ab4:	493e      	ldr	r1, [pc, #248]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d009      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ac4:	4b34      	ldr	r3, [pc, #208]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac8:	2203      	movs	r2, #3
 8002aca:	4393      	bics	r3, r2
 8002acc:	0019      	movs	r1, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	4b31      	ldr	r3, [pc, #196]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2202      	movs	r2, #2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae6:	220c      	movs	r2, #12
 8002ae8:	4393      	bics	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	4b29      	ldr	r3, [pc, #164]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002af2:	430a      	orrs	r2, r1
 8002af4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2204      	movs	r2, #4
 8002afc:	4013      	ands	r3, r2
 8002afe:	d009      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b00:	4b25      	ldr	r3, [pc, #148]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b04:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	0019      	movs	r1, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	4b22      	ldr	r3, [pc, #136]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b10:	430a      	orrs	r2, r1
 8002b12:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2208      	movs	r2, #8
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d009      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b22:	4a25      	ldr	r2, [pc, #148]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	0019      	movs	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699a      	ldr	r2, [r3, #24]
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	2380      	movs	r3, #128	@ 0x80
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d009      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b3e:	4b16      	ldr	r3, [pc, #88]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b42:	4a17      	ldr	r2, [pc, #92]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	0019      	movs	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69da      	ldr	r2, [r3, #28]
 8002b4c:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2240      	movs	r2, #64	@ 0x40
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d009      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b60:	4a16      	ldr	r2, [pc, #88]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	0019      	movs	r1, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2280      	movs	r2, #128	@ 0x80
 8002b76:	4013      	ands	r3, r2
 8002b78:	d009      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002b7a:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7e:	4a10      	ldr	r2, [pc, #64]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	0019      	movs	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1a      	ldr	r2, [r3, #32]
 8002b88:	4b03      	ldr	r3, [pc, #12]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	0018      	movs	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b006      	add	sp, #24
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	fffcffff 	.word	0xfffcffff
 8002ba4:	fff7ffff 	.word	0xfff7ffff
 8002ba8:	00001388 	.word	0x00001388
 8002bac:	ffcfffff 	.word	0xffcfffff
 8002bb0:	efffffff 	.word	0xefffffff
 8002bb4:	fffff3ff 	.word	0xfffff3ff
 8002bb8:	ffffcfff 	.word	0xffffcfff
 8002bbc:	fbffffff 	.word	0xfbffffff
 8002bc0:	fff3ffff 	.word	0xfff3ffff

08002bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e032      	b.n	8002c3c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2239      	movs	r2, #57	@ 0x39
 8002bda:	5c9b      	ldrb	r3, [r3, r2]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d107      	bne.n	8002bf2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2238      	movs	r2, #56	@ 0x38
 8002be6:	2100      	movs	r1, #0
 8002be8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f7fd ff7b 	bl	8000ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2239      	movs	r2, #57	@ 0x39
 8002bf6:	2102      	movs	r1, #2
 8002bf8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3304      	adds	r3, #4
 8002c02:	0019      	movs	r1, r3
 8002c04:	0010      	movs	r0, r2
 8002c06:	f000 feb3 	bl	8003970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	223e      	movs	r2, #62	@ 0x3e
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	223a      	movs	r2, #58	@ 0x3a
 8002c16:	2101      	movs	r1, #1
 8002c18:	5499      	strb	r1, [r3, r2]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	223b      	movs	r2, #59	@ 0x3b
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	223c      	movs	r2, #60	@ 0x3c
 8002c26:	2101      	movs	r1, #1
 8002c28:	5499      	strb	r1, [r3, r2]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	223d      	movs	r2, #61	@ 0x3d
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2239      	movs	r2, #57	@ 0x39
 8002c36:	2101      	movs	r1, #1
 8002c38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b002      	add	sp, #8
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2239      	movs	r2, #57	@ 0x39
 8002c50:	5c9b      	ldrb	r3, [r3, r2]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d001      	beq.n	8002c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e03b      	b.n	8002cd4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2239      	movs	r2, #57	@ 0x39
 8002c60:	2102      	movs	r1, #2
 8002c62:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2101      	movs	r1, #1
 8002c70:	430a      	orrs	r2, r1
 8002c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	05db      	lsls	r3, r3, #23
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d00e      	beq.n	8002c9e <HAL_TIM_Base_Start_IT+0x5a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a15      	ldr	r2, [pc, #84]	@ (8002cdc <HAL_TIM_Base_Start_IT+0x98>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d009      	beq.n	8002c9e <HAL_TIM_Base_Start_IT+0x5a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a14      	ldr	r2, [pc, #80]	@ (8002ce0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d004      	beq.n	8002c9e <HAL_TIM_Base_Start_IT+0x5a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a12      	ldr	r2, [pc, #72]	@ (8002ce4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d111      	bne.n	8002cc2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b06      	cmp	r3, #6
 8002cae:	d010      	beq.n	8002cd2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2101      	movs	r1, #1
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc0:	e007      	b.n	8002cd2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2101      	movs	r1, #1
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b004      	add	sp, #16
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40010800 	.word	0x40010800
 8002ce4:	40011400 	.word	0x40011400

08002ce8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e032      	b.n	8002d60 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2239      	movs	r2, #57	@ 0x39
 8002cfe:	5c9b      	ldrb	r3, [r3, r2]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d107      	bne.n	8002d16 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2238      	movs	r2, #56	@ 0x38
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f000 f829 	bl	8002d68 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2239      	movs	r2, #57	@ 0x39
 8002d1a:	2102      	movs	r1, #2
 8002d1c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3304      	adds	r3, #4
 8002d26:	0019      	movs	r1, r3
 8002d28:	0010      	movs	r0, r2
 8002d2a:	f000 fe21 	bl	8003970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	223e      	movs	r2, #62	@ 0x3e
 8002d32:	2101      	movs	r1, #1
 8002d34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	223a      	movs	r2, #58	@ 0x3a
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	5499      	strb	r1, [r3, r2]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	223b      	movs	r2, #59	@ 0x3b
 8002d42:	2101      	movs	r1, #1
 8002d44:	5499      	strb	r1, [r3, r2]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	223c      	movs	r2, #60	@ 0x3c
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	5499      	strb	r1, [r3, r2]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	223d      	movs	r2, #61	@ 0x3d
 8002d52:	2101      	movs	r1, #1
 8002d54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2239      	movs	r2, #57	@ 0x39
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b002      	add	sp, #8
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002d70:	46c0      	nop			@ (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b002      	add	sp, #8
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e032      	b.n	8002df0 <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2239      	movs	r2, #57	@ 0x39
 8002d8e:	5c9b      	ldrb	r3, [r3, r2]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d107      	bne.n	8002da6 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2238      	movs	r2, #56	@ 0x38
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f000 f829 	bl	8002df8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2239      	movs	r2, #57	@ 0x39
 8002daa:	2102      	movs	r1, #2
 8002dac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3304      	adds	r3, #4
 8002db6:	0019      	movs	r1, r3
 8002db8:	0010      	movs	r0, r2
 8002dba:	f000 fdd9 	bl	8003970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	223e      	movs	r2, #62	@ 0x3e
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	223a      	movs	r2, #58	@ 0x3a
 8002dca:	2101      	movs	r1, #1
 8002dcc:	5499      	strb	r1, [r3, r2]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	223b      	movs	r2, #59	@ 0x3b
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	5499      	strb	r1, [r3, r2]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	223c      	movs	r2, #60	@ 0x3c
 8002dda:	2101      	movs	r1, #1
 8002ddc:	5499      	strb	r1, [r3, r2]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	223d      	movs	r2, #61	@ 0x3d
 8002de2:	2101      	movs	r1, #1
 8002de4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2239      	movs	r2, #57	@ 0x39
 8002dea:	2101      	movs	r1, #1
 8002dec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b002      	add	sp, #8
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002e00:	46c0      	nop			@ (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b002      	add	sp, #8
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	001a      	movs	r2, r3
 8002e16:	1cbb      	adds	r3, r7, #2
 8002e18:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1a:	2317      	movs	r3, #23
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_IC_Start_DMA+0x2a>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	223a      	movs	r2, #58	@ 0x3a
 8002e2c:	5c9b      	ldrb	r3, [r3, r2]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	e013      	b.n	8002e5a <HAL_TIM_IC_Start_DMA+0x52>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_IC_Start_DMA+0x3a>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	223b      	movs	r2, #59	@ 0x3b
 8002e3c:	5c9b      	ldrb	r3, [r3, r2]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	e00b      	b.n	8002e5a <HAL_TIM_IC_Start_DMA+0x52>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d104      	bne.n	8002e52 <HAL_TIM_IC_Start_DMA+0x4a>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	223c      	movs	r2, #60	@ 0x3c
 8002e4c:	5c9b      	ldrb	r3, [r3, r2]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	e003      	b.n	8002e5a <HAL_TIM_IC_Start_DMA+0x52>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	223d      	movs	r2, #61	@ 0x3d
 8002e56:	5c9b      	ldrb	r3, [r3, r2]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2116      	movs	r1, #22
 8002e5c:	187a      	adds	r2, r7, r1
 8002e5e:	7013      	strb	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if (channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8002e60:	187b      	adds	r3, r7, r1
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d101      	bne.n	8002e6c <HAL_TIM_IC_Start_DMA+0x64>
  {
    return HAL_BUSY;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e114      	b.n	8003096 <HAL_TIM_IC_Start_DMA+0x28e>
  }
  if (channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8002e6c:	2316      	movs	r3, #22
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d125      	bne.n	8002ec2 <HAL_TIM_IC_Start_DMA+0xba>
  {
    if ((pData == NULL) || (Length == 0U))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_TIM_IC_Start_DMA+0x7c>
 8002e7c:	1cbb      	adds	r3, r7, #2
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_TIM_IC_Start_DMA+0x80>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e106      	b.n	8003096 <HAL_TIM_IC_Start_DMA+0x28e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d104      	bne.n	8002e98 <HAL_TIM_IC_Start_DMA+0x90>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	223a      	movs	r2, #58	@ 0x3a
 8002e92:	2102      	movs	r1, #2
 8002e94:	5499      	strb	r1, [r3, r2]
 8002e96:	e016      	b.n	8002ec6 <HAL_TIM_IC_Start_DMA+0xbe>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d104      	bne.n	8002ea8 <HAL_TIM_IC_Start_DMA+0xa0>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	223b      	movs	r2, #59	@ 0x3b
 8002ea2:	2102      	movs	r1, #2
 8002ea4:	5499      	strb	r1, [r3, r2]
 8002ea6:	e00e      	b.n	8002ec6 <HAL_TIM_IC_Start_DMA+0xbe>
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d104      	bne.n	8002eb8 <HAL_TIM_IC_Start_DMA+0xb0>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	223c      	movs	r2, #60	@ 0x3c
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	5499      	strb	r1, [r3, r2]
 8002eb6:	e006      	b.n	8002ec6 <HAL_TIM_IC_Start_DMA+0xbe>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	223d      	movs	r2, #61	@ 0x3d
 8002ebc:	2102      	movs	r1, #2
 8002ebe:	5499      	strb	r1, [r3, r2]
 8002ec0:	e001      	b.n	8002ec6 <HAL_TIM_IC_Start_DMA+0xbe>
    }
  }
  else
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0e7      	b.n	8003096 <HAL_TIM_IC_Start_DMA+0x28e>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f001 f86e 	bl	8003fb0 <TIM_CCxChannelCmd>

  switch (Channel)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	d100      	bne.n	8002edc <HAL_TIM_IC_Start_DMA+0xd4>
 8002eda:	e080      	b.n	8002fde <HAL_TIM_IC_Start_DMA+0x1d6>
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b0c      	cmp	r3, #12
 8002ee0:	d900      	bls.n	8002ee4 <HAL_TIM_IC_Start_DMA+0xdc>
 8002ee2:	e0a1      	b.n	8003028 <HAL_TIM_IC_Start_DMA+0x220>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d054      	beq.n	8002f94 <HAL_TIM_IC_Start_DMA+0x18c>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d900      	bls.n	8002ef2 <HAL_TIM_IC_Start_DMA+0xea>
 8002ef0:	e09a      	b.n	8003028 <HAL_TIM_IC_Start_DMA+0x220>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_TIM_IC_Start_DMA+0xf8>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d025      	beq.n	8002f4a <HAL_TIM_IC_Start_DMA+0x142>
 8002efe:	e093      	b.n	8003028 <HAL_TIM_IC_Start_DMA+0x220>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4a66      	ldr	r2, [pc, #408]	@ (80030a0 <HAL_TIM_IC_Start_DMA+0x298>)
 8002f06:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4a65      	ldr	r2, [pc, #404]	@ (80030a4 <HAL_TIM_IC_Start_DMA+0x29c>)
 8002f0e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4a64      	ldr	r2, [pc, #400]	@ (80030a8 <HAL_TIM_IC_Start_DMA+0x2a0>)
 8002f16:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a18      	ldr	r0, [r3, #32]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3334      	adds	r3, #52	@ 0x34
 8002f22:	0019      	movs	r1, r3
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	1cbb      	adds	r3, r7, #2
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	f7fe fb57 	bl	80015dc <HAL_DMA_Start_IT>
 8002f2e:	1e03      	subs	r3, r0, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_TIM_IC_Start_DMA+0x12e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e0af      	b.n	8003096 <HAL_TIM_IC_Start_DMA+0x28e>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2180      	movs	r1, #128	@ 0x80
 8002f42:	0089      	lsls	r1, r1, #2
 8002f44:	430a      	orrs	r2, r1
 8002f46:	60da      	str	r2, [r3, #12]
      break;
 8002f48:	e073      	b.n	8003032 <HAL_TIM_IC_Start_DMA+0x22a>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	4a54      	ldr	r2, [pc, #336]	@ (80030a0 <HAL_TIM_IC_Start_DMA+0x298>)
 8002f50:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	4a53      	ldr	r2, [pc, #332]	@ (80030a4 <HAL_TIM_IC_Start_DMA+0x29c>)
 8002f58:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	4a52      	ldr	r2, [pc, #328]	@ (80030a8 <HAL_TIM_IC_Start_DMA+0x2a0>)
 8002f60:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3338      	adds	r3, #56	@ 0x38
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	1cbb      	adds	r3, r7, #2
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	f7fe fb32 	bl	80015dc <HAL_DMA_Start_IT>
 8002f78:	1e03      	subs	r3, r0, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_TIM_IC_Start_DMA+0x178>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e08a      	b.n	8003096 <HAL_TIM_IC_Start_DMA+0x28e>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2180      	movs	r1, #128	@ 0x80
 8002f8c:	00c9      	lsls	r1, r1, #3
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	60da      	str	r2, [r3, #12]
      break;
 8002f92:	e04e      	b.n	8003032 <HAL_TIM_IC_Start_DMA+0x22a>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f98:	4a41      	ldr	r2, [pc, #260]	@ (80030a0 <HAL_TIM_IC_Start_DMA+0x298>)
 8002f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa0:	4a40      	ldr	r2, [pc, #256]	@ (80030a4 <HAL_TIM_IC_Start_DMA+0x29c>)
 8002fa2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa8:	4a3f      	ldr	r2, [pc, #252]	@ (80030a8 <HAL_TIM_IC_Start_DMA+0x2a0>)
 8002faa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	333c      	adds	r3, #60	@ 0x3c
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	1cbb      	adds	r3, r7, #2
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	f7fe fb0d 	bl	80015dc <HAL_DMA_Start_IT>
 8002fc2:	1e03      	subs	r3, r0, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_TIM_IC_Start_DMA+0x1c2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e065      	b.n	8003096 <HAL_TIM_IC_Start_DMA+0x28e>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2180      	movs	r1, #128	@ 0x80
 8002fd6:	0109      	lsls	r1, r1, #4
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	60da      	str	r2, [r3, #12]
      break;
 8002fdc:	e029      	b.n	8003032 <HAL_TIM_IC_Start_DMA+0x22a>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80030a0 <HAL_TIM_IC_Start_DMA+0x298>)
 8002fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fea:	4a2e      	ldr	r2, [pc, #184]	@ (80030a4 <HAL_TIM_IC_Start_DMA+0x29c>)
 8002fec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80030a8 <HAL_TIM_IC_Start_DMA+0x2a0>)
 8002ff4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3340      	adds	r3, #64	@ 0x40
 8003000:	0019      	movs	r1, r3
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	1cbb      	adds	r3, r7, #2
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	f7fe fae8 	bl	80015dc <HAL_DMA_Start_IT>
 800300c:	1e03      	subs	r3, r0, #0
 800300e:	d001      	beq.n	8003014 <HAL_TIM_IC_Start_DMA+0x20c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e040      	b.n	8003096 <HAL_TIM_IC_Start_DMA+0x28e>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2180      	movs	r1, #128	@ 0x80
 8003020:	0149      	lsls	r1, r1, #5
 8003022:	430a      	orrs	r2, r1
 8003024:	60da      	str	r2, [r3, #12]
      break;
 8003026:	e004      	b.n	8003032 <HAL_TIM_IC_Start_DMA+0x22a>
    }

    default:
      status = HAL_ERROR;
 8003028:	2317      	movs	r3, #23
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2201      	movs	r2, #1
 800302e:	701a      	strb	r2, [r3, #0]
      break;
 8003030:	46c0      	nop			@ (mov r8, r8)
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	2380      	movs	r3, #128	@ 0x80
 8003038:	05db      	lsls	r3, r3, #23
 800303a:	429a      	cmp	r2, r3
 800303c:	d00e      	beq.n	800305c <HAL_TIM_IC_Start_DMA+0x254>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1a      	ldr	r2, [pc, #104]	@ (80030ac <HAL_TIM_IC_Start_DMA+0x2a4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d009      	beq.n	800305c <HAL_TIM_IC_Start_DMA+0x254>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a18      	ldr	r2, [pc, #96]	@ (80030b0 <HAL_TIM_IC_Start_DMA+0x2a8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d004      	beq.n	800305c <HAL_TIM_IC_Start_DMA+0x254>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a17      	ldr	r2, [pc, #92]	@ (80030b4 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d111      	bne.n	8003080 <HAL_TIM_IC_Start_DMA+0x278>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2207      	movs	r2, #7
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b06      	cmp	r3, #6
 800306c:	d010      	beq.n	8003090 <HAL_TIM_IC_Start_DMA+0x288>
    {
      __HAL_TIM_ENABLE(htim);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2101      	movs	r1, #1
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307e:	e007      	b.n	8003090 <HAL_TIM_IC_Start_DMA+0x288>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2101      	movs	r1, #1
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003090:	2317      	movs	r3, #23
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	781b      	ldrb	r3, [r3, #0]
}
 8003096:	0018      	movs	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	b006      	add	sp, #24
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	0800385d 	.word	0x0800385d
 80030a4:	08003907 	.word	0x08003907
 80030a8:	080037c9 	.word	0x080037c9
 80030ac:	40000400 	.word	0x40000400
 80030b0:	40010800 	.word	0x40010800
 80030b4:	40011400 	.word	0x40011400

080030b8 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030c2:	230f      	movs	r3, #15
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6839      	ldr	r1, [r7, #0]
 80030d0:	2200      	movs	r2, #0
 80030d2:	0018      	movs	r0, r3
 80030d4:	f000 ff6c 	bl	8003fb0 <TIM_CCxChannelCmd>

  switch (Channel)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b0c      	cmp	r3, #12
 80030dc:	d039      	beq.n	8003152 <HAL_TIM_IC_Stop_DMA+0x9a>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b0c      	cmp	r3, #12
 80030e2:	d844      	bhi.n	800316e <HAL_TIM_IC_Stop_DMA+0xb6>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d025      	beq.n	8003136 <HAL_TIM_IC_Stop_DMA+0x7e>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d83e      	bhi.n	800316e <HAL_TIM_IC_Stop_DMA+0xb6>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_TIM_IC_Stop_DMA+0x46>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d00e      	beq.n	800311a <HAL_TIM_IC_Stop_DMA+0x62>
 80030fc:	e037      	b.n	800316e <HAL_TIM_IC_Stop_DMA+0xb6>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4936      	ldr	r1, [pc, #216]	@ (80031e4 <HAL_TIM_IC_Stop_DMA+0x12c>)
 800310a:	400a      	ands	r2, r1
 800310c:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	0018      	movs	r0, r3
 8003114:	f7fe fac8 	bl	80016a8 <HAL_DMA_Abort_IT>
      break;
 8003118:	e02e      	b.n	8003178 <HAL_TIM_IC_Stop_DMA+0xc0>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4930      	ldr	r1, [pc, #192]	@ (80031e8 <HAL_TIM_IC_Stop_DMA+0x130>)
 8003126:	400a      	ands	r2, r1
 8003128:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312e:	0018      	movs	r0, r3
 8003130:	f7fe faba 	bl	80016a8 <HAL_DMA_Abort_IT>
      break;
 8003134:	e020      	b.n	8003178 <HAL_TIM_IC_Stop_DMA+0xc0>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	492a      	ldr	r1, [pc, #168]	@ (80031ec <HAL_TIM_IC_Stop_DMA+0x134>)
 8003142:	400a      	ands	r2, r1
 8003144:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314a:	0018      	movs	r0, r3
 800314c:	f7fe faac 	bl	80016a8 <HAL_DMA_Abort_IT>
      break;
 8003150:	e012      	b.n	8003178 <HAL_TIM_IC_Stop_DMA+0xc0>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4924      	ldr	r1, [pc, #144]	@ (80031f0 <HAL_TIM_IC_Stop_DMA+0x138>)
 800315e:	400a      	ands	r2, r1
 8003160:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003166:	0018      	movs	r0, r3
 8003168:	f7fe fa9e 	bl	80016a8 <HAL_DMA_Abort_IT>
      break;
 800316c:	e004      	b.n	8003178 <HAL_TIM_IC_Stop_DMA+0xc0>
    }

    default:
      status = HAL_ERROR;
 800316e:	230f      	movs	r3, #15
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
      break;
 8003176:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003178:	230f      	movs	r3, #15
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d129      	bne.n	80031d6 <HAL_TIM_IC_Stop_DMA+0x11e>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	4a1a      	ldr	r2, [pc, #104]	@ (80031f4 <HAL_TIM_IC_Stop_DMA+0x13c>)
 800318a:	4013      	ands	r3, r2
 800318c:	d107      	bne.n	800319e <HAL_TIM_IC_Stop_DMA+0xe6>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2101      	movs	r1, #1
 800319a:	438a      	bics	r2, r1
 800319c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d104      	bne.n	80031ae <HAL_TIM_IC_Stop_DMA+0xf6>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	223a      	movs	r2, #58	@ 0x3a
 80031a8:	2101      	movs	r1, #1
 80031aa:	5499      	strb	r1, [r3, r2]
 80031ac:	e013      	b.n	80031d6 <HAL_TIM_IC_Stop_DMA+0x11e>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d104      	bne.n	80031be <HAL_TIM_IC_Stop_DMA+0x106>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	223b      	movs	r2, #59	@ 0x3b
 80031b8:	2101      	movs	r1, #1
 80031ba:	5499      	strb	r1, [r3, r2]
 80031bc:	e00b      	b.n	80031d6 <HAL_TIM_IC_Stop_DMA+0x11e>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_IC_Stop_DMA+0x116>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	223c      	movs	r2, #60	@ 0x3c
 80031c8:	2101      	movs	r1, #1
 80031ca:	5499      	strb	r1, [r3, r2]
 80031cc:	e003      	b.n	80031d6 <HAL_TIM_IC_Stop_DMA+0x11e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	223d      	movs	r2, #61	@ 0x3d
 80031d2:	2101      	movs	r1, #1
 80031d4:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80031d6:	230f      	movs	r3, #15
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	781b      	ldrb	r3, [r3, #0]
}
 80031dc:	0018      	movs	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	b004      	add	sp, #16
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	fffffdff 	.word	0xfffffdff
 80031e8:	fffffbff 	.word	0xfffffbff
 80031ec:	fffff7ff 	.word	0xfffff7ff
 80031f0:	ffffefff 	.word	0xffffefff
 80031f4:	00001111 	.word	0x00001111

080031f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2202      	movs	r2, #2
 8003208:	4013      	ands	r3, r2
 800320a:	2b02      	cmp	r3, #2
 800320c:	d124      	bne.n	8003258 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	2202      	movs	r2, #2
 8003216:	4013      	ands	r3, r2
 8003218:	2b02      	cmp	r3, #2
 800321a:	d11d      	bne.n	8003258 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2203      	movs	r2, #3
 8003222:	4252      	negs	r2, r2
 8003224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2203      	movs	r2, #3
 8003234:	4013      	ands	r3, r2
 8003236:	d004      	beq.n	8003242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	0018      	movs	r0, r3
 800323c:	f000 fa9c 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
 8003240:	e007      	b.n	8003252 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	0018      	movs	r0, r3
 8003246:	f000 fa8f 	bl	8003768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	0018      	movs	r0, r3
 800324e:	f000 faa3 	bl	8003798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2204      	movs	r2, #4
 8003260:	4013      	ands	r3, r2
 8003262:	2b04      	cmp	r3, #4
 8003264:	d125      	bne.n	80032b2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2204      	movs	r2, #4
 800326e:	4013      	ands	r3, r2
 8003270:	2b04      	cmp	r3, #4
 8003272:	d11e      	bne.n	80032b2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2205      	movs	r2, #5
 800327a:	4252      	negs	r2, r2
 800327c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2202      	movs	r2, #2
 8003282:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	23c0      	movs	r3, #192	@ 0xc0
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4013      	ands	r3, r2
 8003290:	d004      	beq.n	800329c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	0018      	movs	r0, r3
 8003296:	f000 fa6f 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
 800329a:	e007      	b.n	80032ac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	0018      	movs	r0, r3
 80032a0:	f000 fa62 	bl	8003768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	0018      	movs	r0, r3
 80032a8:	f000 fa76 	bl	8003798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	2208      	movs	r2, #8
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d124      	bne.n	800330a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	2208      	movs	r2, #8
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d11d      	bne.n	800330a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2209      	movs	r2, #9
 80032d4:	4252      	negs	r2, r2
 80032d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2204      	movs	r2, #4
 80032dc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	2203      	movs	r2, #3
 80032e6:	4013      	ands	r3, r2
 80032e8:	d004      	beq.n	80032f4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	0018      	movs	r0, r3
 80032ee:	f000 fa43 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
 80032f2:	e007      	b.n	8003304 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 fa36 	bl	8003768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	0018      	movs	r0, r3
 8003300:	f000 fa4a 	bl	8003798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	2210      	movs	r2, #16
 8003312:	4013      	ands	r3, r2
 8003314:	2b10      	cmp	r3, #16
 8003316:	d125      	bne.n	8003364 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	2210      	movs	r2, #16
 8003320:	4013      	ands	r3, r2
 8003322:	2b10      	cmp	r3, #16
 8003324:	d11e      	bne.n	8003364 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2211      	movs	r2, #17
 800332c:	4252      	negs	r2, r2
 800332e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2208      	movs	r2, #8
 8003334:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	23c0      	movs	r3, #192	@ 0xc0
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4013      	ands	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	0018      	movs	r0, r3
 8003348:	f000 fa16 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
 800334c:	e007      	b.n	800335e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	0018      	movs	r0, r3
 8003352:	f000 fa09 	bl	8003768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	0018      	movs	r0, r3
 800335a:	f000 fa1d 	bl	8003798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2201      	movs	r2, #1
 800336c:	4013      	ands	r3, r2
 800336e:	2b01      	cmp	r3, #1
 8003370:	d10f      	bne.n	8003392 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	4013      	ands	r3, r2
 800337c:	2b01      	cmp	r3, #1
 800337e:	d108      	bne.n	8003392 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2202      	movs	r2, #2
 8003386:	4252      	negs	r2, r2
 8003388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	0018      	movs	r0, r3
 800338e:	f7fd fcf1 	bl	8000d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2240      	movs	r2, #64	@ 0x40
 800339a:	4013      	ands	r3, r2
 800339c:	2b40      	cmp	r3, #64	@ 0x40
 800339e:	d10f      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2240      	movs	r2, #64	@ 0x40
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b40      	cmp	r3, #64	@ 0x40
 80033ac:	d108      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2241      	movs	r2, #65	@ 0x41
 80033b4:	4252      	negs	r2, r2
 80033b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 f9f4 	bl	80037a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033c0:	46c0      	nop			@ (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b002      	add	sp, #8
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033d4:	2317      	movs	r3, #23
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2238      	movs	r2, #56	@ 0x38
 80033e0:	5c9b      	ldrb	r3, [r3, r2]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_TIM_OC_ConfigChannel+0x22>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e042      	b.n	8003470 <HAL_TIM_OC_ConfigChannel+0xa8>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2238      	movs	r2, #56	@ 0x38
 80033ee:	2101      	movs	r1, #1
 80033f0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b0c      	cmp	r3, #12
 80033f6:	d027      	beq.n	8003448 <HAL_TIM_OC_ConfigChannel+0x80>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b0c      	cmp	r3, #12
 80033fc:	d82c      	bhi.n	8003458 <HAL_TIM_OC_ConfigChannel+0x90>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b08      	cmp	r3, #8
 8003402:	d019      	beq.n	8003438 <HAL_TIM_OC_ConfigChannel+0x70>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b08      	cmp	r3, #8
 8003408:	d826      	bhi.n	8003458 <HAL_TIM_OC_ConfigChannel+0x90>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_TIM_OC_ConfigChannel+0x50>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b04      	cmp	r3, #4
 8003414:	d008      	beq.n	8003428 <HAL_TIM_OC_ConfigChannel+0x60>
 8003416:	e01f      	b.n	8003458 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	0011      	movs	r1, r2
 8003420:	0018      	movs	r0, r3
 8003422:	f000 fb03 	bl	8003a2c <TIM_OC1_SetConfig>
      break;
 8003426:	e01c      	b.n	8003462 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	0011      	movs	r1, r2
 8003430:	0018      	movs	r0, r3
 8003432:	f000 fb37 	bl	8003aa4 <TIM_OC2_SetConfig>
      break;
 8003436:	e014      	b.n	8003462 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	0011      	movs	r1, r2
 8003440:	0018      	movs	r0, r3
 8003442:	f000 fb71 	bl	8003b28 <TIM_OC3_SetConfig>
      break;
 8003446:	e00c      	b.n	8003462 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	0011      	movs	r1, r2
 8003450:	0018      	movs	r0, r3
 8003452:	f000 fba9 	bl	8003ba8 <TIM_OC4_SetConfig>
      break;
 8003456:	e004      	b.n	8003462 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8003458:	2317      	movs	r3, #23
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	2201      	movs	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]
      break;
 8003460:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2238      	movs	r2, #56	@ 0x38
 8003466:	2100      	movs	r1, #0
 8003468:	5499      	strb	r1, [r3, r2]

  return status;
 800346a:	2317      	movs	r3, #23
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	781b      	ldrb	r3, [r3, #0]
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	b006      	add	sp, #24
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003484:	2317      	movs	r3, #23
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2238      	movs	r2, #56	@ 0x38
 8003490:	5c9b      	ldrb	r3, [r3, r2]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_TIM_IC_ConfigChannel+0x22>
 8003496:	2302      	movs	r3, #2
 8003498:	e08c      	b.n	80035b4 <HAL_TIM_IC_ConfigChannel+0x13c>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2238      	movs	r2, #56	@ 0x38
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d11b      	bne.n	80034e0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80034b8:	f000 fbbc 	bl	8003c34 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	210c      	movs	r1, #12
 80034c8:	438a      	bics	r2, r1
 80034ca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6999      	ldr	r1, [r3, #24]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	619a      	str	r2, [r3, #24]
 80034de:	e062      	b.n	80035a6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d11c      	bne.n	8003520 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80034f6:	f000 fc27 	bl	8003d48 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699a      	ldr	r2, [r3, #24]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	492d      	ldr	r1, [pc, #180]	@ (80035bc <HAL_TIM_IC_ConfigChannel+0x144>)
 8003506:	400a      	ands	r2, r1
 8003508:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6999      	ldr	r1, [r3, #24]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	021a      	lsls	r2, r3, #8
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	619a      	str	r2, [r3, #24]
 800351e:	e042      	b.n	80035a6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b08      	cmp	r3, #8
 8003524:	d11b      	bne.n	800355e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003536:	f000 fc7b 	bl	8003e30 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	210c      	movs	r1, #12
 8003546:	438a      	bics	r2, r1
 8003548:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69d9      	ldr	r1, [r3, #28]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	61da      	str	r2, [r3, #28]
 800355c:	e023      	b.n	80035a6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	d11c      	bne.n	800359e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003574:	f000 fc9c 	bl	8003eb0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69da      	ldr	r2, [r3, #28]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	490e      	ldr	r1, [pc, #56]	@ (80035bc <HAL_TIM_IC_ConfigChannel+0x144>)
 8003584:	400a      	ands	r2, r1
 8003586:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69d9      	ldr	r1, [r3, #28]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	021a      	lsls	r2, r3, #8
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	61da      	str	r2, [r3, #28]
 800359c:	e003      	b.n	80035a6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800359e:	2317      	movs	r3, #23
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	2201      	movs	r2, #1
 80035a4:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2238      	movs	r2, #56	@ 0x38
 80035aa:	2100      	movs	r1, #0
 80035ac:	5499      	strb	r1, [r3, r2]

  return status;
 80035ae:	2317      	movs	r3, #23
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	781b      	ldrb	r3, [r3, #0]
}
 80035b4:	0018      	movs	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b006      	add	sp, #24
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	fffff3ff 	.word	0xfffff3ff

080035c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ca:	230f      	movs	r3, #15
 80035cc:	18fb      	adds	r3, r7, r3
 80035ce:	2200      	movs	r2, #0
 80035d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2238      	movs	r2, #56	@ 0x38
 80035d6:	5c9b      	ldrb	r3, [r3, r2]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_TIM_ConfigClockSource+0x20>
 80035dc:	2302      	movs	r3, #2
 80035de:	e0bc      	b.n	800375a <HAL_TIM_ConfigClockSource+0x19a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2238      	movs	r2, #56	@ 0x38
 80035e4:	2101      	movs	r1, #1
 80035e6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2239      	movs	r2, #57	@ 0x39
 80035ec:	2102      	movs	r1, #2
 80035ee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2277      	movs	r2, #119	@ 0x77
 80035fc:	4393      	bics	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4a58      	ldr	r2, [pc, #352]	@ (8003764 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003604:	4013      	ands	r3, r2
 8003606:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2280      	movs	r2, #128	@ 0x80
 8003616:	0192      	lsls	r2, r2, #6
 8003618:	4293      	cmp	r3, r2
 800361a:	d040      	beq.n	800369e <HAL_TIM_ConfigClockSource+0xde>
 800361c:	2280      	movs	r2, #128	@ 0x80
 800361e:	0192      	lsls	r2, r2, #6
 8003620:	4293      	cmp	r3, r2
 8003622:	d900      	bls.n	8003626 <HAL_TIM_ConfigClockSource+0x66>
 8003624:	e088      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x178>
 8003626:	2280      	movs	r2, #128	@ 0x80
 8003628:	0152      	lsls	r2, r2, #5
 800362a:	4293      	cmp	r3, r2
 800362c:	d100      	bne.n	8003630 <HAL_TIM_ConfigClockSource+0x70>
 800362e:	e088      	b.n	8003742 <HAL_TIM_ConfigClockSource+0x182>
 8003630:	2280      	movs	r2, #128	@ 0x80
 8003632:	0152      	lsls	r2, r2, #5
 8003634:	4293      	cmp	r3, r2
 8003636:	d900      	bls.n	800363a <HAL_TIM_ConfigClockSource+0x7a>
 8003638:	e07e      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x178>
 800363a:	2b70      	cmp	r3, #112	@ 0x70
 800363c:	d018      	beq.n	8003670 <HAL_TIM_ConfigClockSource+0xb0>
 800363e:	d900      	bls.n	8003642 <HAL_TIM_ConfigClockSource+0x82>
 8003640:	e07a      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x178>
 8003642:	2b60      	cmp	r3, #96	@ 0x60
 8003644:	d04f      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0x126>
 8003646:	d900      	bls.n	800364a <HAL_TIM_ConfigClockSource+0x8a>
 8003648:	e076      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x178>
 800364a:	2b50      	cmp	r3, #80	@ 0x50
 800364c:	d03b      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0x106>
 800364e:	d900      	bls.n	8003652 <HAL_TIM_ConfigClockSource+0x92>
 8003650:	e072      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x178>
 8003652:	2b40      	cmp	r3, #64	@ 0x40
 8003654:	d057      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0x146>
 8003656:	d900      	bls.n	800365a <HAL_TIM_ConfigClockSource+0x9a>
 8003658:	e06e      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x178>
 800365a:	2b30      	cmp	r3, #48	@ 0x30
 800365c:	d063      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x166>
 800365e:	d86b      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x178>
 8003660:	2b20      	cmp	r3, #32
 8003662:	d060      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x166>
 8003664:	d868      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x178>
 8003666:	2b00      	cmp	r3, #0
 8003668:	d05d      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x166>
 800366a:	2b10      	cmp	r3, #16
 800366c:	d05b      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x166>
 800366e:	e063      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003680:	f000 fc76 	bl	8003f70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2277      	movs	r2, #119	@ 0x77
 8003690:	4313      	orrs	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	609a      	str	r2, [r3, #8]
      break;
 800369c:	e052      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036ae:	f000 fc5f 	bl	8003f70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2180      	movs	r1, #128	@ 0x80
 80036be:	01c9      	lsls	r1, r1, #7
 80036c0:	430a      	orrs	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
      break;
 80036c4:	e03e      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d2:	001a      	movs	r2, r3
 80036d4:	f000 fb0a 	bl	8003cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2150      	movs	r1, #80	@ 0x50
 80036de:	0018      	movs	r0, r3
 80036e0:	f000 fc2c 	bl	8003f3c <TIM_ITRx_SetConfig>
      break;
 80036e4:	e02e      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036f2:	001a      	movs	r2, r3
 80036f4:	f000 fb6a 	bl	8003dcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2160      	movs	r1, #96	@ 0x60
 80036fe:	0018      	movs	r0, r3
 8003700:	f000 fc1c 	bl	8003f3c <TIM_ITRx_SetConfig>
      break;
 8003704:	e01e      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003712:	001a      	movs	r2, r3
 8003714:	f000 faea 	bl	8003cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2140      	movs	r1, #64	@ 0x40
 800371e:	0018      	movs	r0, r3
 8003720:	f000 fc0c 	bl	8003f3c <TIM_ITRx_SetConfig>
      break;
 8003724:	e00e      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	0019      	movs	r1, r3
 8003730:	0010      	movs	r0, r2
 8003732:	f000 fc03 	bl	8003f3c <TIM_ITRx_SetConfig>
      break;
 8003736:	e005      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003738:	230f      	movs	r3, #15
 800373a:	18fb      	adds	r3, r7, r3
 800373c:	2201      	movs	r2, #1
 800373e:	701a      	strb	r2, [r3, #0]
      break;
 8003740:	e000      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003742:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2239      	movs	r2, #57	@ 0x39
 8003748:	2101      	movs	r1, #1
 800374a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2238      	movs	r2, #56	@ 0x38
 8003750:	2100      	movs	r1, #0
 8003752:	5499      	strb	r1, [r3, r2]

  return status;
 8003754:	230f      	movs	r3, #15
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	781b      	ldrb	r3, [r3, #0]
}
 800375a:	0018      	movs	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	b004      	add	sp, #16
 8003760:	bd80      	pop	{r7, pc}
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	ffff00ff 	.word	0xffff00ff

08003768 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003770:	46c0      	nop			@ (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b002      	add	sp, #8
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003780:	46c0      	nop			@ (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003790:	46c0      	nop			@ (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	b002      	add	sp, #8
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037a0:	46c0      	nop			@ (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b002      	add	sp, #8
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037b0:	46c0      	nop			@ (mov r8, r8)
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b002      	add	sp, #8
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80037c0:	46c0      	nop			@ (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b002      	add	sp, #8
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d107      	bne.n	80037f0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	223a      	movs	r2, #58	@ 0x3a
 80037ea:	2101      	movs	r1, #1
 80037ec:	5499      	strb	r1, [r3, r2]
 80037ee:	e02a      	b.n	8003846 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d107      	bne.n	800380a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2202      	movs	r2, #2
 80037fe:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	223b      	movs	r2, #59	@ 0x3b
 8003804:	2101      	movs	r1, #1
 8003806:	5499      	strb	r1, [r3, r2]
 8003808:	e01d      	b.n	8003846 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	d107      	bne.n	8003824 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2204      	movs	r2, #4
 8003818:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	223c      	movs	r2, #60	@ 0x3c
 800381e:	2101      	movs	r1, #1
 8003820:	5499      	strb	r1, [r3, r2]
 8003822:	e010      	b.n	8003846 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	429a      	cmp	r2, r3
 800382c:	d107      	bne.n	800383e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2208      	movs	r2, #8
 8003832:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	223d      	movs	r2, #61	@ 0x3d
 8003838:	2101      	movs	r1, #1
 800383a:	5499      	strb	r1, [r3, r2]
 800383c:	e003      	b.n	8003846 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2239      	movs	r2, #57	@ 0x39
 8003842:	2101      	movs	r1, #1
 8003844:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	0018      	movs	r0, r3
 800384a:	f7ff ffb5 	bl	80037b8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	761a      	strb	r2, [r3, #24]
}
 8003854:	46c0      	nop			@ (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b004      	add	sp, #16
 800385a:	bd80      	pop	{r7, pc}

0800385c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	429a      	cmp	r2, r3
 8003872:	d10b      	bne.n	800388c <TIM_DMACaptureCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d136      	bne.n	80038f0 <TIM_DMACaptureCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	223a      	movs	r2, #58	@ 0x3a
 8003886:	2101      	movs	r1, #1
 8003888:	5499      	strb	r1, [r3, r2]
 800388a:	e031      	b.n	80038f0 <TIM_DMACaptureCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	429a      	cmp	r2, r3
 8003894:	d10b      	bne.n	80038ae <TIM_DMACaptureCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2202      	movs	r2, #2
 800389a:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d125      	bne.n	80038f0 <TIM_DMACaptureCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	223b      	movs	r2, #59	@ 0x3b
 80038a8:	2101      	movs	r1, #1
 80038aa:	5499      	strb	r1, [r3, r2]
 80038ac:	e020      	b.n	80038f0 <TIM_DMACaptureCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d10b      	bne.n	80038d0 <TIM_DMACaptureCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2204      	movs	r2, #4
 80038bc:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <TIM_DMACaptureCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	223c      	movs	r2, #60	@ 0x3c
 80038ca:	2101      	movs	r1, #1
 80038cc:	5499      	strb	r1, [r3, r2]
 80038ce:	e00f      	b.n	80038f0 <TIM_DMACaptureCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d10a      	bne.n	80038f0 <TIM_DMACaptureCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2208      	movs	r2, #8
 80038de:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d103      	bne.n	80038f0 <TIM_DMACaptureCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	223d      	movs	r2, #61	@ 0x3d
 80038ec:	2101      	movs	r1, #1
 80038ee:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f7ff ff40 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	761a      	strb	r2, [r3, #24]
}
 80038fe:	46c0      	nop			@ (mov r8, r8)
 8003900:	46bd      	mov	sp, r7
 8003902:	b004      	add	sp, #16
 8003904:	bd80      	pop	{r7, pc}

08003906 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003912:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	429a      	cmp	r2, r3
 800391c:	d103      	bne.n	8003926 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	761a      	strb	r2, [r3, #24]
 8003924:	e019      	b.n	800395a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	429a      	cmp	r2, r3
 800392e:	d103      	bne.n	8003938 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2202      	movs	r2, #2
 8003934:	761a      	strb	r2, [r3, #24]
 8003936:	e010      	b.n	800395a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	429a      	cmp	r2, r3
 8003940:	d103      	bne.n	800394a <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2204      	movs	r2, #4
 8003946:	761a      	strb	r2, [r3, #24]
 8003948:	e007      	b.n	800395a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	d102      	bne.n	800395a <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2208      	movs	r2, #8
 8003958:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	0018      	movs	r0, r3
 800395e:	f7ff ff13 	bl	8003788 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	761a      	strb	r2, [r3, #24]
}
 8003968:	46c0      	nop			@ (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b004      	add	sp, #16
 800396e:	bd80      	pop	{r7, pc}

08003970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	2380      	movs	r3, #128	@ 0x80
 8003984:	05db      	lsls	r3, r3, #23
 8003986:	429a      	cmp	r2, r3
 8003988:	d00b      	beq.n	80039a2 <TIM_Base_SetConfig+0x32>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a23      	ldr	r2, [pc, #140]	@ (8003a1c <TIM_Base_SetConfig+0xac>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d007      	beq.n	80039a2 <TIM_Base_SetConfig+0x32>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a22      	ldr	r2, [pc, #136]	@ (8003a20 <TIM_Base_SetConfig+0xb0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d003      	beq.n	80039a2 <TIM_Base_SetConfig+0x32>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a21      	ldr	r2, [pc, #132]	@ (8003a24 <TIM_Base_SetConfig+0xb4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d108      	bne.n	80039b4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2270      	movs	r2, #112	@ 0x70
 80039a6:	4393      	bics	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	2380      	movs	r3, #128	@ 0x80
 80039b8:	05db      	lsls	r3, r3, #23
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d00b      	beq.n	80039d6 <TIM_Base_SetConfig+0x66>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a16      	ldr	r2, [pc, #88]	@ (8003a1c <TIM_Base_SetConfig+0xac>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <TIM_Base_SetConfig+0x66>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a15      	ldr	r2, [pc, #84]	@ (8003a20 <TIM_Base_SetConfig+0xb0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d003      	beq.n	80039d6 <TIM_Base_SetConfig+0x66>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a14      	ldr	r2, [pc, #80]	@ (8003a24 <TIM_Base_SetConfig+0xb4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d108      	bne.n	80039e8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4a13      	ldr	r2, [pc, #76]	@ (8003a28 <TIM_Base_SetConfig+0xb8>)
 80039da:	4013      	ands	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2280      	movs	r2, #128	@ 0x80
 80039ec:	4393      	bics	r3, r2
 80039ee:	001a      	movs	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	615a      	str	r2, [r3, #20]
}
 8003a14:	46c0      	nop			@ (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b004      	add	sp, #16
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40000400 	.word	0x40000400
 8003a20:	40010800 	.word	0x40010800
 8003a24:	40011400 	.word	0x40011400
 8003a28:	fffffcff 	.word	0xfffffcff

08003a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	4393      	bics	r3, r2
 8003a3e:	001a      	movs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2270      	movs	r2, #112	@ 0x70
 8003a5a:	4393      	bics	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2203      	movs	r2, #3
 8003a62:	4393      	bics	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2202      	movs	r2, #2
 8003a74:	4393      	bics	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	621a      	str	r2, [r3, #32]
}
 8003a9c:	46c0      	nop			@ (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b006      	add	sp, #24
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	4393      	bics	r3, r2
 8003ab6:	001a      	movs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4a13      	ldr	r2, [pc, #76]	@ (8003b20 <TIM_OC2_SetConfig+0x7c>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4a12      	ldr	r2, [pc, #72]	@ (8003b24 <TIM_OC2_SetConfig+0x80>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2220      	movs	r2, #32
 8003aee:	4393      	bics	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	621a      	str	r2, [r3, #32]
}
 8003b18:	46c0      	nop			@ (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b006      	add	sp, #24
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	ffff8fff 	.word	0xffff8fff
 8003b24:	fffffcff 	.word	0xfffffcff

08003b28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba0 <TIM_OC3_SetConfig+0x78>)
 8003b38:	401a      	ands	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2270      	movs	r2, #112	@ 0x70
 8003b54:	4393      	bics	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	4393      	bics	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ba4 <TIM_OC3_SetConfig+0x7c>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	621a      	str	r2, [r3, #32]
}
 8003b98:	46c0      	nop			@ (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b006      	add	sp, #24
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	fffffeff 	.word	0xfffffeff
 8003ba4:	fffffdff 	.word	0xfffffdff

08003ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c24 <TIM_OC4_SetConfig+0x7c>)
 8003bb8:	401a      	ands	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a15      	ldr	r2, [pc, #84]	@ (8003c28 <TIM_OC4_SetConfig+0x80>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4a14      	ldr	r2, [pc, #80]	@ (8003c2c <TIM_OC4_SetConfig+0x84>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	4a10      	ldr	r2, [pc, #64]	@ (8003c30 <TIM_OC4_SetConfig+0x88>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	031b      	lsls	r3, r3, #12
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	621a      	str	r2, [r3, #32]
}
 8003c1a:	46c0      	nop			@ (mov r8, r8)
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b006      	add	sp, #24
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	ffffefff 	.word	0xffffefff
 8003c28:	ffff8fff 	.word	0xffff8fff
 8003c2c:	fffffcff 	.word	0xfffffcff
 8003c30:	ffffdfff 	.word	0xffffdfff

08003c34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	2201      	movs	r2, #1
 8003c48:	4393      	bics	r3, r2
 8003c4a:	001a      	movs	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	2380      	movs	r3, #128	@ 0x80
 8003c60:	05db      	lsls	r3, r3, #23
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d00b      	beq.n	8003c7e <TIM_TI1_SetConfig+0x4a>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce0 <TIM_TI1_SetConfig+0xac>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d007      	beq.n	8003c7e <TIM_TI1_SetConfig+0x4a>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce4 <TIM_TI1_SetConfig+0xb0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d003      	beq.n	8003c7e <TIM_TI1_SetConfig+0x4a>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce8 <TIM_TI1_SetConfig+0xb4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d101      	bne.n	8003c82 <TIM_TI1_SetConfig+0x4e>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <TIM_TI1_SetConfig+0x50>
 8003c82:	2300      	movs	r3, #0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	4393      	bics	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e003      	b.n	8003ca2 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	22f0      	movs	r2, #240	@ 0xf0
 8003ca6:	4393      	bics	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	22ff      	movs	r2, #255	@ 0xff
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	220a      	movs	r2, #10
 8003cbc:	4393      	bics	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	220a      	movs	r2, #10
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	621a      	str	r2, [r3, #32]
}
 8003cd8:	46c0      	nop			@ (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b006      	add	sp, #24
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40000400 	.word	0x40000400
 8003ce4:	40010800 	.word	0x40010800
 8003ce8:	40011400 	.word	0x40011400

08003cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	2201      	movs	r2, #1
 8003d04:	4393      	bics	r3, r2
 8003d06:	001a      	movs	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	22f0      	movs	r2, #240	@ 0xf0
 8003d16:	4393      	bics	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	220a      	movs	r2, #10
 8003d28:	4393      	bics	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	621a      	str	r2, [r3, #32]
}
 8003d40:	46c0      	nop			@ (mov r8, r8)
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b006      	add	sp, #24
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	2210      	movs	r2, #16
 8003d5c:	4393      	bics	r3, r2
 8003d5e:	001a      	movs	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	4a14      	ldr	r2, [pc, #80]	@ (8003dc4 <TIM_TI2_SetConfig+0x7c>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	4a10      	ldr	r2, [pc, #64]	@ (8003dc8 <TIM_TI2_SetConfig+0x80>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	031b      	lsls	r3, r3, #12
 8003d8e:	041b      	lsls	r3, r3, #16
 8003d90:	0c1b      	lsrs	r3, r3, #16
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	22a0      	movs	r2, #160	@ 0xa0
 8003d9c:	4393      	bics	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	22a0      	movs	r2, #160	@ 0xa0
 8003da6:	4013      	ands	r3, r2
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	621a      	str	r2, [r3, #32]
}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b006      	add	sp, #24
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	fffffcff 	.word	0xfffffcff
 8003dc8:	ffff0fff 	.word	0xffff0fff

08003dcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	2210      	movs	r2, #16
 8003dde:	4393      	bics	r3, r2
 8003de0:	001a      	movs	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	4a0d      	ldr	r2, [pc, #52]	@ (8003e2c <TIM_TI2_ConfigInputStage+0x60>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	031b      	lsls	r3, r3, #12
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	22a0      	movs	r2, #160	@ 0xa0
 8003e08:	4393      	bics	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	621a      	str	r2, [r3, #32]
}
 8003e22:	46c0      	nop			@ (mov r8, r8)
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b006      	add	sp, #24
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	46c0      	nop			@ (mov r8, r8)
 8003e2c:	ffff0fff 	.word	0xffff0fff

08003e30 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	4a19      	ldr	r2, [pc, #100]	@ (8003ea8 <TIM_TI3_SetConfig+0x78>)
 8003e44:	401a      	ands	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2203      	movs	r2, #3
 8003e5a:	4393      	bics	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	22f0      	movs	r2, #240	@ 0xf0
 8003e6a:	4393      	bics	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	22ff      	movs	r2, #255	@ 0xff
 8003e74:	4013      	ands	r3, r2
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4a0b      	ldr	r2, [pc, #44]	@ (8003eac <TIM_TI3_SetConfig+0x7c>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	021a      	lsls	r2, r3, #8
 8003e88:	23a0      	movs	r3, #160	@ 0xa0
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	621a      	str	r2, [r3, #32]
}
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b006      	add	sp, #24
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	fffffeff 	.word	0xfffffeff
 8003eac:	fffff5ff 	.word	0xfffff5ff

08003eb0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f2c <TIM_TI4_SetConfig+0x7c>)
 8003ec4:	401a      	ands	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	4a15      	ldr	r2, [pc, #84]	@ (8003f30 <TIM_TI4_SetConfig+0x80>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	4a12      	ldr	r2, [pc, #72]	@ (8003f34 <TIM_TI4_SetConfig+0x84>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	031b      	lsls	r3, r3, #12
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	0c1b      	lsrs	r3, r3, #16
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4a0d      	ldr	r2, [pc, #52]	@ (8003f38 <TIM_TI4_SetConfig+0x88>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	031a      	lsls	r2, r3, #12
 8003f0a:	23a0      	movs	r3, #160	@ 0xa0
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	4013      	ands	r3, r2
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	46c0      	nop			@ (mov r8, r8)
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b006      	add	sp, #24
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	46c0      	nop			@ (mov r8, r8)
 8003f2c:	ffffefff 	.word	0xffffefff
 8003f30:	fffffcff 	.word	0xfffffcff
 8003f34:	ffff0fff 	.word	0xffff0fff
 8003f38:	ffff5fff 	.word	0xffff5fff

08003f3c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2270      	movs	r2, #112	@ 0x70
 8003f50:	4393      	bics	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	2207      	movs	r2, #7
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	609a      	str	r2, [r3, #8]
}
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	b004      	add	sp, #16
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	4a09      	ldr	r2, [pc, #36]	@ (8003fac <TIM_ETR_SetConfig+0x3c>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	021a      	lsls	r2, r3, #8
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	609a      	str	r2, [r3, #8]
}
 8003fa4:	46c0      	nop			@ (mov r8, r8)
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b006      	add	sp, #24
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	ffff00ff 	.word	0xffff00ff

08003fb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	221f      	movs	r2, #31
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	0013      	movs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	43d2      	mvns	r2, r2
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a1a      	ldr	r2, [r3, #32]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	211f      	movs	r1, #31
 8003fe0:	400b      	ands	r3, r1
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4099      	lsls	r1, r3
 8003fe6:	000b      	movs	r3, r1
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	621a      	str	r2, [r3, #32]
}
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	b006      	add	sp, #24
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2238      	movs	r2, #56	@ 0x38
 8004006:	5c9b      	ldrb	r3, [r3, r2]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800400c:	2302      	movs	r3, #2
 800400e:	e047      	b.n	80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2238      	movs	r2, #56	@ 0x38
 8004014:	2101      	movs	r1, #1
 8004016:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2239      	movs	r2, #57	@ 0x39
 800401c:	2102      	movs	r1, #2
 800401e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2270      	movs	r2, #112	@ 0x70
 8004034:	4393      	bics	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	2380      	movs	r3, #128	@ 0x80
 8004050:	05db      	lsls	r3, r3, #23
 8004052:	429a      	cmp	r2, r3
 8004054:	d00e      	beq.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a13      	ldr	r2, [pc, #76]	@ (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a11      	ldr	r2, [pc, #68]	@ (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a10      	ldr	r2, [pc, #64]	@ (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d10c      	bne.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2280      	movs	r2, #128	@ 0x80
 8004078:	4393      	bics	r3, r2
 800407a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	4313      	orrs	r3, r2
 8004084:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2239      	movs	r2, #57	@ 0x39
 8004092:	2101      	movs	r1, #1
 8004094:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2238      	movs	r2, #56	@ 0x38
 800409a:	2100      	movs	r1, #0
 800409c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	0018      	movs	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b004      	add	sp, #16
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40000400 	.word	0x40000400
 80040ac:	40010800 	.word	0x40010800
 80040b0:	40011400 	.word	0x40011400

080040b4 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2238      	movs	r2, #56	@ 0x38
 80040c2:	5c9b      	ldrb	r3, [r3, r2]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_TIMEx_RemapConfig+0x18>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e00c      	b.n	80040e6 <HAL_TIMEx_RemapConfig+0x32>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2238      	movs	r2, #56	@ 0x38
 80040d0:	2101      	movs	r1, #1
 80040d2:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2238      	movs	r2, #56	@ 0x38
 80040e0:	2100      	movs	r1, #0
 80040e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	0018      	movs	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b002      	add	sp, #8
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e044      	b.n	800418c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d107      	bne.n	800411a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2278      	movs	r2, #120	@ 0x78
 800410e:	2100      	movs	r1, #0
 8004110:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	0018      	movs	r0, r3
 8004116:	f7fc fdb7 	bl	8000c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2224      	movs	r2, #36	@ 0x24
 800411e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2101      	movs	r1, #1
 800412c:	438a      	bics	r2, r1
 800412e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	0018      	movs	r0, r3
 8004134:	f000 f8d0 	bl	80042d8 <UART_SetConfig>
 8004138:	0003      	movs	r3, r0
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e024      	b.n	800418c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	0018      	movs	r0, r3
 800414e:	f000 fb61 	bl	8004814 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	490d      	ldr	r1, [pc, #52]	@ (8004194 <HAL_UART_Init+0xa4>)
 800415e:	400a      	ands	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	212a      	movs	r1, #42	@ 0x2a
 800416e:	438a      	bics	r2, r1
 8004170:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2101      	movs	r1, #1
 800417e:	430a      	orrs	r2, r1
 8004180:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	0018      	movs	r0, r3
 8004186:	f000 fbf9 	bl	800497c <UART_CheckIdleState>
 800418a:	0003      	movs	r3, r0
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b002      	add	sp, #8
 8004192:	bd80      	pop	{r7, pc}
 8004194:	ffffb7ff 	.word	0xffffb7ff

08004198 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	@ 0x28
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	1dbb      	adds	r3, r7, #6
 80041a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d000      	beq.n	80041b2 <HAL_UART_Transmit+0x1a>
 80041b0:	e08c      	b.n	80042cc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_UART_Transmit+0x28>
 80041b8:	1dbb      	adds	r3, r7, #6
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e084      	b.n	80042ce <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	2380      	movs	r3, #128	@ 0x80
 80041ca:	015b      	lsls	r3, r3, #5
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d109      	bne.n	80041e4 <HAL_UART_Transmit+0x4c>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d105      	bne.n	80041e4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2201      	movs	r2, #1
 80041dc:	4013      	ands	r3, r2
 80041de:	d001      	beq.n	80041e4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e074      	b.n	80042ce <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2284      	movs	r2, #132	@ 0x84
 80041e8:	2100      	movs	r1, #0
 80041ea:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2221      	movs	r2, #33	@ 0x21
 80041f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041f2:	f7fd f86f 	bl	80012d4 <HAL_GetTick>
 80041f6:	0003      	movs	r3, r0
 80041f8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	1dba      	adds	r2, r7, #6
 80041fe:	2150      	movs	r1, #80	@ 0x50
 8004200:	8812      	ldrh	r2, [r2, #0]
 8004202:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1dba      	adds	r2, r7, #6
 8004208:	2152      	movs	r1, #82	@ 0x52
 800420a:	8812      	ldrh	r2, [r2, #0]
 800420c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	2380      	movs	r3, #128	@ 0x80
 8004214:	015b      	lsls	r3, r3, #5
 8004216:	429a      	cmp	r2, r3
 8004218:	d108      	bne.n	800422c <HAL_UART_Transmit+0x94>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d104      	bne.n	800422c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	e003      	b.n	8004234 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004230:	2300      	movs	r3, #0
 8004232:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004234:	e02f      	b.n	8004296 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	0013      	movs	r3, r2
 8004240:	2200      	movs	r2, #0
 8004242:	2180      	movs	r1, #128	@ 0x80
 8004244:	f000 fc42 	bl	8004acc <UART_WaitOnFlagUntilTimeout>
 8004248:	1e03      	subs	r3, r0, #0
 800424a:	d004      	beq.n	8004256 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e03b      	b.n	80042ce <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10b      	bne.n	8004274 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	001a      	movs	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	05d2      	lsls	r2, r2, #23
 8004268:	0dd2      	lsrs	r2, r2, #23
 800426a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	3302      	adds	r3, #2
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	e007      	b.n	8004284 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	781a      	ldrb	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	3301      	adds	r3, #1
 8004282:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2252      	movs	r2, #82	@ 0x52
 8004288:	5a9b      	ldrh	r3, [r3, r2]
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b299      	uxth	r1, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2252      	movs	r2, #82	@ 0x52
 8004294:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2252      	movs	r2, #82	@ 0x52
 800429a:	5a9b      	ldrh	r3, [r3, r2]
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1c9      	bne.n	8004236 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	0013      	movs	r3, r2
 80042ac:	2200      	movs	r2, #0
 80042ae:	2140      	movs	r1, #64	@ 0x40
 80042b0:	f000 fc0c 	bl	8004acc <UART_WaitOnFlagUntilTimeout>
 80042b4:	1e03      	subs	r3, r0, #0
 80042b6:	d004      	beq.n	80042c2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e005      	b.n	80042ce <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	e000      	b.n	80042ce <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80042cc:	2302      	movs	r3, #2
  }
}
 80042ce:	0018      	movs	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b008      	add	sp, #32
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d8:	b5b0      	push	{r4, r5, r7, lr}
 80042da:	b08e      	sub	sp, #56	@ 0x38
 80042dc:	af00      	add	r7, sp, #0
 80042de:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042e0:	231a      	movs	r3, #26
 80042e2:	2218      	movs	r2, #24
 80042e4:	189b      	adds	r3, r3, r2
 80042e6:	19db      	adds	r3, r3, r7
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	431a      	orrs	r2, r3
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	4313      	orrs	r3, r2
 8004302:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4ac3      	ldr	r2, [pc, #780]	@ (8004618 <UART_SetConfig+0x340>)
 800430c:	4013      	ands	r3, r2
 800430e:	0019      	movs	r1, r3
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004316:	430a      	orrs	r2, r1
 8004318:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4abe      	ldr	r2, [pc, #760]	@ (800461c <UART_SetConfig+0x344>)
 8004322:	4013      	ands	r3, r2
 8004324:	0019      	movs	r1, r3
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4ab8      	ldr	r2, [pc, #736]	@ (8004620 <UART_SetConfig+0x348>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004348:	4313      	orrs	r3, r2
 800434a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	4ab4      	ldr	r2, [pc, #720]	@ (8004624 <UART_SetConfig+0x34c>)
 8004354:	4013      	ands	r3, r2
 8004356:	0019      	movs	r1, r3
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800435e:	430a      	orrs	r2, r1
 8004360:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4ab0      	ldr	r2, [pc, #704]	@ (8004628 <UART_SetConfig+0x350>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d131      	bne.n	80043d0 <UART_SetConfig+0xf8>
 800436c:	4baf      	ldr	r3, [pc, #700]	@ (800462c <UART_SetConfig+0x354>)
 800436e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004370:	2203      	movs	r2, #3
 8004372:	4013      	ands	r3, r2
 8004374:	2b03      	cmp	r3, #3
 8004376:	d01d      	beq.n	80043b4 <UART_SetConfig+0xdc>
 8004378:	d823      	bhi.n	80043c2 <UART_SetConfig+0xea>
 800437a:	2b02      	cmp	r3, #2
 800437c:	d00c      	beq.n	8004398 <UART_SetConfig+0xc0>
 800437e:	d820      	bhi.n	80043c2 <UART_SetConfig+0xea>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <UART_SetConfig+0xb2>
 8004384:	2b01      	cmp	r3, #1
 8004386:	d00e      	beq.n	80043a6 <UART_SetConfig+0xce>
 8004388:	e01b      	b.n	80043c2 <UART_SetConfig+0xea>
 800438a:	231b      	movs	r3, #27
 800438c:	2218      	movs	r2, #24
 800438e:	189b      	adds	r3, r3, r2
 8004390:	19db      	adds	r3, r3, r7
 8004392:	2201      	movs	r2, #1
 8004394:	701a      	strb	r2, [r3, #0]
 8004396:	e0b4      	b.n	8004502 <UART_SetConfig+0x22a>
 8004398:	231b      	movs	r3, #27
 800439a:	2218      	movs	r2, #24
 800439c:	189b      	adds	r3, r3, r2
 800439e:	19db      	adds	r3, r3, r7
 80043a0:	2202      	movs	r2, #2
 80043a2:	701a      	strb	r2, [r3, #0]
 80043a4:	e0ad      	b.n	8004502 <UART_SetConfig+0x22a>
 80043a6:	231b      	movs	r3, #27
 80043a8:	2218      	movs	r2, #24
 80043aa:	189b      	adds	r3, r3, r2
 80043ac:	19db      	adds	r3, r3, r7
 80043ae:	2204      	movs	r2, #4
 80043b0:	701a      	strb	r2, [r3, #0]
 80043b2:	e0a6      	b.n	8004502 <UART_SetConfig+0x22a>
 80043b4:	231b      	movs	r3, #27
 80043b6:	2218      	movs	r2, #24
 80043b8:	189b      	adds	r3, r3, r2
 80043ba:	19db      	adds	r3, r3, r7
 80043bc:	2208      	movs	r2, #8
 80043be:	701a      	strb	r2, [r3, #0]
 80043c0:	e09f      	b.n	8004502 <UART_SetConfig+0x22a>
 80043c2:	231b      	movs	r3, #27
 80043c4:	2218      	movs	r2, #24
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	19db      	adds	r3, r3, r7
 80043ca:	2210      	movs	r2, #16
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	e098      	b.n	8004502 <UART_SetConfig+0x22a>
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a96      	ldr	r2, [pc, #600]	@ (8004630 <UART_SetConfig+0x358>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d131      	bne.n	800443e <UART_SetConfig+0x166>
 80043da:	4b94      	ldr	r3, [pc, #592]	@ (800462c <UART_SetConfig+0x354>)
 80043dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043de:	220c      	movs	r2, #12
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b0c      	cmp	r3, #12
 80043e4:	d01d      	beq.n	8004422 <UART_SetConfig+0x14a>
 80043e6:	d823      	bhi.n	8004430 <UART_SetConfig+0x158>
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d00c      	beq.n	8004406 <UART_SetConfig+0x12e>
 80043ec:	d820      	bhi.n	8004430 <UART_SetConfig+0x158>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <UART_SetConfig+0x120>
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d00e      	beq.n	8004414 <UART_SetConfig+0x13c>
 80043f6:	e01b      	b.n	8004430 <UART_SetConfig+0x158>
 80043f8:	231b      	movs	r3, #27
 80043fa:	2218      	movs	r2, #24
 80043fc:	189b      	adds	r3, r3, r2
 80043fe:	19db      	adds	r3, r3, r7
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
 8004404:	e07d      	b.n	8004502 <UART_SetConfig+0x22a>
 8004406:	231b      	movs	r3, #27
 8004408:	2218      	movs	r2, #24
 800440a:	189b      	adds	r3, r3, r2
 800440c:	19db      	adds	r3, r3, r7
 800440e:	2202      	movs	r2, #2
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	e076      	b.n	8004502 <UART_SetConfig+0x22a>
 8004414:	231b      	movs	r3, #27
 8004416:	2218      	movs	r2, #24
 8004418:	189b      	adds	r3, r3, r2
 800441a:	19db      	adds	r3, r3, r7
 800441c:	2204      	movs	r2, #4
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	e06f      	b.n	8004502 <UART_SetConfig+0x22a>
 8004422:	231b      	movs	r3, #27
 8004424:	2218      	movs	r2, #24
 8004426:	189b      	adds	r3, r3, r2
 8004428:	19db      	adds	r3, r3, r7
 800442a:	2208      	movs	r2, #8
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e068      	b.n	8004502 <UART_SetConfig+0x22a>
 8004430:	231b      	movs	r3, #27
 8004432:	2218      	movs	r2, #24
 8004434:	189b      	adds	r3, r3, r2
 8004436:	19db      	adds	r3, r3, r7
 8004438:	2210      	movs	r2, #16
 800443a:	701a      	strb	r2, [r3, #0]
 800443c:	e061      	b.n	8004502 <UART_SetConfig+0x22a>
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a7c      	ldr	r2, [pc, #496]	@ (8004634 <UART_SetConfig+0x35c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d106      	bne.n	8004456 <UART_SetConfig+0x17e>
 8004448:	231b      	movs	r3, #27
 800444a:	2218      	movs	r2, #24
 800444c:	189b      	adds	r3, r3, r2
 800444e:	19db      	adds	r3, r3, r7
 8004450:	2200      	movs	r2, #0
 8004452:	701a      	strb	r2, [r3, #0]
 8004454:	e055      	b.n	8004502 <UART_SetConfig+0x22a>
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a77      	ldr	r2, [pc, #476]	@ (8004638 <UART_SetConfig+0x360>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d106      	bne.n	800446e <UART_SetConfig+0x196>
 8004460:	231b      	movs	r3, #27
 8004462:	2218      	movs	r2, #24
 8004464:	189b      	adds	r3, r3, r2
 8004466:	19db      	adds	r3, r3, r7
 8004468:	2200      	movs	r2, #0
 800446a:	701a      	strb	r2, [r3, #0]
 800446c:	e049      	b.n	8004502 <UART_SetConfig+0x22a>
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a6b      	ldr	r2, [pc, #428]	@ (8004620 <UART_SetConfig+0x348>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d13e      	bne.n	80044f6 <UART_SetConfig+0x21e>
 8004478:	4b6c      	ldr	r3, [pc, #432]	@ (800462c <UART_SetConfig+0x354>)
 800447a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800447c:	23c0      	movs	r3, #192	@ 0xc0
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	4013      	ands	r3, r2
 8004482:	22c0      	movs	r2, #192	@ 0xc0
 8004484:	0112      	lsls	r2, r2, #4
 8004486:	4293      	cmp	r3, r2
 8004488:	d027      	beq.n	80044da <UART_SetConfig+0x202>
 800448a:	22c0      	movs	r2, #192	@ 0xc0
 800448c:	0112      	lsls	r2, r2, #4
 800448e:	4293      	cmp	r3, r2
 8004490:	d82a      	bhi.n	80044e8 <UART_SetConfig+0x210>
 8004492:	2280      	movs	r2, #128	@ 0x80
 8004494:	0112      	lsls	r2, r2, #4
 8004496:	4293      	cmp	r3, r2
 8004498:	d011      	beq.n	80044be <UART_SetConfig+0x1e6>
 800449a:	2280      	movs	r2, #128	@ 0x80
 800449c:	0112      	lsls	r2, r2, #4
 800449e:	4293      	cmp	r3, r2
 80044a0:	d822      	bhi.n	80044e8 <UART_SetConfig+0x210>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d004      	beq.n	80044b0 <UART_SetConfig+0x1d8>
 80044a6:	2280      	movs	r2, #128	@ 0x80
 80044a8:	00d2      	lsls	r2, r2, #3
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00e      	beq.n	80044cc <UART_SetConfig+0x1f4>
 80044ae:	e01b      	b.n	80044e8 <UART_SetConfig+0x210>
 80044b0:	231b      	movs	r3, #27
 80044b2:	2218      	movs	r2, #24
 80044b4:	189b      	adds	r3, r3, r2
 80044b6:	19db      	adds	r3, r3, r7
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	e021      	b.n	8004502 <UART_SetConfig+0x22a>
 80044be:	231b      	movs	r3, #27
 80044c0:	2218      	movs	r2, #24
 80044c2:	189b      	adds	r3, r3, r2
 80044c4:	19db      	adds	r3, r3, r7
 80044c6:	2202      	movs	r2, #2
 80044c8:	701a      	strb	r2, [r3, #0]
 80044ca:	e01a      	b.n	8004502 <UART_SetConfig+0x22a>
 80044cc:	231b      	movs	r3, #27
 80044ce:	2218      	movs	r2, #24
 80044d0:	189b      	adds	r3, r3, r2
 80044d2:	19db      	adds	r3, r3, r7
 80044d4:	2204      	movs	r2, #4
 80044d6:	701a      	strb	r2, [r3, #0]
 80044d8:	e013      	b.n	8004502 <UART_SetConfig+0x22a>
 80044da:	231b      	movs	r3, #27
 80044dc:	2218      	movs	r2, #24
 80044de:	189b      	adds	r3, r3, r2
 80044e0:	19db      	adds	r3, r3, r7
 80044e2:	2208      	movs	r2, #8
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	e00c      	b.n	8004502 <UART_SetConfig+0x22a>
 80044e8:	231b      	movs	r3, #27
 80044ea:	2218      	movs	r2, #24
 80044ec:	189b      	adds	r3, r3, r2
 80044ee:	19db      	adds	r3, r3, r7
 80044f0:	2210      	movs	r2, #16
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	e005      	b.n	8004502 <UART_SetConfig+0x22a>
 80044f6:	231b      	movs	r3, #27
 80044f8:	2218      	movs	r2, #24
 80044fa:	189b      	adds	r3, r3, r2
 80044fc:	19db      	adds	r3, r3, r7
 80044fe:	2210      	movs	r2, #16
 8004500:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a46      	ldr	r2, [pc, #280]	@ (8004620 <UART_SetConfig+0x348>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d000      	beq.n	800450e <UART_SetConfig+0x236>
 800450c:	e09a      	b.n	8004644 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800450e:	231b      	movs	r3, #27
 8004510:	2218      	movs	r2, #24
 8004512:	189b      	adds	r3, r3, r2
 8004514:	19db      	adds	r3, r3, r7
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d01d      	beq.n	8004558 <UART_SetConfig+0x280>
 800451c:	dc20      	bgt.n	8004560 <UART_SetConfig+0x288>
 800451e:	2b04      	cmp	r3, #4
 8004520:	d015      	beq.n	800454e <UART_SetConfig+0x276>
 8004522:	dc1d      	bgt.n	8004560 <UART_SetConfig+0x288>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <UART_SetConfig+0x256>
 8004528:	2b02      	cmp	r3, #2
 800452a:	d005      	beq.n	8004538 <UART_SetConfig+0x260>
 800452c:	e018      	b.n	8004560 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800452e:	f7fe f97f 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8004532:	0003      	movs	r3, r0
 8004534:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004536:	e01c      	b.n	8004572 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004538:	4b3c      	ldr	r3, [pc, #240]	@ (800462c <UART_SetConfig+0x354>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2210      	movs	r2, #16
 800453e:	4013      	ands	r3, r2
 8004540:	d002      	beq.n	8004548 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004542:	4b3e      	ldr	r3, [pc, #248]	@ (800463c <UART_SetConfig+0x364>)
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004546:	e014      	b.n	8004572 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004548:	4b3d      	ldr	r3, [pc, #244]	@ (8004640 <UART_SetConfig+0x368>)
 800454a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800454c:	e011      	b.n	8004572 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800454e:	f7fe f8bf 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8004552:	0003      	movs	r3, r0
 8004554:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004556:	e00c      	b.n	8004572 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004558:	2380      	movs	r3, #128	@ 0x80
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800455e:	e008      	b.n	8004572 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004564:	231a      	movs	r3, #26
 8004566:	2218      	movs	r2, #24
 8004568:	189b      	adds	r3, r3, r2
 800456a:	19db      	adds	r3, r3, r7
 800456c:	2201      	movs	r2, #1
 800456e:	701a      	strb	r2, [r3, #0]
        break;
 8004570:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004574:	2b00      	cmp	r3, #0
 8004576:	d100      	bne.n	800457a <UART_SetConfig+0x2a2>
 8004578:	e133      	b.n	80047e2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	0013      	movs	r3, r2
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	189b      	adds	r3, r3, r2
 8004584:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004586:	429a      	cmp	r2, r3
 8004588:	d305      	bcc.n	8004596 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004590:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004592:	429a      	cmp	r2, r3
 8004594:	d906      	bls.n	80045a4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004596:	231a      	movs	r3, #26
 8004598:	2218      	movs	r2, #24
 800459a:	189b      	adds	r3, r3, r2
 800459c:	19db      	adds	r3, r3, r7
 800459e:	2201      	movs	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	e11e      	b.n	80047e2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	6939      	ldr	r1, [r7, #16]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	000b      	movs	r3, r1
 80045b2:	0e1b      	lsrs	r3, r3, #24
 80045b4:	0010      	movs	r0, r2
 80045b6:	0205      	lsls	r5, r0, #8
 80045b8:	431d      	orrs	r5, r3
 80045ba:	000b      	movs	r3, r1
 80045bc:	021c      	lsls	r4, r3, #8
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	68b8      	ldr	r0, [r7, #8]
 80045cc:	68f9      	ldr	r1, [r7, #12]
 80045ce:	1900      	adds	r0, r0, r4
 80045d0:	4169      	adcs	r1, r5
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	2300      	movs	r3, #0
 80045da:	607b      	str	r3, [r7, #4]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f7fb fe28 	bl	8000234 <__aeabi_uldivmod>
 80045e4:	0002      	movs	r2, r0
 80045e6:	000b      	movs	r3, r1
 80045e8:	0013      	movs	r3, r2
 80045ea:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045ee:	23c0      	movs	r3, #192	@ 0xc0
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d309      	bcc.n	800460a <UART_SetConfig+0x332>
 80045f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045f8:	2380      	movs	r3, #128	@ 0x80
 80045fa:	035b      	lsls	r3, r3, #13
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d204      	bcs.n	800460a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004606:	60da      	str	r2, [r3, #12]
 8004608:	e0eb      	b.n	80047e2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800460a:	231a      	movs	r3, #26
 800460c:	2218      	movs	r2, #24
 800460e:	189b      	adds	r3, r3, r2
 8004610:	19db      	adds	r3, r3, r7
 8004612:	2201      	movs	r2, #1
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	e0e4      	b.n	80047e2 <UART_SetConfig+0x50a>
 8004618:	efff69f3 	.word	0xefff69f3
 800461c:	ffffcfff 	.word	0xffffcfff
 8004620:	40004800 	.word	0x40004800
 8004624:	fffff4ff 	.word	0xfffff4ff
 8004628:	40013800 	.word	0x40013800
 800462c:	40021000 	.word	0x40021000
 8004630:	40004400 	.word	0x40004400
 8004634:	40004c00 	.word	0x40004c00
 8004638:	40005000 	.word	0x40005000
 800463c:	003d0900 	.word	0x003d0900
 8004640:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	2380      	movs	r3, #128	@ 0x80
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	429a      	cmp	r2, r3
 800464e:	d000      	beq.n	8004652 <UART_SetConfig+0x37a>
 8004650:	e070      	b.n	8004734 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8004652:	231b      	movs	r3, #27
 8004654:	2218      	movs	r2, #24
 8004656:	189b      	adds	r3, r3, r2
 8004658:	19db      	adds	r3, r3, r7
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d822      	bhi.n	80046a6 <UART_SetConfig+0x3ce>
 8004660:	009a      	lsls	r2, r3, #2
 8004662:	4b67      	ldr	r3, [pc, #412]	@ (8004800 <UART_SetConfig+0x528>)
 8004664:	18d3      	adds	r3, r2, r3
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800466a:	f7fe f8e1 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 800466e:	0003      	movs	r3, r0
 8004670:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004672:	e021      	b.n	80046b8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004674:	f7fe f8f2 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 8004678:	0003      	movs	r3, r0
 800467a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800467c:	e01c      	b.n	80046b8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800467e:	4b61      	ldr	r3, [pc, #388]	@ (8004804 <UART_SetConfig+0x52c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2210      	movs	r2, #16
 8004684:	4013      	ands	r3, r2
 8004686:	d002      	beq.n	800468e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004688:	4b5f      	ldr	r3, [pc, #380]	@ (8004808 <UART_SetConfig+0x530>)
 800468a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800468c:	e014      	b.n	80046b8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800468e:	4b5f      	ldr	r3, [pc, #380]	@ (800480c <UART_SetConfig+0x534>)
 8004690:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004692:	e011      	b.n	80046b8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004694:	f7fe f81c 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8004698:	0003      	movs	r3, r0
 800469a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800469c:	e00c      	b.n	80046b8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800469e:	2380      	movs	r3, #128	@ 0x80
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80046a4:	e008      	b.n	80046b8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80046aa:	231a      	movs	r3, #26
 80046ac:	2218      	movs	r2, #24
 80046ae:	189b      	adds	r3, r3, r2
 80046b0:	19db      	adds	r3, r3, r7
 80046b2:	2201      	movs	r2, #1
 80046b4:	701a      	strb	r2, [r3, #0]
        break;
 80046b6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d100      	bne.n	80046c0 <UART_SetConfig+0x3e8>
 80046be:	e090      	b.n	80047e2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c2:	005a      	lsls	r2, r3, #1
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	085b      	lsrs	r3, r3, #1
 80046ca:	18d2      	adds	r2, r2, r3
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	0019      	movs	r1, r3
 80046d2:	0010      	movs	r0, r2
 80046d4:	f7fb fd22 	bl	800011c <__udivsi3>
 80046d8:	0003      	movs	r3, r0
 80046da:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046de:	2b0f      	cmp	r3, #15
 80046e0:	d921      	bls.n	8004726 <UART_SetConfig+0x44e>
 80046e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046e4:	2380      	movs	r3, #128	@ 0x80
 80046e6:	025b      	lsls	r3, r3, #9
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d21c      	bcs.n	8004726 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	200e      	movs	r0, #14
 80046f2:	2418      	movs	r4, #24
 80046f4:	1903      	adds	r3, r0, r4
 80046f6:	19db      	adds	r3, r3, r7
 80046f8:	210f      	movs	r1, #15
 80046fa:	438a      	bics	r2, r1
 80046fc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	b29b      	uxth	r3, r3
 8004704:	2207      	movs	r2, #7
 8004706:	4013      	ands	r3, r2
 8004708:	b299      	uxth	r1, r3
 800470a:	1903      	adds	r3, r0, r4
 800470c:	19db      	adds	r3, r3, r7
 800470e:	1902      	adds	r2, r0, r4
 8004710:	19d2      	adds	r2, r2, r7
 8004712:	8812      	ldrh	r2, [r2, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	1902      	adds	r2, r0, r4
 800471e:	19d2      	adds	r2, r2, r7
 8004720:	8812      	ldrh	r2, [r2, #0]
 8004722:	60da      	str	r2, [r3, #12]
 8004724:	e05d      	b.n	80047e2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004726:	231a      	movs	r3, #26
 8004728:	2218      	movs	r2, #24
 800472a:	189b      	adds	r3, r3, r2
 800472c:	19db      	adds	r3, r3, r7
 800472e:	2201      	movs	r2, #1
 8004730:	701a      	strb	r2, [r3, #0]
 8004732:	e056      	b.n	80047e2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004734:	231b      	movs	r3, #27
 8004736:	2218      	movs	r2, #24
 8004738:	189b      	adds	r3, r3, r2
 800473a:	19db      	adds	r3, r3, r7
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b08      	cmp	r3, #8
 8004740:	d822      	bhi.n	8004788 <UART_SetConfig+0x4b0>
 8004742:	009a      	lsls	r2, r3, #2
 8004744:	4b32      	ldr	r3, [pc, #200]	@ (8004810 <UART_SetConfig+0x538>)
 8004746:	18d3      	adds	r3, r2, r3
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800474c:	f7fe f870 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8004750:	0003      	movs	r3, r0
 8004752:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004754:	e021      	b.n	800479a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004756:	f7fe f881 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 800475a:	0003      	movs	r3, r0
 800475c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800475e:	e01c      	b.n	800479a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004760:	4b28      	ldr	r3, [pc, #160]	@ (8004804 <UART_SetConfig+0x52c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2210      	movs	r2, #16
 8004766:	4013      	ands	r3, r2
 8004768:	d002      	beq.n	8004770 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800476a:	4b27      	ldr	r3, [pc, #156]	@ (8004808 <UART_SetConfig+0x530>)
 800476c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800476e:	e014      	b.n	800479a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004770:	4b26      	ldr	r3, [pc, #152]	@ (800480c <UART_SetConfig+0x534>)
 8004772:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004774:	e011      	b.n	800479a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004776:	f7fd ffab 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 800477a:	0003      	movs	r3, r0
 800477c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800477e:	e00c      	b.n	800479a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004780:	2380      	movs	r3, #128	@ 0x80
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004786:	e008      	b.n	800479a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800478c:	231a      	movs	r3, #26
 800478e:	2218      	movs	r2, #24
 8004790:	189b      	adds	r3, r3, r2
 8004792:	19db      	adds	r3, r3, r7
 8004794:	2201      	movs	r2, #1
 8004796:	701a      	strb	r2, [r3, #0]
        break;
 8004798:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800479a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d020      	beq.n	80047e2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	085a      	lsrs	r2, r3, #1
 80047a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a8:	18d2      	adds	r2, r2, r3
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	0019      	movs	r1, r3
 80047b0:	0010      	movs	r0, r2
 80047b2:	f7fb fcb3 	bl	800011c <__udivsi3>
 80047b6:	0003      	movs	r3, r0
 80047b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047bc:	2b0f      	cmp	r3, #15
 80047be:	d90a      	bls.n	80047d6 <UART_SetConfig+0x4fe>
 80047c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047c2:	2380      	movs	r3, #128	@ 0x80
 80047c4:	025b      	lsls	r3, r3, #9
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d205      	bcs.n	80047d6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60da      	str	r2, [r3, #12]
 80047d4:	e005      	b.n	80047e2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80047d6:	231a      	movs	r3, #26
 80047d8:	2218      	movs	r2, #24
 80047da:	189b      	adds	r3, r3, r2
 80047dc:	19db      	adds	r3, r3, r7
 80047de:	2201      	movs	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	2200      	movs	r2, #0
 80047e6:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	2200      	movs	r2, #0
 80047ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80047ee:	231a      	movs	r3, #26
 80047f0:	2218      	movs	r2, #24
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	19db      	adds	r3, r3, r7
 80047f6:	781b      	ldrb	r3, [r3, #0]
}
 80047f8:	0018      	movs	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b00e      	add	sp, #56	@ 0x38
 80047fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004800:	08005ccc 	.word	0x08005ccc
 8004804:	40021000 	.word	0x40021000
 8004808:	003d0900 	.word	0x003d0900
 800480c:	00f42400 	.word	0x00f42400
 8004810:	08005cf0 	.word	0x08005cf0

08004814 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	2201      	movs	r2, #1
 8004822:	4013      	ands	r3, r2
 8004824:	d00b      	beq.n	800483e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	4a4a      	ldr	r2, [pc, #296]	@ (8004958 <UART_AdvFeatureConfig+0x144>)
 800482e:	4013      	ands	r3, r2
 8004830:	0019      	movs	r1, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	2202      	movs	r2, #2
 8004844:	4013      	ands	r3, r2
 8004846:	d00b      	beq.n	8004860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	4a43      	ldr	r2, [pc, #268]	@ (800495c <UART_AdvFeatureConfig+0x148>)
 8004850:	4013      	ands	r3, r2
 8004852:	0019      	movs	r1, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	2204      	movs	r2, #4
 8004866:	4013      	ands	r3, r2
 8004868:	d00b      	beq.n	8004882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	4a3b      	ldr	r2, [pc, #236]	@ (8004960 <UART_AdvFeatureConfig+0x14c>)
 8004872:	4013      	ands	r3, r2
 8004874:	0019      	movs	r1, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004886:	2208      	movs	r2, #8
 8004888:	4013      	ands	r3, r2
 800488a:	d00b      	beq.n	80048a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	4a34      	ldr	r2, [pc, #208]	@ (8004964 <UART_AdvFeatureConfig+0x150>)
 8004894:	4013      	ands	r3, r2
 8004896:	0019      	movs	r1, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	2210      	movs	r2, #16
 80048aa:	4013      	ands	r3, r2
 80048ac:	d00b      	beq.n	80048c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004968 <UART_AdvFeatureConfig+0x154>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	0019      	movs	r1, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ca:	2220      	movs	r2, #32
 80048cc:	4013      	ands	r3, r2
 80048ce:	d00b      	beq.n	80048e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	4a25      	ldr	r2, [pc, #148]	@ (800496c <UART_AdvFeatureConfig+0x158>)
 80048d8:	4013      	ands	r3, r2
 80048da:	0019      	movs	r1, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	2240      	movs	r2, #64	@ 0x40
 80048ee:	4013      	ands	r3, r2
 80048f0:	d01d      	beq.n	800492e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004970 <UART_AdvFeatureConfig+0x15c>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	0019      	movs	r1, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800490e:	2380      	movs	r3, #128	@ 0x80
 8004910:	035b      	lsls	r3, r3, #13
 8004912:	429a      	cmp	r2, r3
 8004914:	d10b      	bne.n	800492e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	4a15      	ldr	r2, [pc, #84]	@ (8004974 <UART_AdvFeatureConfig+0x160>)
 800491e:	4013      	ands	r3, r2
 8004920:	0019      	movs	r1, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004932:	2280      	movs	r2, #128	@ 0x80
 8004934:	4013      	ands	r3, r2
 8004936:	d00b      	beq.n	8004950 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4a0e      	ldr	r2, [pc, #56]	@ (8004978 <UART_AdvFeatureConfig+0x164>)
 8004940:	4013      	ands	r3, r2
 8004942:	0019      	movs	r1, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	605a      	str	r2, [r3, #4]
  }
}
 8004950:	46c0      	nop			@ (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b002      	add	sp, #8
 8004956:	bd80      	pop	{r7, pc}
 8004958:	fffdffff 	.word	0xfffdffff
 800495c:	fffeffff 	.word	0xfffeffff
 8004960:	fffbffff 	.word	0xfffbffff
 8004964:	ffff7fff 	.word	0xffff7fff
 8004968:	ffffefff 	.word	0xffffefff
 800496c:	ffffdfff 	.word	0xffffdfff
 8004970:	ffefffff 	.word	0xffefffff
 8004974:	ff9fffff 	.word	0xff9fffff
 8004978:	fff7ffff 	.word	0xfff7ffff

0800497c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b092      	sub	sp, #72	@ 0x48
 8004980:	af02      	add	r7, sp, #8
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2284      	movs	r2, #132	@ 0x84
 8004988:	2100      	movs	r1, #0
 800498a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800498c:	f7fc fca2 	bl	80012d4 <HAL_GetTick>
 8004990:	0003      	movs	r3, r0
 8004992:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2208      	movs	r2, #8
 800499c:	4013      	ands	r3, r2
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d12c      	bne.n	80049fc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049a4:	2280      	movs	r2, #128	@ 0x80
 80049a6:	0391      	lsls	r1, r2, #14
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	4a46      	ldr	r2, [pc, #280]	@ (8004ac4 <UART_CheckIdleState+0x148>)
 80049ac:	9200      	str	r2, [sp, #0]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f000 f88c 	bl	8004acc <UART_WaitOnFlagUntilTimeout>
 80049b4:	1e03      	subs	r3, r0, #0
 80049b6:	d021      	beq.n	80049fc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049b8:	f3ef 8310 	mrs	r3, PRIMASK
 80049bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80049be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049c2:	2301      	movs	r3, #1
 80049c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c8:	f383 8810 	msr	PRIMASK, r3
}
 80049cc:	46c0      	nop			@ (mov r8, r8)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2180      	movs	r1, #128	@ 0x80
 80049da:	438a      	bics	r2, r1
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e4:	f383 8810 	msr	PRIMASK, r3
}
 80049e8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2278      	movs	r2, #120	@ 0x78
 80049f4:	2100      	movs	r1, #0
 80049f6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e05f      	b.n	8004abc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2204      	movs	r2, #4
 8004a04:	4013      	ands	r3, r2
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d146      	bne.n	8004a98 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a0c:	2280      	movs	r2, #128	@ 0x80
 8004a0e:	03d1      	lsls	r1, r2, #15
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	4a2c      	ldr	r2, [pc, #176]	@ (8004ac4 <UART_CheckIdleState+0x148>)
 8004a14:	9200      	str	r2, [sp, #0]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f000 f858 	bl	8004acc <UART_WaitOnFlagUntilTimeout>
 8004a1c:	1e03      	subs	r3, r0, #0
 8004a1e:	d03b      	beq.n	8004a98 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a20:	f3ef 8310 	mrs	r3, PRIMASK
 8004a24:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a26:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f383 8810 	msr	PRIMASK, r3
}
 8004a34:	46c0      	nop			@ (mov r8, r8)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4921      	ldr	r1, [pc, #132]	@ (8004ac8 <UART_CheckIdleState+0x14c>)
 8004a42:	400a      	ands	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f383 8810 	msr	PRIMASK, r3
}
 8004a50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a52:	f3ef 8310 	mrs	r3, PRIMASK
 8004a56:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a58:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f383 8810 	msr	PRIMASK, r3
}
 8004a66:	46c0      	nop			@ (mov r8, r8)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2101      	movs	r1, #1
 8004a74:	438a      	bics	r2, r1
 8004a76:	609a      	str	r2, [r3, #8]
 8004a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	f383 8810 	msr	PRIMASK, r3
}
 8004a82:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2280      	movs	r2, #128	@ 0x80
 8004a88:	2120      	movs	r1, #32
 8004a8a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2278      	movs	r2, #120	@ 0x78
 8004a90:	2100      	movs	r1, #0
 8004a92:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e011      	b.n	8004abc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2280      	movs	r2, #128	@ 0x80
 8004aa2:	2120      	movs	r1, #32
 8004aa4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2278      	movs	r2, #120	@ 0x78
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	0018      	movs	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b010      	add	sp, #64	@ 0x40
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	01ffffff 	.word	0x01ffffff
 8004ac8:	fffffedf 	.word	0xfffffedf

08004acc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	1dfb      	adds	r3, r7, #7
 8004ada:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004adc:	e04b      	b.n	8004b76 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	d048      	beq.n	8004b76 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae4:	f7fc fbf6 	bl	80012d4 <HAL_GetTick>
 8004ae8:	0002      	movs	r2, r0
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d302      	bcc.n	8004afa <UART_WaitOnFlagUntilTimeout+0x2e>
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e04b      	b.n	8004b96 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2204      	movs	r2, #4
 8004b06:	4013      	ands	r3, r2
 8004b08:	d035      	beq.n	8004b76 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	2208      	movs	r2, #8
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d111      	bne.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	0018      	movs	r0, r3
 8004b24:	f000 f83c 	bl	8004ba0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2284      	movs	r2, #132	@ 0x84
 8004b2c:	2108      	movs	r1, #8
 8004b2e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2278      	movs	r2, #120	@ 0x78
 8004b34:	2100      	movs	r1, #0
 8004b36:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e02c      	b.n	8004b96 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69da      	ldr	r2, [r3, #28]
 8004b42:	2380      	movs	r3, #128	@ 0x80
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	401a      	ands	r2, r3
 8004b48:	2380      	movs	r3, #128	@ 0x80
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d112      	bne.n	8004b76 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2280      	movs	r2, #128	@ 0x80
 8004b56:	0112      	lsls	r2, r2, #4
 8004b58:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f000 f81f 	bl	8004ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2284      	movs	r2, #132	@ 0x84
 8004b66:	2120      	movs	r1, #32
 8004b68:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2278      	movs	r2, #120	@ 0x78
 8004b6e:	2100      	movs	r1, #0
 8004b70:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e00f      	b.n	8004b96 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	425a      	negs	r2, r3
 8004b86:	4153      	adcs	r3, r2
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	001a      	movs	r2, r3
 8004b8c:	1dfb      	adds	r3, r7, #7
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d0a4      	beq.n	8004ade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	0018      	movs	r0, r3
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	b004      	add	sp, #16
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08e      	sub	sp, #56	@ 0x38
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bac:	617b      	str	r3, [r7, #20]
  return(result);
 8004bae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f383 8810 	msr	PRIMASK, r3
}
 8004bbc:	46c0      	nop			@ (mov r8, r8)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4926      	ldr	r1, [pc, #152]	@ (8004c64 <UART_EndRxTransfer+0xc4>)
 8004bca:	400a      	ands	r2, r1
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f383 8810 	msr	PRIMASK, r3
}
 8004bd8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bda:	f3ef 8310 	mrs	r3, PRIMASK
 8004bde:	623b      	str	r3, [r7, #32]
  return(result);
 8004be0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004be4:	2301      	movs	r3, #1
 8004be6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	f383 8810 	msr	PRIMASK, r3
}
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	438a      	bics	r2, r1
 8004bfe:	609a      	str	r2, [r3, #8]
 8004c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c06:	f383 8810 	msr	PRIMASK, r3
}
 8004c0a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d118      	bne.n	8004c46 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c14:	f3ef 8310 	mrs	r3, PRIMASK
 8004c18:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c1e:	2301      	movs	r3, #1
 8004c20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f383 8810 	msr	PRIMASK, r3
}
 8004c28:	46c0      	nop			@ (mov r8, r8)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2110      	movs	r1, #16
 8004c36:	438a      	bics	r2, r1
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f383 8810 	msr	PRIMASK, r3
}
 8004c44:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2280      	movs	r2, #128	@ 0x80
 8004c4a:	2120      	movs	r1, #32
 8004c4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c5a:	46c0      	nop			@ (mov r8, r8)
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b00e      	add	sp, #56	@ 0x38
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	fffffedf 	.word	0xfffffedf

08004c68 <std>:
 8004c68:	2300      	movs	r3, #0
 8004c6a:	b510      	push	{r4, lr}
 8004c6c:	0004      	movs	r4, r0
 8004c6e:	6003      	str	r3, [r0, #0]
 8004c70:	6043      	str	r3, [r0, #4]
 8004c72:	6083      	str	r3, [r0, #8]
 8004c74:	8181      	strh	r1, [r0, #12]
 8004c76:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c78:	81c2      	strh	r2, [r0, #14]
 8004c7a:	6103      	str	r3, [r0, #16]
 8004c7c:	6143      	str	r3, [r0, #20]
 8004c7e:	6183      	str	r3, [r0, #24]
 8004c80:	0019      	movs	r1, r3
 8004c82:	2208      	movs	r2, #8
 8004c84:	305c      	adds	r0, #92	@ 0x5c
 8004c86:	f000 fa0f 	bl	80050a8 <memset>
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb8 <std+0x50>)
 8004c8c:	6224      	str	r4, [r4, #32]
 8004c8e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c90:	4b0a      	ldr	r3, [pc, #40]	@ (8004cbc <std+0x54>)
 8004c92:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c94:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc0 <std+0x58>)
 8004c96:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c98:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc4 <std+0x5c>)
 8004c9a:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <std+0x60>)
 8004c9e:	429c      	cmp	r4, r3
 8004ca0:	d005      	beq.n	8004cae <std+0x46>
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <std+0x64>)
 8004ca4:	429c      	cmp	r4, r3
 8004ca6:	d002      	beq.n	8004cae <std+0x46>
 8004ca8:	4b09      	ldr	r3, [pc, #36]	@ (8004cd0 <std+0x68>)
 8004caa:	429c      	cmp	r4, r3
 8004cac:	d103      	bne.n	8004cb6 <std+0x4e>
 8004cae:	0020      	movs	r0, r4
 8004cb0:	3058      	adds	r0, #88	@ 0x58
 8004cb2:	f000 fa79 	bl	80051a8 <__retarget_lock_init_recursive>
 8004cb6:	bd10      	pop	{r4, pc}
 8004cb8:	08004ed1 	.word	0x08004ed1
 8004cbc:	08004ef9 	.word	0x08004ef9
 8004cc0:	08004f31 	.word	0x08004f31
 8004cc4:	08004f5d 	.word	0x08004f5d
 8004cc8:	20002580 	.word	0x20002580
 8004ccc:	200025e8 	.word	0x200025e8
 8004cd0:	20002650 	.word	0x20002650

08004cd4 <stdio_exit_handler>:
 8004cd4:	b510      	push	{r4, lr}
 8004cd6:	4a03      	ldr	r2, [pc, #12]	@ (8004ce4 <stdio_exit_handler+0x10>)
 8004cd8:	4903      	ldr	r1, [pc, #12]	@ (8004ce8 <stdio_exit_handler+0x14>)
 8004cda:	4804      	ldr	r0, [pc, #16]	@ (8004cec <stdio_exit_handler+0x18>)
 8004cdc:	f000 f86c 	bl	8004db8 <_fwalk_sglue>
 8004ce0:	bd10      	pop	{r4, pc}
 8004ce2:	46c0      	nop			@ (mov r8, r8)
 8004ce4:	2000000c 	.word	0x2000000c
 8004ce8:	08005a39 	.word	0x08005a39
 8004cec:	2000001c 	.word	0x2000001c

08004cf0 <cleanup_stdio>:
 8004cf0:	6841      	ldr	r1, [r0, #4]
 8004cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <cleanup_stdio+0x30>)
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	0004      	movs	r4, r0
 8004cf8:	4299      	cmp	r1, r3
 8004cfa:	d001      	beq.n	8004d00 <cleanup_stdio+0x10>
 8004cfc:	f000 fe9c 	bl	8005a38 <_fflush_r>
 8004d00:	68a1      	ldr	r1, [r4, #8]
 8004d02:	4b08      	ldr	r3, [pc, #32]	@ (8004d24 <cleanup_stdio+0x34>)
 8004d04:	4299      	cmp	r1, r3
 8004d06:	d002      	beq.n	8004d0e <cleanup_stdio+0x1e>
 8004d08:	0020      	movs	r0, r4
 8004d0a:	f000 fe95 	bl	8005a38 <_fflush_r>
 8004d0e:	68e1      	ldr	r1, [r4, #12]
 8004d10:	4b05      	ldr	r3, [pc, #20]	@ (8004d28 <cleanup_stdio+0x38>)
 8004d12:	4299      	cmp	r1, r3
 8004d14:	d002      	beq.n	8004d1c <cleanup_stdio+0x2c>
 8004d16:	0020      	movs	r0, r4
 8004d18:	f000 fe8e 	bl	8005a38 <_fflush_r>
 8004d1c:	bd10      	pop	{r4, pc}
 8004d1e:	46c0      	nop			@ (mov r8, r8)
 8004d20:	20002580 	.word	0x20002580
 8004d24:	200025e8 	.word	0x200025e8
 8004d28:	20002650 	.word	0x20002650

08004d2c <global_stdio_init.part.0>:
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	4b09      	ldr	r3, [pc, #36]	@ (8004d54 <global_stdio_init.part.0+0x28>)
 8004d30:	4a09      	ldr	r2, [pc, #36]	@ (8004d58 <global_stdio_init.part.0+0x2c>)
 8004d32:	2104      	movs	r1, #4
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	4809      	ldr	r0, [pc, #36]	@ (8004d5c <global_stdio_init.part.0+0x30>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f7ff ff95 	bl	8004c68 <std>
 8004d3e:	2201      	movs	r2, #1
 8004d40:	2109      	movs	r1, #9
 8004d42:	4807      	ldr	r0, [pc, #28]	@ (8004d60 <global_stdio_init.part.0+0x34>)
 8004d44:	f7ff ff90 	bl	8004c68 <std>
 8004d48:	2202      	movs	r2, #2
 8004d4a:	2112      	movs	r1, #18
 8004d4c:	4805      	ldr	r0, [pc, #20]	@ (8004d64 <global_stdio_init.part.0+0x38>)
 8004d4e:	f7ff ff8b 	bl	8004c68 <std>
 8004d52:	bd10      	pop	{r4, pc}
 8004d54:	200026b8 	.word	0x200026b8
 8004d58:	08004cd5 	.word	0x08004cd5
 8004d5c:	20002580 	.word	0x20002580
 8004d60:	200025e8 	.word	0x200025e8
 8004d64:	20002650 	.word	0x20002650

08004d68 <__sfp_lock_acquire>:
 8004d68:	b510      	push	{r4, lr}
 8004d6a:	4802      	ldr	r0, [pc, #8]	@ (8004d74 <__sfp_lock_acquire+0xc>)
 8004d6c:	f000 fa1d 	bl	80051aa <__retarget_lock_acquire_recursive>
 8004d70:	bd10      	pop	{r4, pc}
 8004d72:	46c0      	nop			@ (mov r8, r8)
 8004d74:	200026c1 	.word	0x200026c1

08004d78 <__sfp_lock_release>:
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	4802      	ldr	r0, [pc, #8]	@ (8004d84 <__sfp_lock_release+0xc>)
 8004d7c:	f000 fa16 	bl	80051ac <__retarget_lock_release_recursive>
 8004d80:	bd10      	pop	{r4, pc}
 8004d82:	46c0      	nop			@ (mov r8, r8)
 8004d84:	200026c1 	.word	0x200026c1

08004d88 <__sinit>:
 8004d88:	b510      	push	{r4, lr}
 8004d8a:	0004      	movs	r4, r0
 8004d8c:	f7ff ffec 	bl	8004d68 <__sfp_lock_acquire>
 8004d90:	6a23      	ldr	r3, [r4, #32]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <__sinit+0x14>
 8004d96:	f7ff ffef 	bl	8004d78 <__sfp_lock_release>
 8004d9a:	bd10      	pop	{r4, pc}
 8004d9c:	4b04      	ldr	r3, [pc, #16]	@ (8004db0 <__sinit+0x28>)
 8004d9e:	6223      	str	r3, [r4, #32]
 8004da0:	4b04      	ldr	r3, [pc, #16]	@ (8004db4 <__sinit+0x2c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1f6      	bne.n	8004d96 <__sinit+0xe>
 8004da8:	f7ff ffc0 	bl	8004d2c <global_stdio_init.part.0>
 8004dac:	e7f3      	b.n	8004d96 <__sinit+0xe>
 8004dae:	46c0      	nop			@ (mov r8, r8)
 8004db0:	08004cf1 	.word	0x08004cf1
 8004db4:	200026b8 	.word	0x200026b8

08004db8 <_fwalk_sglue>:
 8004db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dba:	0014      	movs	r4, r2
 8004dbc:	2600      	movs	r6, #0
 8004dbe:	9000      	str	r0, [sp, #0]
 8004dc0:	9101      	str	r1, [sp, #4]
 8004dc2:	68a5      	ldr	r5, [r4, #8]
 8004dc4:	6867      	ldr	r7, [r4, #4]
 8004dc6:	3f01      	subs	r7, #1
 8004dc8:	d504      	bpl.n	8004dd4 <_fwalk_sglue+0x1c>
 8004dca:	6824      	ldr	r4, [r4, #0]
 8004dcc:	2c00      	cmp	r4, #0
 8004dce:	d1f8      	bne.n	8004dc2 <_fwalk_sglue+0xa>
 8004dd0:	0030      	movs	r0, r6
 8004dd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004dd4:	89ab      	ldrh	r3, [r5, #12]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d908      	bls.n	8004dec <_fwalk_sglue+0x34>
 8004dda:	220e      	movs	r2, #14
 8004ddc:	5eab      	ldrsh	r3, [r5, r2]
 8004dde:	3301      	adds	r3, #1
 8004de0:	d004      	beq.n	8004dec <_fwalk_sglue+0x34>
 8004de2:	0029      	movs	r1, r5
 8004de4:	9800      	ldr	r0, [sp, #0]
 8004de6:	9b01      	ldr	r3, [sp, #4]
 8004de8:	4798      	blx	r3
 8004dea:	4306      	orrs	r6, r0
 8004dec:	3568      	adds	r5, #104	@ 0x68
 8004dee:	e7ea      	b.n	8004dc6 <_fwalk_sglue+0xe>

08004df0 <iprintf>:
 8004df0:	b40f      	push	{r0, r1, r2, r3}
 8004df2:	b507      	push	{r0, r1, r2, lr}
 8004df4:	4905      	ldr	r1, [pc, #20]	@ (8004e0c <iprintf+0x1c>)
 8004df6:	ab04      	add	r3, sp, #16
 8004df8:	6808      	ldr	r0, [r1, #0]
 8004dfa:	cb04      	ldmia	r3!, {r2}
 8004dfc:	6881      	ldr	r1, [r0, #8]
 8004dfe:	9301      	str	r3, [sp, #4]
 8004e00:	f000 fafa 	bl	80053f8 <_vfiprintf_r>
 8004e04:	b003      	add	sp, #12
 8004e06:	bc08      	pop	{r3}
 8004e08:	b004      	add	sp, #16
 8004e0a:	4718      	bx	r3
 8004e0c:	20000018 	.word	0x20000018

08004e10 <_puts_r>:
 8004e10:	6a03      	ldr	r3, [r0, #32]
 8004e12:	b570      	push	{r4, r5, r6, lr}
 8004e14:	0005      	movs	r5, r0
 8004e16:	000e      	movs	r6, r1
 8004e18:	6884      	ldr	r4, [r0, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <_puts_r+0x12>
 8004e1e:	f7ff ffb3 	bl	8004d88 <__sinit>
 8004e22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e24:	07db      	lsls	r3, r3, #31
 8004e26:	d405      	bmi.n	8004e34 <_puts_r+0x24>
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	059b      	lsls	r3, r3, #22
 8004e2c:	d402      	bmi.n	8004e34 <_puts_r+0x24>
 8004e2e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e30:	f000 f9bb 	bl	80051aa <__retarget_lock_acquire_recursive>
 8004e34:	89a3      	ldrh	r3, [r4, #12]
 8004e36:	071b      	lsls	r3, r3, #28
 8004e38:	d502      	bpl.n	8004e40 <_puts_r+0x30>
 8004e3a:	6923      	ldr	r3, [r4, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d11f      	bne.n	8004e80 <_puts_r+0x70>
 8004e40:	0021      	movs	r1, r4
 8004e42:	0028      	movs	r0, r5
 8004e44:	f000 f8d2 	bl	8004fec <__swsetup_r>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d019      	beq.n	8004e80 <_puts_r+0x70>
 8004e4c:	2501      	movs	r5, #1
 8004e4e:	426d      	negs	r5, r5
 8004e50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e52:	07db      	lsls	r3, r3, #31
 8004e54:	d405      	bmi.n	8004e62 <_puts_r+0x52>
 8004e56:	89a3      	ldrh	r3, [r4, #12]
 8004e58:	059b      	lsls	r3, r3, #22
 8004e5a:	d402      	bmi.n	8004e62 <_puts_r+0x52>
 8004e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e5e:	f000 f9a5 	bl	80051ac <__retarget_lock_release_recursive>
 8004e62:	0028      	movs	r0, r5
 8004e64:	bd70      	pop	{r4, r5, r6, pc}
 8004e66:	3601      	adds	r6, #1
 8004e68:	60a3      	str	r3, [r4, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	da04      	bge.n	8004e78 <_puts_r+0x68>
 8004e6e:	69a2      	ldr	r2, [r4, #24]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	dc16      	bgt.n	8004ea2 <_puts_r+0x92>
 8004e74:	290a      	cmp	r1, #10
 8004e76:	d014      	beq.n	8004ea2 <_puts_r+0x92>
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	6022      	str	r2, [r4, #0]
 8004e7e:	7019      	strb	r1, [r3, #0]
 8004e80:	68a3      	ldr	r3, [r4, #8]
 8004e82:	7831      	ldrb	r1, [r6, #0]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	2900      	cmp	r1, #0
 8004e88:	d1ed      	bne.n	8004e66 <_puts_r+0x56>
 8004e8a:	60a3      	str	r3, [r4, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	da0f      	bge.n	8004eb0 <_puts_r+0xa0>
 8004e90:	0022      	movs	r2, r4
 8004e92:	0028      	movs	r0, r5
 8004e94:	310a      	adds	r1, #10
 8004e96:	f000 f867 	bl	8004f68 <__swbuf_r>
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	d0d6      	beq.n	8004e4c <_puts_r+0x3c>
 8004e9e:	250a      	movs	r5, #10
 8004ea0:	e7d6      	b.n	8004e50 <_puts_r+0x40>
 8004ea2:	0022      	movs	r2, r4
 8004ea4:	0028      	movs	r0, r5
 8004ea6:	f000 f85f 	bl	8004f68 <__swbuf_r>
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d1e8      	bne.n	8004e80 <_puts_r+0x70>
 8004eae:	e7cd      	b.n	8004e4c <_puts_r+0x3c>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	6022      	str	r2, [r4, #0]
 8004eb6:	220a      	movs	r2, #10
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	e7f0      	b.n	8004e9e <_puts_r+0x8e>

08004ebc <puts>:
 8004ebc:	b510      	push	{r4, lr}
 8004ebe:	4b03      	ldr	r3, [pc, #12]	@ (8004ecc <puts+0x10>)
 8004ec0:	0001      	movs	r1, r0
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	f7ff ffa4 	bl	8004e10 <_puts_r>
 8004ec8:	bd10      	pop	{r4, pc}
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	20000018 	.word	0x20000018

08004ed0 <__sread>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	000c      	movs	r4, r1
 8004ed4:	250e      	movs	r5, #14
 8004ed6:	5f49      	ldrsh	r1, [r1, r5]
 8004ed8:	f000 f914 	bl	8005104 <_read_r>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	db03      	blt.n	8004ee8 <__sread+0x18>
 8004ee0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004ee2:	181b      	adds	r3, r3, r0
 8004ee4:	6563      	str	r3, [r4, #84]	@ 0x54
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	4a02      	ldr	r2, [pc, #8]	@ (8004ef4 <__sread+0x24>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	81a3      	strh	r3, [r4, #12]
 8004ef0:	e7f9      	b.n	8004ee6 <__sread+0x16>
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	ffffefff 	.word	0xffffefff

08004ef8 <__swrite>:
 8004ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efa:	001f      	movs	r7, r3
 8004efc:	898b      	ldrh	r3, [r1, #12]
 8004efe:	0005      	movs	r5, r0
 8004f00:	000c      	movs	r4, r1
 8004f02:	0016      	movs	r6, r2
 8004f04:	05db      	lsls	r3, r3, #23
 8004f06:	d505      	bpl.n	8004f14 <__swrite+0x1c>
 8004f08:	230e      	movs	r3, #14
 8004f0a:	5ec9      	ldrsh	r1, [r1, r3]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2302      	movs	r3, #2
 8004f10:	f000 f8e4 	bl	80050dc <_lseek_r>
 8004f14:	89a3      	ldrh	r3, [r4, #12]
 8004f16:	4a05      	ldr	r2, [pc, #20]	@ (8004f2c <__swrite+0x34>)
 8004f18:	0028      	movs	r0, r5
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	81a3      	strh	r3, [r4, #12]
 8004f1e:	0032      	movs	r2, r6
 8004f20:	230e      	movs	r3, #14
 8004f22:	5ee1      	ldrsh	r1, [r4, r3]
 8004f24:	003b      	movs	r3, r7
 8004f26:	f000 f901 	bl	800512c <_write_r>
 8004f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f2c:	ffffefff 	.word	0xffffefff

08004f30 <__sseek>:
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	000c      	movs	r4, r1
 8004f34:	250e      	movs	r5, #14
 8004f36:	5f49      	ldrsh	r1, [r1, r5]
 8004f38:	f000 f8d0 	bl	80050dc <_lseek_r>
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	1c42      	adds	r2, r0, #1
 8004f40:	d103      	bne.n	8004f4a <__sseek+0x1a>
 8004f42:	4a05      	ldr	r2, [pc, #20]	@ (8004f58 <__sseek+0x28>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	81a3      	strh	r3, [r4, #12]
 8004f48:	bd70      	pop	{r4, r5, r6, pc}
 8004f4a:	2280      	movs	r2, #128	@ 0x80
 8004f4c:	0152      	lsls	r2, r2, #5
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	81a3      	strh	r3, [r4, #12]
 8004f52:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f54:	e7f8      	b.n	8004f48 <__sseek+0x18>
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	ffffefff 	.word	0xffffefff

08004f5c <__sclose>:
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	230e      	movs	r3, #14
 8004f60:	5ec9      	ldrsh	r1, [r1, r3]
 8004f62:	f000 f8a9 	bl	80050b8 <_close_r>
 8004f66:	bd10      	pop	{r4, pc}

08004f68 <__swbuf_r>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	0006      	movs	r6, r0
 8004f6c:	000d      	movs	r5, r1
 8004f6e:	0014      	movs	r4, r2
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d004      	beq.n	8004f7e <__swbuf_r+0x16>
 8004f74:	6a03      	ldr	r3, [r0, #32]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <__swbuf_r+0x16>
 8004f7a:	f7ff ff05 	bl	8004d88 <__sinit>
 8004f7e:	69a3      	ldr	r3, [r4, #24]
 8004f80:	60a3      	str	r3, [r4, #8]
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	071b      	lsls	r3, r3, #28
 8004f86:	d502      	bpl.n	8004f8e <__swbuf_r+0x26>
 8004f88:	6923      	ldr	r3, [r4, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d109      	bne.n	8004fa2 <__swbuf_r+0x3a>
 8004f8e:	0021      	movs	r1, r4
 8004f90:	0030      	movs	r0, r6
 8004f92:	f000 f82b 	bl	8004fec <__swsetup_r>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d003      	beq.n	8004fa2 <__swbuf_r+0x3a>
 8004f9a:	2501      	movs	r5, #1
 8004f9c:	426d      	negs	r5, r5
 8004f9e:	0028      	movs	r0, r5
 8004fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa2:	6923      	ldr	r3, [r4, #16]
 8004fa4:	6820      	ldr	r0, [r4, #0]
 8004fa6:	b2ef      	uxtb	r7, r5
 8004fa8:	1ac0      	subs	r0, r0, r3
 8004faa:	6963      	ldr	r3, [r4, #20]
 8004fac:	b2ed      	uxtb	r5, r5
 8004fae:	4283      	cmp	r3, r0
 8004fb0:	dc05      	bgt.n	8004fbe <__swbuf_r+0x56>
 8004fb2:	0021      	movs	r1, r4
 8004fb4:	0030      	movs	r0, r6
 8004fb6:	f000 fd3f 	bl	8005a38 <_fflush_r>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d1ed      	bne.n	8004f9a <__swbuf_r+0x32>
 8004fbe:	68a3      	ldr	r3, [r4, #8]
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	60a3      	str	r3, [r4, #8]
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	6022      	str	r2, [r4, #0]
 8004fcc:	701f      	strb	r7, [r3, #0]
 8004fce:	6963      	ldr	r3, [r4, #20]
 8004fd0:	4283      	cmp	r3, r0
 8004fd2:	d004      	beq.n	8004fde <__swbuf_r+0x76>
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	07db      	lsls	r3, r3, #31
 8004fd8:	d5e1      	bpl.n	8004f9e <__swbuf_r+0x36>
 8004fda:	2d0a      	cmp	r5, #10
 8004fdc:	d1df      	bne.n	8004f9e <__swbuf_r+0x36>
 8004fde:	0021      	movs	r1, r4
 8004fe0:	0030      	movs	r0, r6
 8004fe2:	f000 fd29 	bl	8005a38 <_fflush_r>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d0d9      	beq.n	8004f9e <__swbuf_r+0x36>
 8004fea:	e7d6      	b.n	8004f9a <__swbuf_r+0x32>

08004fec <__swsetup_r>:
 8004fec:	4b2d      	ldr	r3, [pc, #180]	@ (80050a4 <__swsetup_r+0xb8>)
 8004fee:	b570      	push	{r4, r5, r6, lr}
 8004ff0:	0005      	movs	r5, r0
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	000c      	movs	r4, r1
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d004      	beq.n	8005004 <__swsetup_r+0x18>
 8004ffa:	6a03      	ldr	r3, [r0, #32]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <__swsetup_r+0x18>
 8005000:	f7ff fec2 	bl	8004d88 <__sinit>
 8005004:	230c      	movs	r3, #12
 8005006:	5ee2      	ldrsh	r2, [r4, r3]
 8005008:	0713      	lsls	r3, r2, #28
 800500a:	d423      	bmi.n	8005054 <__swsetup_r+0x68>
 800500c:	06d3      	lsls	r3, r2, #27
 800500e:	d407      	bmi.n	8005020 <__swsetup_r+0x34>
 8005010:	2309      	movs	r3, #9
 8005012:	602b      	str	r3, [r5, #0]
 8005014:	2340      	movs	r3, #64	@ 0x40
 8005016:	2001      	movs	r0, #1
 8005018:	4313      	orrs	r3, r2
 800501a:	81a3      	strh	r3, [r4, #12]
 800501c:	4240      	negs	r0, r0
 800501e:	e03a      	b.n	8005096 <__swsetup_r+0xaa>
 8005020:	0752      	lsls	r2, r2, #29
 8005022:	d513      	bpl.n	800504c <__swsetup_r+0x60>
 8005024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005026:	2900      	cmp	r1, #0
 8005028:	d008      	beq.n	800503c <__swsetup_r+0x50>
 800502a:	0023      	movs	r3, r4
 800502c:	3344      	adds	r3, #68	@ 0x44
 800502e:	4299      	cmp	r1, r3
 8005030:	d002      	beq.n	8005038 <__swsetup_r+0x4c>
 8005032:	0028      	movs	r0, r5
 8005034:	f000 f8bc 	bl	80051b0 <_free_r>
 8005038:	2300      	movs	r3, #0
 800503a:	6363      	str	r3, [r4, #52]	@ 0x34
 800503c:	2224      	movs	r2, #36	@ 0x24
 800503e:	89a3      	ldrh	r3, [r4, #12]
 8005040:	4393      	bics	r3, r2
 8005042:	81a3      	strh	r3, [r4, #12]
 8005044:	2300      	movs	r3, #0
 8005046:	6063      	str	r3, [r4, #4]
 8005048:	6923      	ldr	r3, [r4, #16]
 800504a:	6023      	str	r3, [r4, #0]
 800504c:	2308      	movs	r3, #8
 800504e:	89a2      	ldrh	r2, [r4, #12]
 8005050:	4313      	orrs	r3, r2
 8005052:	81a3      	strh	r3, [r4, #12]
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10b      	bne.n	8005072 <__swsetup_r+0x86>
 800505a:	21a0      	movs	r1, #160	@ 0xa0
 800505c:	2280      	movs	r2, #128	@ 0x80
 800505e:	89a3      	ldrh	r3, [r4, #12]
 8005060:	0089      	lsls	r1, r1, #2
 8005062:	0092      	lsls	r2, r2, #2
 8005064:	400b      	ands	r3, r1
 8005066:	4293      	cmp	r3, r2
 8005068:	d003      	beq.n	8005072 <__swsetup_r+0x86>
 800506a:	0021      	movs	r1, r4
 800506c:	0028      	movs	r0, r5
 800506e:	f000 fd39 	bl	8005ae4 <__smakebuf_r>
 8005072:	230c      	movs	r3, #12
 8005074:	5ee2      	ldrsh	r2, [r4, r3]
 8005076:	2101      	movs	r1, #1
 8005078:	0013      	movs	r3, r2
 800507a:	400b      	ands	r3, r1
 800507c:	420a      	tst	r2, r1
 800507e:	d00b      	beq.n	8005098 <__swsetup_r+0xac>
 8005080:	2300      	movs	r3, #0
 8005082:	60a3      	str	r3, [r4, #8]
 8005084:	6963      	ldr	r3, [r4, #20]
 8005086:	425b      	negs	r3, r3
 8005088:	61a3      	str	r3, [r4, #24]
 800508a:	2000      	movs	r0, #0
 800508c:	6923      	ldr	r3, [r4, #16]
 800508e:	4283      	cmp	r3, r0
 8005090:	d101      	bne.n	8005096 <__swsetup_r+0xaa>
 8005092:	0613      	lsls	r3, r2, #24
 8005094:	d4be      	bmi.n	8005014 <__swsetup_r+0x28>
 8005096:	bd70      	pop	{r4, r5, r6, pc}
 8005098:	0791      	lsls	r1, r2, #30
 800509a:	d400      	bmi.n	800509e <__swsetup_r+0xb2>
 800509c:	6963      	ldr	r3, [r4, #20]
 800509e:	60a3      	str	r3, [r4, #8]
 80050a0:	e7f3      	b.n	800508a <__swsetup_r+0x9e>
 80050a2:	46c0      	nop			@ (mov r8, r8)
 80050a4:	20000018 	.word	0x20000018

080050a8 <memset>:
 80050a8:	0003      	movs	r3, r0
 80050aa:	1882      	adds	r2, r0, r2
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d100      	bne.n	80050b2 <memset+0xa>
 80050b0:	4770      	bx	lr
 80050b2:	7019      	strb	r1, [r3, #0]
 80050b4:	3301      	adds	r3, #1
 80050b6:	e7f9      	b.n	80050ac <memset+0x4>

080050b8 <_close_r>:
 80050b8:	2300      	movs	r3, #0
 80050ba:	b570      	push	{r4, r5, r6, lr}
 80050bc:	4d06      	ldr	r5, [pc, #24]	@ (80050d8 <_close_r+0x20>)
 80050be:	0004      	movs	r4, r0
 80050c0:	0008      	movs	r0, r1
 80050c2:	602b      	str	r3, [r5, #0]
 80050c4:	f7fc f80d 	bl	80010e2 <_close>
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d103      	bne.n	80050d4 <_close_r+0x1c>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d000      	beq.n	80050d4 <_close_r+0x1c>
 80050d2:	6023      	str	r3, [r4, #0]
 80050d4:	bd70      	pop	{r4, r5, r6, pc}
 80050d6:	46c0      	nop			@ (mov r8, r8)
 80050d8:	200026bc 	.word	0x200026bc

080050dc <_lseek_r>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	0004      	movs	r4, r0
 80050e0:	0008      	movs	r0, r1
 80050e2:	0011      	movs	r1, r2
 80050e4:	001a      	movs	r2, r3
 80050e6:	2300      	movs	r3, #0
 80050e8:	4d05      	ldr	r5, [pc, #20]	@ (8005100 <_lseek_r+0x24>)
 80050ea:	602b      	str	r3, [r5, #0]
 80050ec:	f7fc f81a 	bl	8001124 <_lseek>
 80050f0:	1c43      	adds	r3, r0, #1
 80050f2:	d103      	bne.n	80050fc <_lseek_r+0x20>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d000      	beq.n	80050fc <_lseek_r+0x20>
 80050fa:	6023      	str	r3, [r4, #0]
 80050fc:	bd70      	pop	{r4, r5, r6, pc}
 80050fe:	46c0      	nop			@ (mov r8, r8)
 8005100:	200026bc 	.word	0x200026bc

08005104 <_read_r>:
 8005104:	b570      	push	{r4, r5, r6, lr}
 8005106:	0004      	movs	r4, r0
 8005108:	0008      	movs	r0, r1
 800510a:	0011      	movs	r1, r2
 800510c:	001a      	movs	r2, r3
 800510e:	2300      	movs	r3, #0
 8005110:	4d05      	ldr	r5, [pc, #20]	@ (8005128 <_read_r+0x24>)
 8005112:	602b      	str	r3, [r5, #0]
 8005114:	f7fb ffac 	bl	8001070 <_read>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d103      	bne.n	8005124 <_read_r+0x20>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d000      	beq.n	8005124 <_read_r+0x20>
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	bd70      	pop	{r4, r5, r6, pc}
 8005126:	46c0      	nop			@ (mov r8, r8)
 8005128:	200026bc 	.word	0x200026bc

0800512c <_write_r>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	0004      	movs	r4, r0
 8005130:	0008      	movs	r0, r1
 8005132:	0011      	movs	r1, r2
 8005134:	001a      	movs	r2, r3
 8005136:	2300      	movs	r3, #0
 8005138:	4d05      	ldr	r5, [pc, #20]	@ (8005150 <_write_r+0x24>)
 800513a:	602b      	str	r3, [r5, #0]
 800513c:	f7fb ffb5 	bl	80010aa <_write>
 8005140:	1c43      	adds	r3, r0, #1
 8005142:	d103      	bne.n	800514c <_write_r+0x20>
 8005144:	682b      	ldr	r3, [r5, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d000      	beq.n	800514c <_write_r+0x20>
 800514a:	6023      	str	r3, [r4, #0]
 800514c:	bd70      	pop	{r4, r5, r6, pc}
 800514e:	46c0      	nop			@ (mov r8, r8)
 8005150:	200026bc 	.word	0x200026bc

08005154 <__errno>:
 8005154:	4b01      	ldr	r3, [pc, #4]	@ (800515c <__errno+0x8>)
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	4770      	bx	lr
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	20000018 	.word	0x20000018

08005160 <__libc_init_array>:
 8005160:	b570      	push	{r4, r5, r6, lr}
 8005162:	2600      	movs	r6, #0
 8005164:	4c0c      	ldr	r4, [pc, #48]	@ (8005198 <__libc_init_array+0x38>)
 8005166:	4d0d      	ldr	r5, [pc, #52]	@ (800519c <__libc_init_array+0x3c>)
 8005168:	1b64      	subs	r4, r4, r5
 800516a:	10a4      	asrs	r4, r4, #2
 800516c:	42a6      	cmp	r6, r4
 800516e:	d109      	bne.n	8005184 <__libc_init_array+0x24>
 8005170:	2600      	movs	r6, #0
 8005172:	f000 fd3b 	bl	8005bec <_init>
 8005176:	4c0a      	ldr	r4, [pc, #40]	@ (80051a0 <__libc_init_array+0x40>)
 8005178:	4d0a      	ldr	r5, [pc, #40]	@ (80051a4 <__libc_init_array+0x44>)
 800517a:	1b64      	subs	r4, r4, r5
 800517c:	10a4      	asrs	r4, r4, #2
 800517e:	42a6      	cmp	r6, r4
 8005180:	d105      	bne.n	800518e <__libc_init_array+0x2e>
 8005182:	bd70      	pop	{r4, r5, r6, pc}
 8005184:	00b3      	lsls	r3, r6, #2
 8005186:	58eb      	ldr	r3, [r5, r3]
 8005188:	4798      	blx	r3
 800518a:	3601      	adds	r6, #1
 800518c:	e7ee      	b.n	800516c <__libc_init_array+0xc>
 800518e:	00b3      	lsls	r3, r6, #2
 8005190:	58eb      	ldr	r3, [r5, r3]
 8005192:	4798      	blx	r3
 8005194:	3601      	adds	r6, #1
 8005196:	e7f2      	b.n	800517e <__libc_init_array+0x1e>
 8005198:	08005d50 	.word	0x08005d50
 800519c:	08005d50 	.word	0x08005d50
 80051a0:	08005d54 	.word	0x08005d54
 80051a4:	08005d50 	.word	0x08005d50

080051a8 <__retarget_lock_init_recursive>:
 80051a8:	4770      	bx	lr

080051aa <__retarget_lock_acquire_recursive>:
 80051aa:	4770      	bx	lr

080051ac <__retarget_lock_release_recursive>:
 80051ac:	4770      	bx	lr
	...

080051b0 <_free_r>:
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	0005      	movs	r5, r0
 80051b4:	1e0c      	subs	r4, r1, #0
 80051b6:	d010      	beq.n	80051da <_free_r+0x2a>
 80051b8:	3c04      	subs	r4, #4
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	da00      	bge.n	80051c2 <_free_r+0x12>
 80051c0:	18e4      	adds	r4, r4, r3
 80051c2:	0028      	movs	r0, r5
 80051c4:	f000 f8e0 	bl	8005388 <__malloc_lock>
 80051c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005240 <_free_r+0x90>)
 80051ca:	6813      	ldr	r3, [r2, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d105      	bne.n	80051dc <_free_r+0x2c>
 80051d0:	6063      	str	r3, [r4, #4]
 80051d2:	6014      	str	r4, [r2, #0]
 80051d4:	0028      	movs	r0, r5
 80051d6:	f000 f8df 	bl	8005398 <__malloc_unlock>
 80051da:	bd70      	pop	{r4, r5, r6, pc}
 80051dc:	42a3      	cmp	r3, r4
 80051de:	d908      	bls.n	80051f2 <_free_r+0x42>
 80051e0:	6820      	ldr	r0, [r4, #0]
 80051e2:	1821      	adds	r1, r4, r0
 80051e4:	428b      	cmp	r3, r1
 80051e6:	d1f3      	bne.n	80051d0 <_free_r+0x20>
 80051e8:	6819      	ldr	r1, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	1809      	adds	r1, r1, r0
 80051ee:	6021      	str	r1, [r4, #0]
 80051f0:	e7ee      	b.n	80051d0 <_free_r+0x20>
 80051f2:	001a      	movs	r2, r3
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <_free_r+0x4e>
 80051fa:	42a3      	cmp	r3, r4
 80051fc:	d9f9      	bls.n	80051f2 <_free_r+0x42>
 80051fe:	6811      	ldr	r1, [r2, #0]
 8005200:	1850      	adds	r0, r2, r1
 8005202:	42a0      	cmp	r0, r4
 8005204:	d10b      	bne.n	800521e <_free_r+0x6e>
 8005206:	6820      	ldr	r0, [r4, #0]
 8005208:	1809      	adds	r1, r1, r0
 800520a:	1850      	adds	r0, r2, r1
 800520c:	6011      	str	r1, [r2, #0]
 800520e:	4283      	cmp	r3, r0
 8005210:	d1e0      	bne.n	80051d4 <_free_r+0x24>
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	1841      	adds	r1, r0, r1
 8005218:	6011      	str	r1, [r2, #0]
 800521a:	6053      	str	r3, [r2, #4]
 800521c:	e7da      	b.n	80051d4 <_free_r+0x24>
 800521e:	42a0      	cmp	r0, r4
 8005220:	d902      	bls.n	8005228 <_free_r+0x78>
 8005222:	230c      	movs	r3, #12
 8005224:	602b      	str	r3, [r5, #0]
 8005226:	e7d5      	b.n	80051d4 <_free_r+0x24>
 8005228:	6820      	ldr	r0, [r4, #0]
 800522a:	1821      	adds	r1, r4, r0
 800522c:	428b      	cmp	r3, r1
 800522e:	d103      	bne.n	8005238 <_free_r+0x88>
 8005230:	6819      	ldr	r1, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	1809      	adds	r1, r1, r0
 8005236:	6021      	str	r1, [r4, #0]
 8005238:	6063      	str	r3, [r4, #4]
 800523a:	6054      	str	r4, [r2, #4]
 800523c:	e7ca      	b.n	80051d4 <_free_r+0x24>
 800523e:	46c0      	nop			@ (mov r8, r8)
 8005240:	200026c8 	.word	0x200026c8

08005244 <sbrk_aligned>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	4e0f      	ldr	r6, [pc, #60]	@ (8005284 <sbrk_aligned+0x40>)
 8005248:	000d      	movs	r5, r1
 800524a:	6831      	ldr	r1, [r6, #0]
 800524c:	0004      	movs	r4, r0
 800524e:	2900      	cmp	r1, #0
 8005250:	d102      	bne.n	8005258 <sbrk_aligned+0x14>
 8005252:	f000 fcad 	bl	8005bb0 <_sbrk_r>
 8005256:	6030      	str	r0, [r6, #0]
 8005258:	0029      	movs	r1, r5
 800525a:	0020      	movs	r0, r4
 800525c:	f000 fca8 	bl	8005bb0 <_sbrk_r>
 8005260:	1c43      	adds	r3, r0, #1
 8005262:	d103      	bne.n	800526c <sbrk_aligned+0x28>
 8005264:	2501      	movs	r5, #1
 8005266:	426d      	negs	r5, r5
 8005268:	0028      	movs	r0, r5
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	2303      	movs	r3, #3
 800526e:	1cc5      	adds	r5, r0, #3
 8005270:	439d      	bics	r5, r3
 8005272:	42a8      	cmp	r0, r5
 8005274:	d0f8      	beq.n	8005268 <sbrk_aligned+0x24>
 8005276:	1a29      	subs	r1, r5, r0
 8005278:	0020      	movs	r0, r4
 800527a:	f000 fc99 	bl	8005bb0 <_sbrk_r>
 800527e:	3001      	adds	r0, #1
 8005280:	d1f2      	bne.n	8005268 <sbrk_aligned+0x24>
 8005282:	e7ef      	b.n	8005264 <sbrk_aligned+0x20>
 8005284:	200026c4 	.word	0x200026c4

08005288 <_malloc_r>:
 8005288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800528a:	2203      	movs	r2, #3
 800528c:	1ccb      	adds	r3, r1, #3
 800528e:	4393      	bics	r3, r2
 8005290:	3308      	adds	r3, #8
 8005292:	0005      	movs	r5, r0
 8005294:	001f      	movs	r7, r3
 8005296:	2b0c      	cmp	r3, #12
 8005298:	d234      	bcs.n	8005304 <_malloc_r+0x7c>
 800529a:	270c      	movs	r7, #12
 800529c:	42b9      	cmp	r1, r7
 800529e:	d833      	bhi.n	8005308 <_malloc_r+0x80>
 80052a0:	0028      	movs	r0, r5
 80052a2:	f000 f871 	bl	8005388 <__malloc_lock>
 80052a6:	4e37      	ldr	r6, [pc, #220]	@ (8005384 <_malloc_r+0xfc>)
 80052a8:	6833      	ldr	r3, [r6, #0]
 80052aa:	001c      	movs	r4, r3
 80052ac:	2c00      	cmp	r4, #0
 80052ae:	d12f      	bne.n	8005310 <_malloc_r+0x88>
 80052b0:	0039      	movs	r1, r7
 80052b2:	0028      	movs	r0, r5
 80052b4:	f7ff ffc6 	bl	8005244 <sbrk_aligned>
 80052b8:	0004      	movs	r4, r0
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	d15f      	bne.n	800537e <_malloc_r+0xf6>
 80052be:	6834      	ldr	r4, [r6, #0]
 80052c0:	9400      	str	r4, [sp, #0]
 80052c2:	9b00      	ldr	r3, [sp, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d14a      	bne.n	800535e <_malloc_r+0xd6>
 80052c8:	2c00      	cmp	r4, #0
 80052ca:	d052      	beq.n	8005372 <_malloc_r+0xea>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	0028      	movs	r0, r5
 80052d0:	18e3      	adds	r3, r4, r3
 80052d2:	9900      	ldr	r1, [sp, #0]
 80052d4:	9301      	str	r3, [sp, #4]
 80052d6:	f000 fc6b 	bl	8005bb0 <_sbrk_r>
 80052da:	9b01      	ldr	r3, [sp, #4]
 80052dc:	4283      	cmp	r3, r0
 80052de:	d148      	bne.n	8005372 <_malloc_r+0xea>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	0028      	movs	r0, r5
 80052e4:	1aff      	subs	r7, r7, r3
 80052e6:	0039      	movs	r1, r7
 80052e8:	f7ff ffac 	bl	8005244 <sbrk_aligned>
 80052ec:	3001      	adds	r0, #1
 80052ee:	d040      	beq.n	8005372 <_malloc_r+0xea>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	19db      	adds	r3, r3, r7
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	6833      	ldr	r3, [r6, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	2a00      	cmp	r2, #0
 80052fc:	d133      	bne.n	8005366 <_malloc_r+0xde>
 80052fe:	9b00      	ldr	r3, [sp, #0]
 8005300:	6033      	str	r3, [r6, #0]
 8005302:	e019      	b.n	8005338 <_malloc_r+0xb0>
 8005304:	2b00      	cmp	r3, #0
 8005306:	dac9      	bge.n	800529c <_malloc_r+0x14>
 8005308:	230c      	movs	r3, #12
 800530a:	602b      	str	r3, [r5, #0]
 800530c:	2000      	movs	r0, #0
 800530e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005310:	6821      	ldr	r1, [r4, #0]
 8005312:	1bc9      	subs	r1, r1, r7
 8005314:	d420      	bmi.n	8005358 <_malloc_r+0xd0>
 8005316:	290b      	cmp	r1, #11
 8005318:	d90a      	bls.n	8005330 <_malloc_r+0xa8>
 800531a:	19e2      	adds	r2, r4, r7
 800531c:	6027      	str	r7, [r4, #0]
 800531e:	42a3      	cmp	r3, r4
 8005320:	d104      	bne.n	800532c <_malloc_r+0xa4>
 8005322:	6032      	str	r2, [r6, #0]
 8005324:	6863      	ldr	r3, [r4, #4]
 8005326:	6011      	str	r1, [r2, #0]
 8005328:	6053      	str	r3, [r2, #4]
 800532a:	e005      	b.n	8005338 <_malloc_r+0xb0>
 800532c:	605a      	str	r2, [r3, #4]
 800532e:	e7f9      	b.n	8005324 <_malloc_r+0x9c>
 8005330:	6862      	ldr	r2, [r4, #4]
 8005332:	42a3      	cmp	r3, r4
 8005334:	d10e      	bne.n	8005354 <_malloc_r+0xcc>
 8005336:	6032      	str	r2, [r6, #0]
 8005338:	0028      	movs	r0, r5
 800533a:	f000 f82d 	bl	8005398 <__malloc_unlock>
 800533e:	0020      	movs	r0, r4
 8005340:	2207      	movs	r2, #7
 8005342:	300b      	adds	r0, #11
 8005344:	1d23      	adds	r3, r4, #4
 8005346:	4390      	bics	r0, r2
 8005348:	1ac2      	subs	r2, r0, r3
 800534a:	4298      	cmp	r0, r3
 800534c:	d0df      	beq.n	800530e <_malloc_r+0x86>
 800534e:	1a1b      	subs	r3, r3, r0
 8005350:	50a3      	str	r3, [r4, r2]
 8005352:	e7dc      	b.n	800530e <_malloc_r+0x86>
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	e7ef      	b.n	8005338 <_malloc_r+0xb0>
 8005358:	0023      	movs	r3, r4
 800535a:	6864      	ldr	r4, [r4, #4]
 800535c:	e7a6      	b.n	80052ac <_malloc_r+0x24>
 800535e:	9c00      	ldr	r4, [sp, #0]
 8005360:	6863      	ldr	r3, [r4, #4]
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	e7ad      	b.n	80052c2 <_malloc_r+0x3a>
 8005366:	001a      	movs	r2, r3
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	42a3      	cmp	r3, r4
 800536c:	d1fb      	bne.n	8005366 <_malloc_r+0xde>
 800536e:	2300      	movs	r3, #0
 8005370:	e7da      	b.n	8005328 <_malloc_r+0xa0>
 8005372:	230c      	movs	r3, #12
 8005374:	0028      	movs	r0, r5
 8005376:	602b      	str	r3, [r5, #0]
 8005378:	f000 f80e 	bl	8005398 <__malloc_unlock>
 800537c:	e7c6      	b.n	800530c <_malloc_r+0x84>
 800537e:	6007      	str	r7, [r0, #0]
 8005380:	e7da      	b.n	8005338 <_malloc_r+0xb0>
 8005382:	46c0      	nop			@ (mov r8, r8)
 8005384:	200026c8 	.word	0x200026c8

08005388 <__malloc_lock>:
 8005388:	b510      	push	{r4, lr}
 800538a:	4802      	ldr	r0, [pc, #8]	@ (8005394 <__malloc_lock+0xc>)
 800538c:	f7ff ff0d 	bl	80051aa <__retarget_lock_acquire_recursive>
 8005390:	bd10      	pop	{r4, pc}
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	200026c0 	.word	0x200026c0

08005398 <__malloc_unlock>:
 8005398:	b510      	push	{r4, lr}
 800539a:	4802      	ldr	r0, [pc, #8]	@ (80053a4 <__malloc_unlock+0xc>)
 800539c:	f7ff ff06 	bl	80051ac <__retarget_lock_release_recursive>
 80053a0:	bd10      	pop	{r4, pc}
 80053a2:	46c0      	nop			@ (mov r8, r8)
 80053a4:	200026c0 	.word	0x200026c0

080053a8 <__sfputc_r>:
 80053a8:	6893      	ldr	r3, [r2, #8]
 80053aa:	b510      	push	{r4, lr}
 80053ac:	3b01      	subs	r3, #1
 80053ae:	6093      	str	r3, [r2, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	da04      	bge.n	80053be <__sfputc_r+0x16>
 80053b4:	6994      	ldr	r4, [r2, #24]
 80053b6:	42a3      	cmp	r3, r4
 80053b8:	db07      	blt.n	80053ca <__sfputc_r+0x22>
 80053ba:	290a      	cmp	r1, #10
 80053bc:	d005      	beq.n	80053ca <__sfputc_r+0x22>
 80053be:	6813      	ldr	r3, [r2, #0]
 80053c0:	1c58      	adds	r0, r3, #1
 80053c2:	6010      	str	r0, [r2, #0]
 80053c4:	7019      	strb	r1, [r3, #0]
 80053c6:	0008      	movs	r0, r1
 80053c8:	bd10      	pop	{r4, pc}
 80053ca:	f7ff fdcd 	bl	8004f68 <__swbuf_r>
 80053ce:	0001      	movs	r1, r0
 80053d0:	e7f9      	b.n	80053c6 <__sfputc_r+0x1e>

080053d2 <__sfputs_r>:
 80053d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d4:	0006      	movs	r6, r0
 80053d6:	000f      	movs	r7, r1
 80053d8:	0014      	movs	r4, r2
 80053da:	18d5      	adds	r5, r2, r3
 80053dc:	42ac      	cmp	r4, r5
 80053de:	d101      	bne.n	80053e4 <__sfputs_r+0x12>
 80053e0:	2000      	movs	r0, #0
 80053e2:	e007      	b.n	80053f4 <__sfputs_r+0x22>
 80053e4:	7821      	ldrb	r1, [r4, #0]
 80053e6:	003a      	movs	r2, r7
 80053e8:	0030      	movs	r0, r6
 80053ea:	f7ff ffdd 	bl	80053a8 <__sfputc_r>
 80053ee:	3401      	adds	r4, #1
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d1f3      	bne.n	80053dc <__sfputs_r+0xa>
 80053f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053f8 <_vfiprintf_r>:
 80053f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053fa:	b0a1      	sub	sp, #132	@ 0x84
 80053fc:	000f      	movs	r7, r1
 80053fe:	0015      	movs	r5, r2
 8005400:	001e      	movs	r6, r3
 8005402:	9003      	str	r0, [sp, #12]
 8005404:	2800      	cmp	r0, #0
 8005406:	d004      	beq.n	8005412 <_vfiprintf_r+0x1a>
 8005408:	6a03      	ldr	r3, [r0, #32]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <_vfiprintf_r+0x1a>
 800540e:	f7ff fcbb 	bl	8004d88 <__sinit>
 8005412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005414:	07db      	lsls	r3, r3, #31
 8005416:	d405      	bmi.n	8005424 <_vfiprintf_r+0x2c>
 8005418:	89bb      	ldrh	r3, [r7, #12]
 800541a:	059b      	lsls	r3, r3, #22
 800541c:	d402      	bmi.n	8005424 <_vfiprintf_r+0x2c>
 800541e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005420:	f7ff fec3 	bl	80051aa <__retarget_lock_acquire_recursive>
 8005424:	89bb      	ldrh	r3, [r7, #12]
 8005426:	071b      	lsls	r3, r3, #28
 8005428:	d502      	bpl.n	8005430 <_vfiprintf_r+0x38>
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d113      	bne.n	8005458 <_vfiprintf_r+0x60>
 8005430:	0039      	movs	r1, r7
 8005432:	9803      	ldr	r0, [sp, #12]
 8005434:	f7ff fdda 	bl	8004fec <__swsetup_r>
 8005438:	2800      	cmp	r0, #0
 800543a:	d00d      	beq.n	8005458 <_vfiprintf_r+0x60>
 800543c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800543e:	07db      	lsls	r3, r3, #31
 8005440:	d503      	bpl.n	800544a <_vfiprintf_r+0x52>
 8005442:	2001      	movs	r0, #1
 8005444:	4240      	negs	r0, r0
 8005446:	b021      	add	sp, #132	@ 0x84
 8005448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800544a:	89bb      	ldrh	r3, [r7, #12]
 800544c:	059b      	lsls	r3, r3, #22
 800544e:	d4f8      	bmi.n	8005442 <_vfiprintf_r+0x4a>
 8005450:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005452:	f7ff feab 	bl	80051ac <__retarget_lock_release_recursive>
 8005456:	e7f4      	b.n	8005442 <_vfiprintf_r+0x4a>
 8005458:	2300      	movs	r3, #0
 800545a:	ac08      	add	r4, sp, #32
 800545c:	6163      	str	r3, [r4, #20]
 800545e:	3320      	adds	r3, #32
 8005460:	7663      	strb	r3, [r4, #25]
 8005462:	3310      	adds	r3, #16
 8005464:	76a3      	strb	r3, [r4, #26]
 8005466:	9607      	str	r6, [sp, #28]
 8005468:	002e      	movs	r6, r5
 800546a:	7833      	ldrb	r3, [r6, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <_vfiprintf_r+0x7c>
 8005470:	2b25      	cmp	r3, #37	@ 0x25
 8005472:	d148      	bne.n	8005506 <_vfiprintf_r+0x10e>
 8005474:	1b73      	subs	r3, r6, r5
 8005476:	9305      	str	r3, [sp, #20]
 8005478:	42ae      	cmp	r6, r5
 800547a:	d00b      	beq.n	8005494 <_vfiprintf_r+0x9c>
 800547c:	002a      	movs	r2, r5
 800547e:	0039      	movs	r1, r7
 8005480:	9803      	ldr	r0, [sp, #12]
 8005482:	f7ff ffa6 	bl	80053d2 <__sfputs_r>
 8005486:	3001      	adds	r0, #1
 8005488:	d100      	bne.n	800548c <_vfiprintf_r+0x94>
 800548a:	e0ae      	b.n	80055ea <_vfiprintf_r+0x1f2>
 800548c:	6963      	ldr	r3, [r4, #20]
 800548e:	9a05      	ldr	r2, [sp, #20]
 8005490:	189b      	adds	r3, r3, r2
 8005492:	6163      	str	r3, [r4, #20]
 8005494:	7833      	ldrb	r3, [r6, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d100      	bne.n	800549c <_vfiprintf_r+0xa4>
 800549a:	e0a6      	b.n	80055ea <_vfiprintf_r+0x1f2>
 800549c:	2201      	movs	r2, #1
 800549e:	2300      	movs	r3, #0
 80054a0:	4252      	negs	r2, r2
 80054a2:	6062      	str	r2, [r4, #4]
 80054a4:	a904      	add	r1, sp, #16
 80054a6:	3254      	adds	r2, #84	@ 0x54
 80054a8:	1852      	adds	r2, r2, r1
 80054aa:	1c75      	adds	r5, r6, #1
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	60e3      	str	r3, [r4, #12]
 80054b0:	60a3      	str	r3, [r4, #8]
 80054b2:	7013      	strb	r3, [r2, #0]
 80054b4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80054b6:	4b59      	ldr	r3, [pc, #356]	@ (800561c <_vfiprintf_r+0x224>)
 80054b8:	2205      	movs	r2, #5
 80054ba:	0018      	movs	r0, r3
 80054bc:	7829      	ldrb	r1, [r5, #0]
 80054be:	9305      	str	r3, [sp, #20]
 80054c0:	f000 fb88 	bl	8005bd4 <memchr>
 80054c4:	1c6e      	adds	r6, r5, #1
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d11f      	bne.n	800550a <_vfiprintf_r+0x112>
 80054ca:	6822      	ldr	r2, [r4, #0]
 80054cc:	06d3      	lsls	r3, r2, #27
 80054ce:	d504      	bpl.n	80054da <_vfiprintf_r+0xe2>
 80054d0:	2353      	movs	r3, #83	@ 0x53
 80054d2:	a904      	add	r1, sp, #16
 80054d4:	185b      	adds	r3, r3, r1
 80054d6:	2120      	movs	r1, #32
 80054d8:	7019      	strb	r1, [r3, #0]
 80054da:	0713      	lsls	r3, r2, #28
 80054dc:	d504      	bpl.n	80054e8 <_vfiprintf_r+0xf0>
 80054de:	2353      	movs	r3, #83	@ 0x53
 80054e0:	a904      	add	r1, sp, #16
 80054e2:	185b      	adds	r3, r3, r1
 80054e4:	212b      	movs	r1, #43	@ 0x2b
 80054e6:	7019      	strb	r1, [r3, #0]
 80054e8:	782b      	ldrb	r3, [r5, #0]
 80054ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80054ec:	d016      	beq.n	800551c <_vfiprintf_r+0x124>
 80054ee:	002e      	movs	r6, r5
 80054f0:	2100      	movs	r1, #0
 80054f2:	200a      	movs	r0, #10
 80054f4:	68e3      	ldr	r3, [r4, #12]
 80054f6:	7832      	ldrb	r2, [r6, #0]
 80054f8:	1c75      	adds	r5, r6, #1
 80054fa:	3a30      	subs	r2, #48	@ 0x30
 80054fc:	2a09      	cmp	r2, #9
 80054fe:	d950      	bls.n	80055a2 <_vfiprintf_r+0x1aa>
 8005500:	2900      	cmp	r1, #0
 8005502:	d111      	bne.n	8005528 <_vfiprintf_r+0x130>
 8005504:	e017      	b.n	8005536 <_vfiprintf_r+0x13e>
 8005506:	3601      	adds	r6, #1
 8005508:	e7af      	b.n	800546a <_vfiprintf_r+0x72>
 800550a:	9b05      	ldr	r3, [sp, #20]
 800550c:	6822      	ldr	r2, [r4, #0]
 800550e:	1ac0      	subs	r0, r0, r3
 8005510:	2301      	movs	r3, #1
 8005512:	4083      	lsls	r3, r0
 8005514:	4313      	orrs	r3, r2
 8005516:	0035      	movs	r5, r6
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	e7cc      	b.n	80054b6 <_vfiprintf_r+0xbe>
 800551c:	9b07      	ldr	r3, [sp, #28]
 800551e:	1d19      	adds	r1, r3, #4
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	9107      	str	r1, [sp, #28]
 8005524:	2b00      	cmp	r3, #0
 8005526:	db01      	blt.n	800552c <_vfiprintf_r+0x134>
 8005528:	930b      	str	r3, [sp, #44]	@ 0x2c
 800552a:	e004      	b.n	8005536 <_vfiprintf_r+0x13e>
 800552c:	425b      	negs	r3, r3
 800552e:	60e3      	str	r3, [r4, #12]
 8005530:	2302      	movs	r3, #2
 8005532:	4313      	orrs	r3, r2
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	7833      	ldrb	r3, [r6, #0]
 8005538:	2b2e      	cmp	r3, #46	@ 0x2e
 800553a:	d10c      	bne.n	8005556 <_vfiprintf_r+0x15e>
 800553c:	7873      	ldrb	r3, [r6, #1]
 800553e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005540:	d134      	bne.n	80055ac <_vfiprintf_r+0x1b4>
 8005542:	9b07      	ldr	r3, [sp, #28]
 8005544:	3602      	adds	r6, #2
 8005546:	1d1a      	adds	r2, r3, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	9207      	str	r2, [sp, #28]
 800554c:	2b00      	cmp	r3, #0
 800554e:	da01      	bge.n	8005554 <_vfiprintf_r+0x15c>
 8005550:	2301      	movs	r3, #1
 8005552:	425b      	negs	r3, r3
 8005554:	9309      	str	r3, [sp, #36]	@ 0x24
 8005556:	4d32      	ldr	r5, [pc, #200]	@ (8005620 <_vfiprintf_r+0x228>)
 8005558:	2203      	movs	r2, #3
 800555a:	0028      	movs	r0, r5
 800555c:	7831      	ldrb	r1, [r6, #0]
 800555e:	f000 fb39 	bl	8005bd4 <memchr>
 8005562:	2800      	cmp	r0, #0
 8005564:	d006      	beq.n	8005574 <_vfiprintf_r+0x17c>
 8005566:	2340      	movs	r3, #64	@ 0x40
 8005568:	1b40      	subs	r0, r0, r5
 800556a:	4083      	lsls	r3, r0
 800556c:	6822      	ldr	r2, [r4, #0]
 800556e:	3601      	adds	r6, #1
 8005570:	4313      	orrs	r3, r2
 8005572:	6023      	str	r3, [r4, #0]
 8005574:	7831      	ldrb	r1, [r6, #0]
 8005576:	2206      	movs	r2, #6
 8005578:	482a      	ldr	r0, [pc, #168]	@ (8005624 <_vfiprintf_r+0x22c>)
 800557a:	1c75      	adds	r5, r6, #1
 800557c:	7621      	strb	r1, [r4, #24]
 800557e:	f000 fb29 	bl	8005bd4 <memchr>
 8005582:	2800      	cmp	r0, #0
 8005584:	d040      	beq.n	8005608 <_vfiprintf_r+0x210>
 8005586:	4b28      	ldr	r3, [pc, #160]	@ (8005628 <_vfiprintf_r+0x230>)
 8005588:	2b00      	cmp	r3, #0
 800558a:	d122      	bne.n	80055d2 <_vfiprintf_r+0x1da>
 800558c:	2207      	movs	r2, #7
 800558e:	9b07      	ldr	r3, [sp, #28]
 8005590:	3307      	adds	r3, #7
 8005592:	4393      	bics	r3, r2
 8005594:	3308      	adds	r3, #8
 8005596:	9307      	str	r3, [sp, #28]
 8005598:	6963      	ldr	r3, [r4, #20]
 800559a:	9a04      	ldr	r2, [sp, #16]
 800559c:	189b      	adds	r3, r3, r2
 800559e:	6163      	str	r3, [r4, #20]
 80055a0:	e762      	b.n	8005468 <_vfiprintf_r+0x70>
 80055a2:	4343      	muls	r3, r0
 80055a4:	002e      	movs	r6, r5
 80055a6:	2101      	movs	r1, #1
 80055a8:	189b      	adds	r3, r3, r2
 80055aa:	e7a4      	b.n	80054f6 <_vfiprintf_r+0xfe>
 80055ac:	2300      	movs	r3, #0
 80055ae:	200a      	movs	r0, #10
 80055b0:	0019      	movs	r1, r3
 80055b2:	3601      	adds	r6, #1
 80055b4:	6063      	str	r3, [r4, #4]
 80055b6:	7832      	ldrb	r2, [r6, #0]
 80055b8:	1c75      	adds	r5, r6, #1
 80055ba:	3a30      	subs	r2, #48	@ 0x30
 80055bc:	2a09      	cmp	r2, #9
 80055be:	d903      	bls.n	80055c8 <_vfiprintf_r+0x1d0>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0c8      	beq.n	8005556 <_vfiprintf_r+0x15e>
 80055c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80055c6:	e7c6      	b.n	8005556 <_vfiprintf_r+0x15e>
 80055c8:	4341      	muls	r1, r0
 80055ca:	002e      	movs	r6, r5
 80055cc:	2301      	movs	r3, #1
 80055ce:	1889      	adds	r1, r1, r2
 80055d0:	e7f1      	b.n	80055b6 <_vfiprintf_r+0x1be>
 80055d2:	aa07      	add	r2, sp, #28
 80055d4:	9200      	str	r2, [sp, #0]
 80055d6:	0021      	movs	r1, r4
 80055d8:	003a      	movs	r2, r7
 80055da:	4b14      	ldr	r3, [pc, #80]	@ (800562c <_vfiprintf_r+0x234>)
 80055dc:	9803      	ldr	r0, [sp, #12]
 80055de:	e000      	b.n	80055e2 <_vfiprintf_r+0x1ea>
 80055e0:	bf00      	nop
 80055e2:	9004      	str	r0, [sp, #16]
 80055e4:	9b04      	ldr	r3, [sp, #16]
 80055e6:	3301      	adds	r3, #1
 80055e8:	d1d6      	bne.n	8005598 <_vfiprintf_r+0x1a0>
 80055ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055ec:	07db      	lsls	r3, r3, #31
 80055ee:	d405      	bmi.n	80055fc <_vfiprintf_r+0x204>
 80055f0:	89bb      	ldrh	r3, [r7, #12]
 80055f2:	059b      	lsls	r3, r3, #22
 80055f4:	d402      	bmi.n	80055fc <_vfiprintf_r+0x204>
 80055f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80055f8:	f7ff fdd8 	bl	80051ac <__retarget_lock_release_recursive>
 80055fc:	89bb      	ldrh	r3, [r7, #12]
 80055fe:	065b      	lsls	r3, r3, #25
 8005600:	d500      	bpl.n	8005604 <_vfiprintf_r+0x20c>
 8005602:	e71e      	b.n	8005442 <_vfiprintf_r+0x4a>
 8005604:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005606:	e71e      	b.n	8005446 <_vfiprintf_r+0x4e>
 8005608:	aa07      	add	r2, sp, #28
 800560a:	9200      	str	r2, [sp, #0]
 800560c:	0021      	movs	r1, r4
 800560e:	003a      	movs	r2, r7
 8005610:	4b06      	ldr	r3, [pc, #24]	@ (800562c <_vfiprintf_r+0x234>)
 8005612:	9803      	ldr	r0, [sp, #12]
 8005614:	f000 f87c 	bl	8005710 <_printf_i>
 8005618:	e7e3      	b.n	80055e2 <_vfiprintf_r+0x1ea>
 800561a:	46c0      	nop			@ (mov r8, r8)
 800561c:	08005d14 	.word	0x08005d14
 8005620:	08005d1a 	.word	0x08005d1a
 8005624:	08005d1e 	.word	0x08005d1e
 8005628:	00000000 	.word	0x00000000
 800562c:	080053d3 	.word	0x080053d3

08005630 <_printf_common>:
 8005630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005632:	0016      	movs	r6, r2
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	688a      	ldr	r2, [r1, #8]
 8005638:	690b      	ldr	r3, [r1, #16]
 800563a:	000c      	movs	r4, r1
 800563c:	9000      	str	r0, [sp, #0]
 800563e:	4293      	cmp	r3, r2
 8005640:	da00      	bge.n	8005644 <_printf_common+0x14>
 8005642:	0013      	movs	r3, r2
 8005644:	0022      	movs	r2, r4
 8005646:	6033      	str	r3, [r6, #0]
 8005648:	3243      	adds	r2, #67	@ 0x43
 800564a:	7812      	ldrb	r2, [r2, #0]
 800564c:	2a00      	cmp	r2, #0
 800564e:	d001      	beq.n	8005654 <_printf_common+0x24>
 8005650:	3301      	adds	r3, #1
 8005652:	6033      	str	r3, [r6, #0]
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	069b      	lsls	r3, r3, #26
 8005658:	d502      	bpl.n	8005660 <_printf_common+0x30>
 800565a:	6833      	ldr	r3, [r6, #0]
 800565c:	3302      	adds	r3, #2
 800565e:	6033      	str	r3, [r6, #0]
 8005660:	6822      	ldr	r2, [r4, #0]
 8005662:	2306      	movs	r3, #6
 8005664:	0015      	movs	r5, r2
 8005666:	401d      	ands	r5, r3
 8005668:	421a      	tst	r2, r3
 800566a:	d027      	beq.n	80056bc <_printf_common+0x8c>
 800566c:	0023      	movs	r3, r4
 800566e:	3343      	adds	r3, #67	@ 0x43
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	1e5a      	subs	r2, r3, #1
 8005674:	4193      	sbcs	r3, r2
 8005676:	6822      	ldr	r2, [r4, #0]
 8005678:	0692      	lsls	r2, r2, #26
 800567a:	d430      	bmi.n	80056de <_printf_common+0xae>
 800567c:	0022      	movs	r2, r4
 800567e:	9901      	ldr	r1, [sp, #4]
 8005680:	9800      	ldr	r0, [sp, #0]
 8005682:	9d08      	ldr	r5, [sp, #32]
 8005684:	3243      	adds	r2, #67	@ 0x43
 8005686:	47a8      	blx	r5
 8005688:	3001      	adds	r0, #1
 800568a:	d025      	beq.n	80056d8 <_printf_common+0xa8>
 800568c:	2206      	movs	r2, #6
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	2500      	movs	r5, #0
 8005692:	4013      	ands	r3, r2
 8005694:	2b04      	cmp	r3, #4
 8005696:	d105      	bne.n	80056a4 <_printf_common+0x74>
 8005698:	6833      	ldr	r3, [r6, #0]
 800569a:	68e5      	ldr	r5, [r4, #12]
 800569c:	1aed      	subs	r5, r5, r3
 800569e:	43eb      	mvns	r3, r5
 80056a0:	17db      	asrs	r3, r3, #31
 80056a2:	401d      	ands	r5, r3
 80056a4:	68a3      	ldr	r3, [r4, #8]
 80056a6:	6922      	ldr	r2, [r4, #16]
 80056a8:	4293      	cmp	r3, r2
 80056aa:	dd01      	ble.n	80056b0 <_printf_common+0x80>
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	18ed      	adds	r5, r5, r3
 80056b0:	2600      	movs	r6, #0
 80056b2:	42b5      	cmp	r5, r6
 80056b4:	d120      	bne.n	80056f8 <_printf_common+0xc8>
 80056b6:	2000      	movs	r0, #0
 80056b8:	e010      	b.n	80056dc <_printf_common+0xac>
 80056ba:	3501      	adds	r5, #1
 80056bc:	68e3      	ldr	r3, [r4, #12]
 80056be:	6832      	ldr	r2, [r6, #0]
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	42ab      	cmp	r3, r5
 80056c4:	ddd2      	ble.n	800566c <_printf_common+0x3c>
 80056c6:	0022      	movs	r2, r4
 80056c8:	2301      	movs	r3, #1
 80056ca:	9901      	ldr	r1, [sp, #4]
 80056cc:	9800      	ldr	r0, [sp, #0]
 80056ce:	9f08      	ldr	r7, [sp, #32]
 80056d0:	3219      	adds	r2, #25
 80056d2:	47b8      	blx	r7
 80056d4:	3001      	adds	r0, #1
 80056d6:	d1f0      	bne.n	80056ba <_printf_common+0x8a>
 80056d8:	2001      	movs	r0, #1
 80056da:	4240      	negs	r0, r0
 80056dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056de:	2030      	movs	r0, #48	@ 0x30
 80056e0:	18e1      	adds	r1, r4, r3
 80056e2:	3143      	adds	r1, #67	@ 0x43
 80056e4:	7008      	strb	r0, [r1, #0]
 80056e6:	0021      	movs	r1, r4
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	3145      	adds	r1, #69	@ 0x45
 80056ec:	7809      	ldrb	r1, [r1, #0]
 80056ee:	18a2      	adds	r2, r4, r2
 80056f0:	3243      	adds	r2, #67	@ 0x43
 80056f2:	3302      	adds	r3, #2
 80056f4:	7011      	strb	r1, [r2, #0]
 80056f6:	e7c1      	b.n	800567c <_printf_common+0x4c>
 80056f8:	0022      	movs	r2, r4
 80056fa:	2301      	movs	r3, #1
 80056fc:	9901      	ldr	r1, [sp, #4]
 80056fe:	9800      	ldr	r0, [sp, #0]
 8005700:	9f08      	ldr	r7, [sp, #32]
 8005702:	321a      	adds	r2, #26
 8005704:	47b8      	blx	r7
 8005706:	3001      	adds	r0, #1
 8005708:	d0e6      	beq.n	80056d8 <_printf_common+0xa8>
 800570a:	3601      	adds	r6, #1
 800570c:	e7d1      	b.n	80056b2 <_printf_common+0x82>
	...

08005710 <_printf_i>:
 8005710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005712:	b08b      	sub	sp, #44	@ 0x2c
 8005714:	9206      	str	r2, [sp, #24]
 8005716:	000a      	movs	r2, r1
 8005718:	3243      	adds	r2, #67	@ 0x43
 800571a:	9307      	str	r3, [sp, #28]
 800571c:	9005      	str	r0, [sp, #20]
 800571e:	9203      	str	r2, [sp, #12]
 8005720:	7e0a      	ldrb	r2, [r1, #24]
 8005722:	000c      	movs	r4, r1
 8005724:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005726:	2a78      	cmp	r2, #120	@ 0x78
 8005728:	d809      	bhi.n	800573e <_printf_i+0x2e>
 800572a:	2a62      	cmp	r2, #98	@ 0x62
 800572c:	d80b      	bhi.n	8005746 <_printf_i+0x36>
 800572e:	2a00      	cmp	r2, #0
 8005730:	d100      	bne.n	8005734 <_printf_i+0x24>
 8005732:	e0bc      	b.n	80058ae <_printf_i+0x19e>
 8005734:	497b      	ldr	r1, [pc, #492]	@ (8005924 <_printf_i+0x214>)
 8005736:	9104      	str	r1, [sp, #16]
 8005738:	2a58      	cmp	r2, #88	@ 0x58
 800573a:	d100      	bne.n	800573e <_printf_i+0x2e>
 800573c:	e090      	b.n	8005860 <_printf_i+0x150>
 800573e:	0025      	movs	r5, r4
 8005740:	3542      	adds	r5, #66	@ 0x42
 8005742:	702a      	strb	r2, [r5, #0]
 8005744:	e022      	b.n	800578c <_printf_i+0x7c>
 8005746:	0010      	movs	r0, r2
 8005748:	3863      	subs	r0, #99	@ 0x63
 800574a:	2815      	cmp	r0, #21
 800574c:	d8f7      	bhi.n	800573e <_printf_i+0x2e>
 800574e:	f7fa fcdb 	bl	8000108 <__gnu_thumb1_case_shi>
 8005752:	0016      	.short	0x0016
 8005754:	fff6001f 	.word	0xfff6001f
 8005758:	fff6fff6 	.word	0xfff6fff6
 800575c:	001ffff6 	.word	0x001ffff6
 8005760:	fff6fff6 	.word	0xfff6fff6
 8005764:	fff6fff6 	.word	0xfff6fff6
 8005768:	003600a1 	.word	0x003600a1
 800576c:	fff60080 	.word	0xfff60080
 8005770:	00b2fff6 	.word	0x00b2fff6
 8005774:	0036fff6 	.word	0x0036fff6
 8005778:	fff6fff6 	.word	0xfff6fff6
 800577c:	0084      	.short	0x0084
 800577e:	0025      	movs	r5, r4
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	3542      	adds	r5, #66	@ 0x42
 8005784:	1d11      	adds	r1, r2, #4
 8005786:	6019      	str	r1, [r3, #0]
 8005788:	6813      	ldr	r3, [r2, #0]
 800578a:	702b      	strb	r3, [r5, #0]
 800578c:	2301      	movs	r3, #1
 800578e:	e0a0      	b.n	80058d2 <_printf_i+0x1c2>
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	6809      	ldr	r1, [r1, #0]
 8005794:	1d02      	adds	r2, r0, #4
 8005796:	060d      	lsls	r5, r1, #24
 8005798:	d50b      	bpl.n	80057b2 <_printf_i+0xa2>
 800579a:	6806      	ldr	r6, [r0, #0]
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	2e00      	cmp	r6, #0
 80057a0:	da03      	bge.n	80057aa <_printf_i+0x9a>
 80057a2:	232d      	movs	r3, #45	@ 0x2d
 80057a4:	9a03      	ldr	r2, [sp, #12]
 80057a6:	4276      	negs	r6, r6
 80057a8:	7013      	strb	r3, [r2, #0]
 80057aa:	4b5e      	ldr	r3, [pc, #376]	@ (8005924 <_printf_i+0x214>)
 80057ac:	270a      	movs	r7, #10
 80057ae:	9304      	str	r3, [sp, #16]
 80057b0:	e018      	b.n	80057e4 <_printf_i+0xd4>
 80057b2:	6806      	ldr	r6, [r0, #0]
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	0649      	lsls	r1, r1, #25
 80057b8:	d5f1      	bpl.n	800579e <_printf_i+0x8e>
 80057ba:	b236      	sxth	r6, r6
 80057bc:	e7ef      	b.n	800579e <_printf_i+0x8e>
 80057be:	6808      	ldr	r0, [r1, #0]
 80057c0:	6819      	ldr	r1, [r3, #0]
 80057c2:	c940      	ldmia	r1!, {r6}
 80057c4:	0605      	lsls	r5, r0, #24
 80057c6:	d402      	bmi.n	80057ce <_printf_i+0xbe>
 80057c8:	0640      	lsls	r0, r0, #25
 80057ca:	d500      	bpl.n	80057ce <_printf_i+0xbe>
 80057cc:	b2b6      	uxth	r6, r6
 80057ce:	6019      	str	r1, [r3, #0]
 80057d0:	4b54      	ldr	r3, [pc, #336]	@ (8005924 <_printf_i+0x214>)
 80057d2:	270a      	movs	r7, #10
 80057d4:	9304      	str	r3, [sp, #16]
 80057d6:	2a6f      	cmp	r2, #111	@ 0x6f
 80057d8:	d100      	bne.n	80057dc <_printf_i+0xcc>
 80057da:	3f02      	subs	r7, #2
 80057dc:	0023      	movs	r3, r4
 80057de:	2200      	movs	r2, #0
 80057e0:	3343      	adds	r3, #67	@ 0x43
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	6863      	ldr	r3, [r4, #4]
 80057e6:	60a3      	str	r3, [r4, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	db03      	blt.n	80057f4 <_printf_i+0xe4>
 80057ec:	2104      	movs	r1, #4
 80057ee:	6822      	ldr	r2, [r4, #0]
 80057f0:	438a      	bics	r2, r1
 80057f2:	6022      	str	r2, [r4, #0]
 80057f4:	2e00      	cmp	r6, #0
 80057f6:	d102      	bne.n	80057fe <_printf_i+0xee>
 80057f8:	9d03      	ldr	r5, [sp, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00c      	beq.n	8005818 <_printf_i+0x108>
 80057fe:	9d03      	ldr	r5, [sp, #12]
 8005800:	0030      	movs	r0, r6
 8005802:	0039      	movs	r1, r7
 8005804:	f7fa fd10 	bl	8000228 <__aeabi_uidivmod>
 8005808:	9b04      	ldr	r3, [sp, #16]
 800580a:	3d01      	subs	r5, #1
 800580c:	5c5b      	ldrb	r3, [r3, r1]
 800580e:	702b      	strb	r3, [r5, #0]
 8005810:	0033      	movs	r3, r6
 8005812:	0006      	movs	r6, r0
 8005814:	429f      	cmp	r7, r3
 8005816:	d9f3      	bls.n	8005800 <_printf_i+0xf0>
 8005818:	2f08      	cmp	r7, #8
 800581a:	d109      	bne.n	8005830 <_printf_i+0x120>
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	07db      	lsls	r3, r3, #31
 8005820:	d506      	bpl.n	8005830 <_printf_i+0x120>
 8005822:	6862      	ldr	r2, [r4, #4]
 8005824:	6923      	ldr	r3, [r4, #16]
 8005826:	429a      	cmp	r2, r3
 8005828:	dc02      	bgt.n	8005830 <_printf_i+0x120>
 800582a:	2330      	movs	r3, #48	@ 0x30
 800582c:	3d01      	subs	r5, #1
 800582e:	702b      	strb	r3, [r5, #0]
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	1b5b      	subs	r3, r3, r5
 8005834:	6123      	str	r3, [r4, #16]
 8005836:	9b07      	ldr	r3, [sp, #28]
 8005838:	0021      	movs	r1, r4
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	9805      	ldr	r0, [sp, #20]
 800583e:	9b06      	ldr	r3, [sp, #24]
 8005840:	aa09      	add	r2, sp, #36	@ 0x24
 8005842:	f7ff fef5 	bl	8005630 <_printf_common>
 8005846:	3001      	adds	r0, #1
 8005848:	d148      	bne.n	80058dc <_printf_i+0x1cc>
 800584a:	2001      	movs	r0, #1
 800584c:	4240      	negs	r0, r0
 800584e:	b00b      	add	sp, #44	@ 0x2c
 8005850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005852:	2220      	movs	r2, #32
 8005854:	6809      	ldr	r1, [r1, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	6022      	str	r2, [r4, #0]
 800585a:	2278      	movs	r2, #120	@ 0x78
 800585c:	4932      	ldr	r1, [pc, #200]	@ (8005928 <_printf_i+0x218>)
 800585e:	9104      	str	r1, [sp, #16]
 8005860:	0021      	movs	r1, r4
 8005862:	3145      	adds	r1, #69	@ 0x45
 8005864:	700a      	strb	r2, [r1, #0]
 8005866:	6819      	ldr	r1, [r3, #0]
 8005868:	6822      	ldr	r2, [r4, #0]
 800586a:	c940      	ldmia	r1!, {r6}
 800586c:	0610      	lsls	r0, r2, #24
 800586e:	d402      	bmi.n	8005876 <_printf_i+0x166>
 8005870:	0650      	lsls	r0, r2, #25
 8005872:	d500      	bpl.n	8005876 <_printf_i+0x166>
 8005874:	b2b6      	uxth	r6, r6
 8005876:	6019      	str	r1, [r3, #0]
 8005878:	07d3      	lsls	r3, r2, #31
 800587a:	d502      	bpl.n	8005882 <_printf_i+0x172>
 800587c:	2320      	movs	r3, #32
 800587e:	4313      	orrs	r3, r2
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	2e00      	cmp	r6, #0
 8005884:	d001      	beq.n	800588a <_printf_i+0x17a>
 8005886:	2710      	movs	r7, #16
 8005888:	e7a8      	b.n	80057dc <_printf_i+0xcc>
 800588a:	2220      	movs	r2, #32
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	4393      	bics	r3, r2
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	e7f8      	b.n	8005886 <_printf_i+0x176>
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	680d      	ldr	r5, [r1, #0]
 8005898:	1d10      	adds	r0, r2, #4
 800589a:	6949      	ldr	r1, [r1, #20]
 800589c:	6018      	str	r0, [r3, #0]
 800589e:	6813      	ldr	r3, [r2, #0]
 80058a0:	062e      	lsls	r6, r5, #24
 80058a2:	d501      	bpl.n	80058a8 <_printf_i+0x198>
 80058a4:	6019      	str	r1, [r3, #0]
 80058a6:	e002      	b.n	80058ae <_printf_i+0x19e>
 80058a8:	066d      	lsls	r5, r5, #25
 80058aa:	d5fb      	bpl.n	80058a4 <_printf_i+0x194>
 80058ac:	8019      	strh	r1, [r3, #0]
 80058ae:	2300      	movs	r3, #0
 80058b0:	9d03      	ldr	r5, [sp, #12]
 80058b2:	6123      	str	r3, [r4, #16]
 80058b4:	e7bf      	b.n	8005836 <_printf_i+0x126>
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	1d11      	adds	r1, r2, #4
 80058ba:	6019      	str	r1, [r3, #0]
 80058bc:	6815      	ldr	r5, [r2, #0]
 80058be:	2100      	movs	r1, #0
 80058c0:	0028      	movs	r0, r5
 80058c2:	6862      	ldr	r2, [r4, #4]
 80058c4:	f000 f986 	bl	8005bd4 <memchr>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d001      	beq.n	80058d0 <_printf_i+0x1c0>
 80058cc:	1b40      	subs	r0, r0, r5
 80058ce:	6060      	str	r0, [r4, #4]
 80058d0:	6863      	ldr	r3, [r4, #4]
 80058d2:	6123      	str	r3, [r4, #16]
 80058d4:	2300      	movs	r3, #0
 80058d6:	9a03      	ldr	r2, [sp, #12]
 80058d8:	7013      	strb	r3, [r2, #0]
 80058da:	e7ac      	b.n	8005836 <_printf_i+0x126>
 80058dc:	002a      	movs	r2, r5
 80058de:	6923      	ldr	r3, [r4, #16]
 80058e0:	9906      	ldr	r1, [sp, #24]
 80058e2:	9805      	ldr	r0, [sp, #20]
 80058e4:	9d07      	ldr	r5, [sp, #28]
 80058e6:	47a8      	blx	r5
 80058e8:	3001      	adds	r0, #1
 80058ea:	d0ae      	beq.n	800584a <_printf_i+0x13a>
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	079b      	lsls	r3, r3, #30
 80058f0:	d415      	bmi.n	800591e <_printf_i+0x20e>
 80058f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058f4:	68e0      	ldr	r0, [r4, #12]
 80058f6:	4298      	cmp	r0, r3
 80058f8:	daa9      	bge.n	800584e <_printf_i+0x13e>
 80058fa:	0018      	movs	r0, r3
 80058fc:	e7a7      	b.n	800584e <_printf_i+0x13e>
 80058fe:	0022      	movs	r2, r4
 8005900:	2301      	movs	r3, #1
 8005902:	9906      	ldr	r1, [sp, #24]
 8005904:	9805      	ldr	r0, [sp, #20]
 8005906:	9e07      	ldr	r6, [sp, #28]
 8005908:	3219      	adds	r2, #25
 800590a:	47b0      	blx	r6
 800590c:	3001      	adds	r0, #1
 800590e:	d09c      	beq.n	800584a <_printf_i+0x13a>
 8005910:	3501      	adds	r5, #1
 8005912:	68e3      	ldr	r3, [r4, #12]
 8005914:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005916:	1a9b      	subs	r3, r3, r2
 8005918:	42ab      	cmp	r3, r5
 800591a:	dcf0      	bgt.n	80058fe <_printf_i+0x1ee>
 800591c:	e7e9      	b.n	80058f2 <_printf_i+0x1e2>
 800591e:	2500      	movs	r5, #0
 8005920:	e7f7      	b.n	8005912 <_printf_i+0x202>
 8005922:	46c0      	nop			@ (mov r8, r8)
 8005924:	08005d25 	.word	0x08005d25
 8005928:	08005d36 	.word	0x08005d36

0800592c <__sflush_r>:
 800592c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800592e:	220c      	movs	r2, #12
 8005930:	5e8b      	ldrsh	r3, [r1, r2]
 8005932:	0005      	movs	r5, r0
 8005934:	000c      	movs	r4, r1
 8005936:	071a      	lsls	r2, r3, #28
 8005938:	d456      	bmi.n	80059e8 <__sflush_r+0xbc>
 800593a:	684a      	ldr	r2, [r1, #4]
 800593c:	2a00      	cmp	r2, #0
 800593e:	dc02      	bgt.n	8005946 <__sflush_r+0x1a>
 8005940:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005942:	2a00      	cmp	r2, #0
 8005944:	dd4e      	ble.n	80059e4 <__sflush_r+0xb8>
 8005946:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005948:	2f00      	cmp	r7, #0
 800594a:	d04b      	beq.n	80059e4 <__sflush_r+0xb8>
 800594c:	2200      	movs	r2, #0
 800594e:	2080      	movs	r0, #128	@ 0x80
 8005950:	682e      	ldr	r6, [r5, #0]
 8005952:	602a      	str	r2, [r5, #0]
 8005954:	001a      	movs	r2, r3
 8005956:	0140      	lsls	r0, r0, #5
 8005958:	6a21      	ldr	r1, [r4, #32]
 800595a:	4002      	ands	r2, r0
 800595c:	4203      	tst	r3, r0
 800595e:	d033      	beq.n	80059c8 <__sflush_r+0x9c>
 8005960:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	075b      	lsls	r3, r3, #29
 8005966:	d506      	bpl.n	8005976 <__sflush_r+0x4a>
 8005968:	6863      	ldr	r3, [r4, #4]
 800596a:	1ad2      	subs	r2, r2, r3
 800596c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <__sflush_r+0x4a>
 8005972:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005974:	1ad2      	subs	r2, r2, r3
 8005976:	2300      	movs	r3, #0
 8005978:	0028      	movs	r0, r5
 800597a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800597c:	6a21      	ldr	r1, [r4, #32]
 800597e:	47b8      	blx	r7
 8005980:	89a2      	ldrh	r2, [r4, #12]
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	d106      	bne.n	8005994 <__sflush_r+0x68>
 8005986:	6829      	ldr	r1, [r5, #0]
 8005988:	291d      	cmp	r1, #29
 800598a:	d846      	bhi.n	8005a1a <__sflush_r+0xee>
 800598c:	4b29      	ldr	r3, [pc, #164]	@ (8005a34 <__sflush_r+0x108>)
 800598e:	410b      	asrs	r3, r1
 8005990:	07db      	lsls	r3, r3, #31
 8005992:	d442      	bmi.n	8005a1a <__sflush_r+0xee>
 8005994:	2300      	movs	r3, #0
 8005996:	6063      	str	r3, [r4, #4]
 8005998:	6923      	ldr	r3, [r4, #16]
 800599a:	6023      	str	r3, [r4, #0]
 800599c:	04d2      	lsls	r2, r2, #19
 800599e:	d505      	bpl.n	80059ac <__sflush_r+0x80>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d102      	bne.n	80059aa <__sflush_r+0x7e>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d100      	bne.n	80059ac <__sflush_r+0x80>
 80059aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80059ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059ae:	602e      	str	r6, [r5, #0]
 80059b0:	2900      	cmp	r1, #0
 80059b2:	d017      	beq.n	80059e4 <__sflush_r+0xb8>
 80059b4:	0023      	movs	r3, r4
 80059b6:	3344      	adds	r3, #68	@ 0x44
 80059b8:	4299      	cmp	r1, r3
 80059ba:	d002      	beq.n	80059c2 <__sflush_r+0x96>
 80059bc:	0028      	movs	r0, r5
 80059be:	f7ff fbf7 	bl	80051b0 <_free_r>
 80059c2:	2300      	movs	r3, #0
 80059c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80059c6:	e00d      	b.n	80059e4 <__sflush_r+0xb8>
 80059c8:	2301      	movs	r3, #1
 80059ca:	0028      	movs	r0, r5
 80059cc:	47b8      	blx	r7
 80059ce:	0002      	movs	r2, r0
 80059d0:	1c43      	adds	r3, r0, #1
 80059d2:	d1c6      	bne.n	8005962 <__sflush_r+0x36>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0c3      	beq.n	8005962 <__sflush_r+0x36>
 80059da:	2b1d      	cmp	r3, #29
 80059dc:	d001      	beq.n	80059e2 <__sflush_r+0xb6>
 80059de:	2b16      	cmp	r3, #22
 80059e0:	d11a      	bne.n	8005a18 <__sflush_r+0xec>
 80059e2:	602e      	str	r6, [r5, #0]
 80059e4:	2000      	movs	r0, #0
 80059e6:	e01e      	b.n	8005a26 <__sflush_r+0xfa>
 80059e8:	690e      	ldr	r6, [r1, #16]
 80059ea:	2e00      	cmp	r6, #0
 80059ec:	d0fa      	beq.n	80059e4 <__sflush_r+0xb8>
 80059ee:	680f      	ldr	r7, [r1, #0]
 80059f0:	600e      	str	r6, [r1, #0]
 80059f2:	1bba      	subs	r2, r7, r6
 80059f4:	9201      	str	r2, [sp, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	079b      	lsls	r3, r3, #30
 80059fa:	d100      	bne.n	80059fe <__sflush_r+0xd2>
 80059fc:	694a      	ldr	r2, [r1, #20]
 80059fe:	60a2      	str	r2, [r4, #8]
 8005a00:	9b01      	ldr	r3, [sp, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	ddee      	ble.n	80059e4 <__sflush_r+0xb8>
 8005a06:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005a08:	0032      	movs	r2, r6
 8005a0a:	001f      	movs	r7, r3
 8005a0c:	0028      	movs	r0, r5
 8005a0e:	9b01      	ldr	r3, [sp, #4]
 8005a10:	6a21      	ldr	r1, [r4, #32]
 8005a12:	47b8      	blx	r7
 8005a14:	2800      	cmp	r0, #0
 8005a16:	dc07      	bgt.n	8005a28 <__sflush_r+0xfc>
 8005a18:	89a2      	ldrh	r2, [r4, #12]
 8005a1a:	2340      	movs	r3, #64	@ 0x40
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	b21b      	sxth	r3, r3
 8005a22:	81a3      	strh	r3, [r4, #12]
 8005a24:	4240      	negs	r0, r0
 8005a26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a28:	9b01      	ldr	r3, [sp, #4]
 8005a2a:	1836      	adds	r6, r6, r0
 8005a2c:	1a1b      	subs	r3, r3, r0
 8005a2e:	9301      	str	r3, [sp, #4]
 8005a30:	e7e6      	b.n	8005a00 <__sflush_r+0xd4>
 8005a32:	46c0      	nop			@ (mov r8, r8)
 8005a34:	dfbffffe 	.word	0xdfbffffe

08005a38 <_fflush_r>:
 8005a38:	690b      	ldr	r3, [r1, #16]
 8005a3a:	b570      	push	{r4, r5, r6, lr}
 8005a3c:	0005      	movs	r5, r0
 8005a3e:	000c      	movs	r4, r1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <_fflush_r+0x12>
 8005a44:	2500      	movs	r5, #0
 8005a46:	0028      	movs	r0, r5
 8005a48:	bd70      	pop	{r4, r5, r6, pc}
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d004      	beq.n	8005a58 <_fflush_r+0x20>
 8005a4e:	6a03      	ldr	r3, [r0, #32]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <_fflush_r+0x20>
 8005a54:	f7ff f998 	bl	8004d88 <__sinit>
 8005a58:	220c      	movs	r2, #12
 8005a5a:	5ea3      	ldrsh	r3, [r4, r2]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0f1      	beq.n	8005a44 <_fflush_r+0xc>
 8005a60:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005a62:	07d2      	lsls	r2, r2, #31
 8005a64:	d404      	bmi.n	8005a70 <_fflush_r+0x38>
 8005a66:	059b      	lsls	r3, r3, #22
 8005a68:	d402      	bmi.n	8005a70 <_fflush_r+0x38>
 8005a6a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a6c:	f7ff fb9d 	bl	80051aa <__retarget_lock_acquire_recursive>
 8005a70:	0028      	movs	r0, r5
 8005a72:	0021      	movs	r1, r4
 8005a74:	f7ff ff5a 	bl	800592c <__sflush_r>
 8005a78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a7a:	0005      	movs	r5, r0
 8005a7c:	07db      	lsls	r3, r3, #31
 8005a7e:	d4e2      	bmi.n	8005a46 <_fflush_r+0xe>
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	059b      	lsls	r3, r3, #22
 8005a84:	d4df      	bmi.n	8005a46 <_fflush_r+0xe>
 8005a86:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a88:	f7ff fb90 	bl	80051ac <__retarget_lock_release_recursive>
 8005a8c:	e7db      	b.n	8005a46 <_fflush_r+0xe>
	...

08005a90 <__swhatbuf_r>:
 8005a90:	b570      	push	{r4, r5, r6, lr}
 8005a92:	000e      	movs	r6, r1
 8005a94:	001d      	movs	r5, r3
 8005a96:	230e      	movs	r3, #14
 8005a98:	5ec9      	ldrsh	r1, [r1, r3]
 8005a9a:	0014      	movs	r4, r2
 8005a9c:	b096      	sub	sp, #88	@ 0x58
 8005a9e:	2900      	cmp	r1, #0
 8005aa0:	da0c      	bge.n	8005abc <__swhatbuf_r+0x2c>
 8005aa2:	89b2      	ldrh	r2, [r6, #12]
 8005aa4:	2380      	movs	r3, #128	@ 0x80
 8005aa6:	0011      	movs	r1, r2
 8005aa8:	4019      	ands	r1, r3
 8005aaa:	421a      	tst	r2, r3
 8005aac:	d114      	bne.n	8005ad8 <__swhatbuf_r+0x48>
 8005aae:	2380      	movs	r3, #128	@ 0x80
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	6029      	str	r1, [r5, #0]
 8005ab6:	6023      	str	r3, [r4, #0]
 8005ab8:	b016      	add	sp, #88	@ 0x58
 8005aba:	bd70      	pop	{r4, r5, r6, pc}
 8005abc:	466a      	mov	r2, sp
 8005abe:	f000 f853 	bl	8005b68 <_fstat_r>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	dbed      	blt.n	8005aa2 <__swhatbuf_r+0x12>
 8005ac6:	23f0      	movs	r3, #240	@ 0xf0
 8005ac8:	9901      	ldr	r1, [sp, #4]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	4019      	ands	r1, r3
 8005ace:	4b04      	ldr	r3, [pc, #16]	@ (8005ae0 <__swhatbuf_r+0x50>)
 8005ad0:	18c9      	adds	r1, r1, r3
 8005ad2:	424b      	negs	r3, r1
 8005ad4:	4159      	adcs	r1, r3
 8005ad6:	e7ea      	b.n	8005aae <__swhatbuf_r+0x1e>
 8005ad8:	2100      	movs	r1, #0
 8005ada:	2340      	movs	r3, #64	@ 0x40
 8005adc:	e7e9      	b.n	8005ab2 <__swhatbuf_r+0x22>
 8005ade:	46c0      	nop			@ (mov r8, r8)
 8005ae0:	ffffe000 	.word	0xffffe000

08005ae4 <__smakebuf_r>:
 8005ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ae6:	2602      	movs	r6, #2
 8005ae8:	898b      	ldrh	r3, [r1, #12]
 8005aea:	0005      	movs	r5, r0
 8005aec:	000c      	movs	r4, r1
 8005aee:	b085      	sub	sp, #20
 8005af0:	4233      	tst	r3, r6
 8005af2:	d007      	beq.n	8005b04 <__smakebuf_r+0x20>
 8005af4:	0023      	movs	r3, r4
 8005af6:	3347      	adds	r3, #71	@ 0x47
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	6123      	str	r3, [r4, #16]
 8005afc:	2301      	movs	r3, #1
 8005afe:	6163      	str	r3, [r4, #20]
 8005b00:	b005      	add	sp, #20
 8005b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b04:	ab03      	add	r3, sp, #12
 8005b06:	aa02      	add	r2, sp, #8
 8005b08:	f7ff ffc2 	bl	8005a90 <__swhatbuf_r>
 8005b0c:	9f02      	ldr	r7, [sp, #8]
 8005b0e:	9001      	str	r0, [sp, #4]
 8005b10:	0039      	movs	r1, r7
 8005b12:	0028      	movs	r0, r5
 8005b14:	f7ff fbb8 	bl	8005288 <_malloc_r>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d108      	bne.n	8005b2e <__smakebuf_r+0x4a>
 8005b1c:	220c      	movs	r2, #12
 8005b1e:	5ea3      	ldrsh	r3, [r4, r2]
 8005b20:	059a      	lsls	r2, r3, #22
 8005b22:	d4ed      	bmi.n	8005b00 <__smakebuf_r+0x1c>
 8005b24:	2203      	movs	r2, #3
 8005b26:	4393      	bics	r3, r2
 8005b28:	431e      	orrs	r6, r3
 8005b2a:	81a6      	strh	r6, [r4, #12]
 8005b2c:	e7e2      	b.n	8005af4 <__smakebuf_r+0x10>
 8005b2e:	2380      	movs	r3, #128	@ 0x80
 8005b30:	89a2      	ldrh	r2, [r4, #12]
 8005b32:	6020      	str	r0, [r4, #0]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	81a3      	strh	r3, [r4, #12]
 8005b38:	9b03      	ldr	r3, [sp, #12]
 8005b3a:	6120      	str	r0, [r4, #16]
 8005b3c:	6167      	str	r7, [r4, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00c      	beq.n	8005b5c <__smakebuf_r+0x78>
 8005b42:	0028      	movs	r0, r5
 8005b44:	230e      	movs	r3, #14
 8005b46:	5ee1      	ldrsh	r1, [r4, r3]
 8005b48:	f000 f820 	bl	8005b8c <_isatty_r>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d005      	beq.n	8005b5c <__smakebuf_r+0x78>
 8005b50:	2303      	movs	r3, #3
 8005b52:	89a2      	ldrh	r2, [r4, #12]
 8005b54:	439a      	bics	r2, r3
 8005b56:	3b02      	subs	r3, #2
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	81a3      	strh	r3, [r4, #12]
 8005b5c:	89a3      	ldrh	r3, [r4, #12]
 8005b5e:	9a01      	ldr	r2, [sp, #4]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	e7cc      	b.n	8005b00 <__smakebuf_r+0x1c>
	...

08005b68 <_fstat_r>:
 8005b68:	2300      	movs	r3, #0
 8005b6a:	b570      	push	{r4, r5, r6, lr}
 8005b6c:	4d06      	ldr	r5, [pc, #24]	@ (8005b88 <_fstat_r+0x20>)
 8005b6e:	0004      	movs	r4, r0
 8005b70:	0008      	movs	r0, r1
 8005b72:	0011      	movs	r1, r2
 8005b74:	602b      	str	r3, [r5, #0]
 8005b76:	f7fb fabe 	bl	80010f6 <_fstat>
 8005b7a:	1c43      	adds	r3, r0, #1
 8005b7c:	d103      	bne.n	8005b86 <_fstat_r+0x1e>
 8005b7e:	682b      	ldr	r3, [r5, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d000      	beq.n	8005b86 <_fstat_r+0x1e>
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	bd70      	pop	{r4, r5, r6, pc}
 8005b88:	200026bc 	.word	0x200026bc

08005b8c <_isatty_r>:
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	b570      	push	{r4, r5, r6, lr}
 8005b90:	4d06      	ldr	r5, [pc, #24]	@ (8005bac <_isatty_r+0x20>)
 8005b92:	0004      	movs	r4, r0
 8005b94:	0008      	movs	r0, r1
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	f7fb fabb 	bl	8001112 <_isatty>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d103      	bne.n	8005ba8 <_isatty_r+0x1c>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d000      	beq.n	8005ba8 <_isatty_r+0x1c>
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	bd70      	pop	{r4, r5, r6, pc}
 8005baa:	46c0      	nop			@ (mov r8, r8)
 8005bac:	200026bc 	.word	0x200026bc

08005bb0 <_sbrk_r>:
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	b570      	push	{r4, r5, r6, lr}
 8005bb4:	4d06      	ldr	r5, [pc, #24]	@ (8005bd0 <_sbrk_r+0x20>)
 8005bb6:	0004      	movs	r4, r0
 8005bb8:	0008      	movs	r0, r1
 8005bba:	602b      	str	r3, [r5, #0]
 8005bbc:	f7fb fabe 	bl	800113c <_sbrk>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	d103      	bne.n	8005bcc <_sbrk_r+0x1c>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d000      	beq.n	8005bcc <_sbrk_r+0x1c>
 8005bca:	6023      	str	r3, [r4, #0]
 8005bcc:	bd70      	pop	{r4, r5, r6, pc}
 8005bce:	46c0      	nop			@ (mov r8, r8)
 8005bd0:	200026bc 	.word	0x200026bc

08005bd4 <memchr>:
 8005bd4:	b2c9      	uxtb	r1, r1
 8005bd6:	1882      	adds	r2, r0, r2
 8005bd8:	4290      	cmp	r0, r2
 8005bda:	d101      	bne.n	8005be0 <memchr+0xc>
 8005bdc:	2000      	movs	r0, #0
 8005bde:	4770      	bx	lr
 8005be0:	7803      	ldrb	r3, [r0, #0]
 8005be2:	428b      	cmp	r3, r1
 8005be4:	d0fb      	beq.n	8005bde <memchr+0xa>
 8005be6:	3001      	adds	r0, #1
 8005be8:	e7f6      	b.n	8005bd8 <memchr+0x4>
	...

08005bec <_init>:
 8005bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bee:	46c0      	nop			@ (mov r8, r8)
 8005bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf2:	bc08      	pop	{r3}
 8005bf4:	469e      	mov	lr, r3
 8005bf6:	4770      	bx	lr

08005bf8 <_fini>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	46c0      	nop			@ (mov r8, r8)
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr
